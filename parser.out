Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body n_end_function
Rule 6     main -> FUNCTION MAIN n_start_main function_body n_end_main
Rule 7     function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 11    vars -> var n_increment_local_var_count vars
Rule 12    vars -> var n_increment_local_var_count
Rule 13    statements -> statement statements
Rule 14    statements -> statement
Rule 15    function_params -> type ID n_add_param array_index COMMA function_params
Rule 16    function_params -> type ID n_add_param array_index
Rule 17    function_params -> type ID n_add_param COMMA function_params
Rule 18    function_params -> type ID n_add_param
Rule 19    function_type -> INT n_add_function_type
Rule 20    function_type -> FLOAT n_add_function_type
Rule 21    function_type -> STRING n_add_function_type
Rule 22    function_type -> VOID n_add_function_type
Rule 23    var -> type_aux var_aux SEMICOLON
Rule 24    type_aux -> GLOBAL type
Rule 25    type_aux -> type
Rule 26    var_aux -> ID n_add_var_arr array_dim COMMA var_aux
Rule 27    var_aux -> ID n_add_var_arr array_dim
Rule 28    var_aux -> ID n_add_var COMMA var_aux
Rule 29    var_aux -> ID n_add_var
Rule 30    statement -> statement_aux SEMICOLON
Rule 31    statement -> statement_aux_2
Rule 32    statement_aux -> assignment
Rule 33    statement_aux -> function_call
Rule 34    statement_aux -> return
Rule 35    statement_aux -> print
Rule 36    statement_aux -> read
Rule 37    statement_aux_2 -> if
Rule 38    statement_aux_2 -> while
Rule 39    type -> INT n_record_last_type
Rule 40    type -> FLOAT n_record_last_type
Rule 41    type -> STRING n_record_last_type
Rule 42    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 43    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 44    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 45    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 46    assignment -> ID n_start_assignment array_index ASSIGN expression
Rule 47    assignment -> ID n_start_assignment array_index ASSIGN read
Rule 48    assignment -> ID n_start_assignment ASSIGN expression
Rule 49    assignment -> ID n_start_assignment ASSIGN read
Rule 50    function_call -> ID n_calling_func params_pass n_validate_function_call
Rule 51    return -> RETURN expression n_return
Rule 52    if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
Rule 53    if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
Rule 54    if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
Rule 55    if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if
Rule 56    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
Rule 57    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
Rule 58    else -> ELSE n_start_else block
Rule 59    while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
Rule 60    print -> PRINT L_PARENS print_aux R_PARENS
Rule 61    print -> PRINT L_PARENS R_PARENS
Rule 62    print_aux -> expression n_print COMMA print_aux
Rule 63    print_aux -> expression n_print
Rule 64    expression -> exp n_eval_exp AND n_add_operator expression
Rule 65    expression -> exp n_eval_exp
Rule 66    read -> READ L_PARENS ID n_register_read R_PARENS
Rule 67    params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS
Rule 68    params_pass -> L_PARENS expression n_validate_param R_PARENS
Rule 69    params_pass -> L_PARENS R_PARENS
Rule 70    params_pass_aux -> COMMA expression n_validate_param params_pass_aux
Rule 71    params_pass_aux -> COMMA expression n_validate_param
Rule 72    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 73    exp -> xp n_eval_xp OR n_add_operator exp
Rule 74    exp -> xp n_eval_xp
Rule 75    xp -> x n_eval_x NOT_EQUAL n_add_operator xp
Rule 76    xp -> x n_eval_x EQUALS n_add_operator xp
Rule 77    xp -> x n_eval_x GREATER n_add_operator xp
Rule 78    xp -> x n_eval_x GREATER_EQ n_add_operator xp
Rule 79    xp -> x n_eval_x LESS n_add_operator xp
Rule 80    xp -> x n_eval_x LESS_EQ n_add_operator xp
Rule 81    xp -> x n_eval_x
Rule 82    x -> term n_eval_term PLUS n_add_operator x
Rule 83    x -> term n_eval_term MINUS n_add_operator x
Rule 84    x -> term n_eval_term
Rule 85    term -> factor n_eval_factor TIMES n_add_operator term
Rule 86    term -> factor n_eval_factor DIVIDE n_add_operator term
Rule 87    term -> factor n_eval_factor
Rule 88    factor -> NOT factor_aux
Rule 89    factor -> factor_aux
Rule 90    factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
Rule 91    factor_aux -> PLUS const
Rule 92    factor_aux -> MINUS const
Rule 93    factor_aux -> const
Rule 94    const -> ID n_add_operand
Rule 95    const -> CONST_F n_add_operand
Rule 96    const -> CONST_I n_add_operand
Rule 97    const -> CONST_STRING n_add_operand
Rule 98    const -> function_call
Rule 99    const -> array_access
Rule 100   array_access -> ID array_index
Rule 101   n_start_main -> <empty>
Rule 102   n_add_function_name -> <empty>
Rule 103   n_add_function_type -> <empty>
Rule 104   n_end_function -> <empty>
Rule 105   n_end_main -> <empty>
Rule 106   n_add_var -> <empty>
Rule 107   n_add_var_arr -> <empty>
Rule 108   n_add_param -> <empty>
Rule 109   n_record_last_type -> <empty>
Rule 110   n_eval_exp -> <empty>
Rule 111   n_eval_xp -> <empty>
Rule 112   n_eval_x -> <empty>
Rule 113   n_eval_factor -> <empty>
Rule 114   n_eval_term -> <empty>
Rule 115   n_end_condition -> <empty>
Rule 116   n_start_else -> <empty>
Rule 117   n_end_if -> <empty>
Rule 118   n_start_while -> <empty>
Rule 119   n_end_while -> <empty>
Rule 120   n_add_operand -> <empty>
Rule 121   n_add_operator -> <empty>
Rule 122   n_pop_fake_bottom -> <empty>
Rule 123   n_start_assignment -> <empty>
Rule 124   n_print -> <empty>
Rule 125   n_increment_local_var_count -> <empty>
Rule 126   n_return -> <empty>
Rule 127   n_calling_func -> <empty>
Rule 128   n_validate_param -> <empty>
Rule 129   n_validate_function_call -> <empty>
Rule 130   n_register_read -> <empty>

Terminals, with rules where they appear

AND                  : 64
ASSIGN               : 46 47 48 49
COLON                : 7 8
COMMA                : 15 17 26 28 62 70 71
CONST_F              : 95
CONST_I              : 44 44 45 96
CONST_STRING         : 97
DIVIDE               : 86
ELIF                 : 56 57
ELSE                 : 58
EQUALS               : 76
FLOAT                : 20 40
FUNCTION             : 6 7 8
GLOBAL               : 24
GREATER              : 77
GREATER_EQ           : 78
ID                   : 7 8 15 16 17 18 26 27 28 29 46 47 48 49 50 66 94 100
IF                   : 52 53 54 55
INT                  : 19 39
LESS                 : 79
LESS_EQ              : 80
L_KEY_BRACKET        : 9 10 72
L_PARENS             : 7 8 52 53 54 55 56 57 59 60 61 66 67 68 69 90
L_SQUARE_BRACKET     : 42 42 43 44 44 45
MAIN                 : 6
MINUS                : 83 92
NOT                  : 88
NOT_EQUAL            : 75
OR                   : 73
PLUS                 : 82 91
PRINT                : 60 61
READ                 : 66
RETURN               : 51
R_KEY_BRACKET        : 9 10 72
R_PARENS             : 7 8 52 53 54 55 56 57 59 60 61 66 67 68 69 90
R_SQUARE_BRACKET     : 42 42 43 44 44 45
SEMICOLON            : 23 30
STRING               : 21 41
TIMES                : 85
VOID                 : 22
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

array_access         : 99
array_dim            : 26 27
array_index          : 15 16 46 47 100
assignment           : 32
block                : 52 53 54 55 56 57 58 59
const                : 91 92 93
elif                 : 52 53 56
else                 : 52 54
exp                  : 64 65 73
expression           : 42 42 43 46 48 51 52 53 54 55 56 57 59 62 63 64 67 68 70 71 90
factor               : 85 86 87
factor_aux           : 88 89
function             : 3 4
function_body        : 5 6
function_call        : 33 98
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 37
main                 : 1 2
n_add_function_name  : 7 8
n_add_function_type  : 19 20 21 22
n_add_operand        : 94 95 96 97
n_add_operator       : 64 73 75 76 77 78 79 80 82 83 85 86 90
n_add_param          : 15 16 17 18
n_add_var            : 28 29
n_add_var_arr        : 26 27
n_calling_func       : 50
n_end_condition      : 52 53 54 55 56 57 59
n_end_function       : 5
n_end_if             : 52 53 54 55
n_end_main           : 6
n_end_while          : 59
n_eval_exp           : 64 65
n_eval_factor        : 85 86 87
n_eval_term          : 82 83 84
n_eval_x             : 75 76 77 78 79 80 81
n_eval_xp            : 73 74
n_increment_local_var_count : 11 12
n_pop_fake_bottom    : 90
n_print              : 62 63
n_record_last_type   : 39 40 41
n_register_read      : 66
n_return             : 51
n_start_assignment   : 46 47 48 49
n_start_else         : 56 57 58
n_start_main         : 6
n_start_while        : 59
n_validate_function_call : 50
n_validate_param     : 67 68 70 71
params_pass          : 50
params_pass_aux      : 67 70
print                : 35
print_aux            : 60 62
program              : 0
program_aux          : 1 3
read                 : 36 47 49
return               : 34
statement            : 13 14
statement_aux        : 30
statement_aux_2      : 31
statements           : 9 10 13 72
term                 : 82 83 84 85 86
type                 : 15 16 17 18 24 25
type_aux             : 23
var                  : 11 12
var_aux              : 23 26 28
vars                 : 9 11
while                : 38
x                    : 75 76 77 78 79 80 81 82 83
xp                   : 73 74 75 76 77 78 79 80

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN n_start_main function_body n_end_main
    (7) function_header -> FUNCTION . ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID n_add_function_name L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body n_end_function
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . n_start_main function_body n_end_main
    (101) n_start_main -> .

    L_KEY_BRACKET   reduce using rule 101 (n_start_main -> .)

    n_start_main                   shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . n_add_function_name L_PARENS R_PARENS COLON function_type
    (102) n_add_function_name -> .

    L_PARENS        reduce using rule 102 (n_add_function_name -> .)

    n_add_function_name            shift and go to state 14

state 11

    (5) function -> function_header function_body . n_end_function
    (104) n_end_function -> .

    FUNCTION        reduce using rule 104 (n_end_function -> .)

    n_end_function                 shift and go to state 15

state 12

    (9) function_body -> L_KEY_BRACKET . vars statements R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (13) statements -> . statement statements
    (14) statements -> . statement
    (23) var -> . type_aux var_aux SEMICOLON
    (30) statement -> . statement_aux SEMICOLON
    (31) statement -> . statement_aux_2
    (24) type_aux -> . GLOBAL type
    (25) type_aux -> . type
    (32) statement_aux -> . assignment
    (33) statement_aux -> . function_call
    (34) statement_aux -> . return
    (35) statement_aux -> . print
    (36) statement_aux -> . read
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type
    (46) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (47) assignment -> . ID n_start_assignment array_index ASSIGN read
    (48) assignment -> . ID n_start_assignment ASSIGN expression
    (49) assignment -> . ID n_start_assignment ASSIGN read
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (51) return -> . RETURN expression n_return
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (59) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    GLOBAL          shift and go to state 23
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 35
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    vars                           shift and go to state 16
    statements                     shift and go to state 17
    var                            shift and go to state 18
    statement                      shift and go to state 19
    type_aux                       shift and go to state 20
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    type                           shift and go to state 24
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    read                           shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 13

    (6) main -> FUNCTION MAIN n_start_main . function_body n_end_main
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 41

state 14

    (7) function_header -> FUNCTION ID n_add_function_name . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 42


state 15

    (5) function -> function_header function_body n_end_function .

    FUNCTION        reduce using rule 5 (function -> function_header function_body n_end_function .)


state 16

    (9) function_body -> L_KEY_BRACKET vars . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (30) statement -> . statement_aux SEMICOLON
    (31) statement -> . statement_aux_2
    (32) statement_aux -> . assignment
    (33) statement_aux -> . function_call
    (34) statement_aux -> . return
    (35) statement_aux -> . print
    (36) statement_aux -> . read
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (47) assignment -> . ID n_start_assignment array_index ASSIGN read
    (48) assignment -> . ID n_start_assignment ASSIGN expression
    (49) assignment -> . ID n_start_assignment ASSIGN read
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (51) return -> . RETURN expression n_return
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (59) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 35
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statements                     shift and go to state 43
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    read                           shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 17

    (10) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 44


state 18

    (11) vars -> var . n_increment_local_var_count vars
    (12) vars -> var . n_increment_local_var_count
    (125) n_increment_local_var_count -> .

    GLOBAL          reduce using rule 125 (n_increment_local_var_count -> .)
    INT             reduce using rule 125 (n_increment_local_var_count -> .)
    FLOAT           reduce using rule 125 (n_increment_local_var_count -> .)
    STRING          reduce using rule 125 (n_increment_local_var_count -> .)
    ID              reduce using rule 125 (n_increment_local_var_count -> .)
    RETURN          reduce using rule 125 (n_increment_local_var_count -> .)
    PRINT           reduce using rule 125 (n_increment_local_var_count -> .)
    READ            reduce using rule 125 (n_increment_local_var_count -> .)
    IF              reduce using rule 125 (n_increment_local_var_count -> .)
    WHILE           reduce using rule 125 (n_increment_local_var_count -> .)

    n_increment_local_var_count    shift and go to state 45

state 19

    (13) statements -> statement . statements
    (14) statements -> statement .
    (13) statements -> . statement statements
    (14) statements -> . statement
    (30) statement -> . statement_aux SEMICOLON
    (31) statement -> . statement_aux_2
    (32) statement_aux -> . assignment
    (33) statement_aux -> . function_call
    (34) statement_aux -> . return
    (35) statement_aux -> . print
    (36) statement_aux -> . read
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (47) assignment -> . ID n_start_assignment array_index ASSIGN read
    (48) assignment -> . ID n_start_assignment ASSIGN expression
    (49) assignment -> . ID n_start_assignment ASSIGN read
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (51) return -> . RETURN expression n_return
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (59) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    R_KEY_BRACKET   reduce using rule 14 (statements -> statement .)
    ID              shift and go to state 35
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statement                      shift and go to state 19
    statements                     shift and go to state 46
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    read                           shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 20

    (23) var -> type_aux . var_aux SEMICOLON
    (26) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (27) var_aux -> . ID n_add_var_arr array_dim
    (28) var_aux -> . ID n_add_var COMMA var_aux
    (29) var_aux -> . ID n_add_var

    ID              shift and go to state 48

    var_aux                        shift and go to state 47

state 21

    (30) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 49


state 22

    (31) statement -> statement_aux_2 .

    ID              reduce using rule 31 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 31 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 31 (statement -> statement_aux_2 .)
    READ            reduce using rule 31 (statement -> statement_aux_2 .)
    IF              reduce using rule 31 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 31 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 31 (statement -> statement_aux_2 .)


state 23

    (24) type_aux -> GLOBAL . type
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 50

state 24

    (25) type_aux -> type .

    ID              reduce using rule 25 (type_aux -> type .)


state 25

    (32) statement_aux -> assignment .

    SEMICOLON       reduce using rule 32 (statement_aux -> assignment .)


state 26

    (33) statement_aux -> function_call .

    SEMICOLON       reduce using rule 33 (statement_aux -> function_call .)


state 27

    (34) statement_aux -> return .

    SEMICOLON       reduce using rule 34 (statement_aux -> return .)


state 28

    (35) statement_aux -> print .

    SEMICOLON       reduce using rule 35 (statement_aux -> print .)


state 29

    (36) statement_aux -> read .

    SEMICOLON       reduce using rule 36 (statement_aux -> read .)


state 30

    (37) statement_aux_2 -> if .

    ID              reduce using rule 37 (statement_aux_2 -> if .)
    RETURN          reduce using rule 37 (statement_aux_2 -> if .)
    PRINT           reduce using rule 37 (statement_aux_2 -> if .)
    READ            reduce using rule 37 (statement_aux_2 -> if .)
    IF              reduce using rule 37 (statement_aux_2 -> if .)
    WHILE           reduce using rule 37 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 37 (statement_aux_2 -> if .)


state 31

    (38) statement_aux_2 -> while .

    ID              reduce using rule 38 (statement_aux_2 -> while .)
    RETURN          reduce using rule 38 (statement_aux_2 -> while .)
    PRINT           reduce using rule 38 (statement_aux_2 -> while .)
    READ            reduce using rule 38 (statement_aux_2 -> while .)
    IF              reduce using rule 38 (statement_aux_2 -> while .)
    WHILE           reduce using rule 38 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 38 (statement_aux_2 -> while .)


state 32

    (39) type -> INT . n_record_last_type
    (109) n_record_last_type -> .

    ID              reduce using rule 109 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 51

state 33

    (40) type -> FLOAT . n_record_last_type
    (109) n_record_last_type -> .

    ID              reduce using rule 109 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 52

state 34

    (41) type -> STRING . n_record_last_type
    (109) n_record_last_type -> .

    ID              reduce using rule 109 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 53

state 35

    (46) assignment -> ID . n_start_assignment array_index ASSIGN expression
    (47) assignment -> ID . n_start_assignment array_index ASSIGN read
    (48) assignment -> ID . n_start_assignment ASSIGN expression
    (49) assignment -> ID . n_start_assignment ASSIGN read
    (50) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (123) n_start_assignment -> .
    (127) n_calling_func -> .

    ASSIGN          reduce using rule 123 (n_start_assignment -> .)
    L_SQUARE_BRACKET reduce using rule 123 (n_start_assignment -> .)
    L_PARENS        reduce using rule 127 (n_calling_func -> .)

    n_start_assignment             shift and go to state 54
    n_calling_func                 shift and go to state 55

state 36

    (51) return -> RETURN . expression n_return
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 56
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 37

    (60) print -> PRINT . L_PARENS print_aux R_PARENS
    (61) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 74


state 38

    (66) read -> READ . L_PARENS ID n_register_read R_PARENS

    L_PARENS        shift and go to state 75


state 39

    (52) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> IF . L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (55) if -> IF . L_PARENS expression R_PARENS n_end_condition block n_end_if

    L_PARENS        shift and go to state 76


state 40

    (59) while -> WHILE . n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (118) n_start_while -> .

    L_PARENS        reduce using rule 118 (n_start_while -> .)

    n_start_while                  shift and go to state 77

state 41

    (6) main -> FUNCTION MAIN n_start_main function_body . n_end_main
    (105) n_end_main -> .

    $end            reduce using rule 105 (n_end_main -> .)

    n_end_main                     shift and go to state 78

state 42

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type

    R_PARENS        shift and go to state 80
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    function_params                shift and go to state 79
    type                           shift and go to state 81

state 43

    (9) function_body -> L_KEY_BRACKET vars statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 82


state 44

    (10) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 45

    (11) vars -> var n_increment_local_var_count . vars
    (12) vars -> var n_increment_local_var_count .
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (23) var -> . type_aux var_aux SEMICOLON
    (24) type_aux -> . GLOBAL type
    (25) type_aux -> . type
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type

    ID              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    RETURN          reduce using rule 12 (vars -> var n_increment_local_var_count .)
    PRINT           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    READ            reduce using rule 12 (vars -> var n_increment_local_var_count .)
    IF              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    WHILE           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    GLOBAL          shift and go to state 23
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    var                            shift and go to state 18
    vars                           shift and go to state 83
    type_aux                       shift and go to state 20
    type                           shift and go to state 24

state 46

    (13) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 13 (statements -> statement statements .)


state 47

    (23) var -> type_aux var_aux . SEMICOLON

    SEMICOLON       shift and go to state 84


state 48

    (26) var_aux -> ID . n_add_var_arr array_dim COMMA var_aux
    (27) var_aux -> ID . n_add_var_arr array_dim
    (28) var_aux -> ID . n_add_var COMMA var_aux
    (29) var_aux -> ID . n_add_var
    (107) n_add_var_arr -> .
    (106) n_add_var -> .

    L_SQUARE_BRACKET reduce using rule 107 (n_add_var_arr -> .)
    COMMA           reduce using rule 106 (n_add_var -> .)
    SEMICOLON       reduce using rule 106 (n_add_var -> .)

    n_add_var_arr                  shift and go to state 85
    n_add_var                      shift and go to state 86

state 49

    (30) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    READ            reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 30 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 30 (statement -> statement_aux SEMICOLON .)


state 50

    (24) type_aux -> GLOBAL type .

    ID              reduce using rule 24 (type_aux -> GLOBAL type .)


state 51

    (39) type -> INT n_record_last_type .

    ID              reduce using rule 39 (type -> INT n_record_last_type .)


state 52

    (40) type -> FLOAT n_record_last_type .

    ID              reduce using rule 40 (type -> FLOAT n_record_last_type .)


state 53

    (41) type -> STRING n_record_last_type .

    ID              reduce using rule 41 (type -> STRING n_record_last_type .)


state 54

    (46) assignment -> ID n_start_assignment . array_index ASSIGN expression
    (47) assignment -> ID n_start_assignment . array_index ASSIGN read
    (48) assignment -> ID n_start_assignment . ASSIGN expression
    (49) assignment -> ID n_start_assignment . ASSIGN read
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    ASSIGN          shift and go to state 88
    L_SQUARE_BRACKET shift and go to state 89

    array_index                    shift and go to state 87

state 55

    (50) function_call -> ID n_calling_func . params_pass n_validate_function_call
    (67) params_pass -> . L_PARENS expression n_validate_param params_pass_aux R_PARENS
    (68) params_pass -> . L_PARENS expression n_validate_param R_PARENS
    (69) params_pass -> . L_PARENS R_PARENS

    L_PARENS        shift and go to state 91

    params_pass                    shift and go to state 90

state 56

    (51) return -> RETURN expression . n_return
    (126) n_return -> .

    SEMICOLON       reduce using rule 126 (n_return -> .)

    n_return                       shift and go to state 92

state 57

    (64) expression -> exp . n_eval_exp AND n_add_operator expression
    (65) expression -> exp . n_eval_exp
    (110) n_eval_exp -> .

    AND             reduce using rule 110 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 110 (n_eval_exp -> .)
    COMMA           reduce using rule 110 (n_eval_exp -> .)
    R_PARENS        reduce using rule 110 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 110 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 93

state 58

    (73) exp -> xp . n_eval_xp OR n_add_operator exp
    (74) exp -> xp . n_eval_xp
    (111) n_eval_xp -> .

    OR              reduce using rule 111 (n_eval_xp -> .)
    AND             reduce using rule 111 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 111 (n_eval_xp -> .)
    COMMA           reduce using rule 111 (n_eval_xp -> .)
    R_PARENS        reduce using rule 111 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 111 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 94

state 59

    (75) xp -> x . n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> x . n_eval_x EQUALS n_add_operator xp
    (77) xp -> x . n_eval_x GREATER n_add_operator xp
    (78) xp -> x . n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> x . n_eval_x LESS n_add_operator xp
    (80) xp -> x . n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> x . n_eval_x
    (112) n_eval_x -> .

    NOT_EQUAL       reduce using rule 112 (n_eval_x -> .)
    EQUALS          reduce using rule 112 (n_eval_x -> .)
    GREATER         reduce using rule 112 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 112 (n_eval_x -> .)
    LESS            reduce using rule 112 (n_eval_x -> .)
    LESS_EQ         reduce using rule 112 (n_eval_x -> .)
    OR              reduce using rule 112 (n_eval_x -> .)
    AND             reduce using rule 112 (n_eval_x -> .)
    SEMICOLON       reduce using rule 112 (n_eval_x -> .)
    COMMA           reduce using rule 112 (n_eval_x -> .)
    R_PARENS        reduce using rule 112 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 112 (n_eval_x -> .)

    n_eval_x                       shift and go to state 95

state 60

    (82) x -> term . n_eval_term PLUS n_add_operator x
    (83) x -> term . n_eval_term MINUS n_add_operator x
    (84) x -> term . n_eval_term
    (114) n_eval_term -> .

    PLUS            reduce using rule 114 (n_eval_term -> .)
    MINUS           reduce using rule 114 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 114 (n_eval_term -> .)
    EQUALS          reduce using rule 114 (n_eval_term -> .)
    GREATER         reduce using rule 114 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 114 (n_eval_term -> .)
    LESS            reduce using rule 114 (n_eval_term -> .)
    LESS_EQ         reduce using rule 114 (n_eval_term -> .)
    OR              reduce using rule 114 (n_eval_term -> .)
    AND             reduce using rule 114 (n_eval_term -> .)
    SEMICOLON       reduce using rule 114 (n_eval_term -> .)
    COMMA           reduce using rule 114 (n_eval_term -> .)
    R_PARENS        reduce using rule 114 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 114 (n_eval_term -> .)

    n_eval_term                    shift and go to state 96

state 61

    (91) factor_aux -> PLUS . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    const                          shift and go to state 97
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 62

    (92) factor_aux -> MINUS . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    const                          shift and go to state 98
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 63

    (85) term -> factor . n_eval_factor TIMES n_add_operator term
    (86) term -> factor . n_eval_factor DIVIDE n_add_operator term
    (87) term -> factor . n_eval_factor
    (113) n_eval_factor -> .

    TIMES           reduce using rule 113 (n_eval_factor -> .)
    DIVIDE          reduce using rule 113 (n_eval_factor -> .)
    PLUS            reduce using rule 113 (n_eval_factor -> .)
    MINUS           reduce using rule 113 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 113 (n_eval_factor -> .)
    EQUALS          reduce using rule 113 (n_eval_factor -> .)
    GREATER         reduce using rule 113 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 113 (n_eval_factor -> .)
    LESS            reduce using rule 113 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 113 (n_eval_factor -> .)
    OR              reduce using rule 113 (n_eval_factor -> .)
    AND             reduce using rule 113 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 113 (n_eval_factor -> .)
    COMMA           reduce using rule 113 (n_eval_factor -> .)
    R_PARENS        reduce using rule 113 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 113 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 99

state 64

    (88) factor -> NOT . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    factor_aux                     shift and go to state 100
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 65

    (89) factor -> factor_aux .

    TIMES           reduce using rule 89 (factor -> factor_aux .)
    DIVIDE          reduce using rule 89 (factor -> factor_aux .)
    PLUS            reduce using rule 89 (factor -> factor_aux .)
    MINUS           reduce using rule 89 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 89 (factor -> factor_aux .)
    EQUALS          reduce using rule 89 (factor -> factor_aux .)
    GREATER         reduce using rule 89 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 89 (factor -> factor_aux .)
    LESS            reduce using rule 89 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 89 (factor -> factor_aux .)
    OR              reduce using rule 89 (factor -> factor_aux .)
    AND             reduce using rule 89 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 89 (factor -> factor_aux .)
    COMMA           reduce using rule 89 (factor -> factor_aux .)
    R_PARENS        reduce using rule 89 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 89 (factor -> factor_aux .)


state 66

    (90) factor_aux -> L_PARENS . n_add_operator expression n_pop_fake_bottom R_PARENS
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 101

state 67

    (93) factor_aux -> const .

    TIMES           reduce using rule 93 (factor_aux -> const .)
    DIVIDE          reduce using rule 93 (factor_aux -> const .)
    PLUS            reduce using rule 93 (factor_aux -> const .)
    MINUS           reduce using rule 93 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 93 (factor_aux -> const .)
    EQUALS          reduce using rule 93 (factor_aux -> const .)
    GREATER         reduce using rule 93 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 93 (factor_aux -> const .)
    LESS            reduce using rule 93 (factor_aux -> const .)
    LESS_EQ         reduce using rule 93 (factor_aux -> const .)
    OR              reduce using rule 93 (factor_aux -> const .)
    AND             reduce using rule 93 (factor_aux -> const .)
    SEMICOLON       reduce using rule 93 (factor_aux -> const .)
    COMMA           reduce using rule 93 (factor_aux -> const .)
    R_PARENS        reduce using rule 93 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 93 (factor_aux -> const .)


state 68

    (94) const -> ID . n_add_operand
    (50) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (100) array_access -> ID . array_index
    (120) n_add_operand -> .
    (127) n_calling_func -> .
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 120 (n_add_operand -> .)
    DIVIDE          reduce using rule 120 (n_add_operand -> .)
    PLUS            reduce using rule 120 (n_add_operand -> .)
    MINUS           reduce using rule 120 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 120 (n_add_operand -> .)
    EQUALS          reduce using rule 120 (n_add_operand -> .)
    GREATER         reduce using rule 120 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 120 (n_add_operand -> .)
    LESS            reduce using rule 120 (n_add_operand -> .)
    LESS_EQ         reduce using rule 120 (n_add_operand -> .)
    OR              reduce using rule 120 (n_add_operand -> .)
    AND             reduce using rule 120 (n_add_operand -> .)
    SEMICOLON       reduce using rule 120 (n_add_operand -> .)
    COMMA           reduce using rule 120 (n_add_operand -> .)
    R_PARENS        reduce using rule 120 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 120 (n_add_operand -> .)
    L_PARENS        reduce using rule 127 (n_calling_func -> .)
    L_SQUARE_BRACKET shift and go to state 89

    n_add_operand                  shift and go to state 102
    n_calling_func                 shift and go to state 55
    array_index                    shift and go to state 103

state 69

    (95) const -> CONST_F . n_add_operand
    (120) n_add_operand -> .

    TIMES           reduce using rule 120 (n_add_operand -> .)
    DIVIDE          reduce using rule 120 (n_add_operand -> .)
    PLUS            reduce using rule 120 (n_add_operand -> .)
    MINUS           reduce using rule 120 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 120 (n_add_operand -> .)
    EQUALS          reduce using rule 120 (n_add_operand -> .)
    GREATER         reduce using rule 120 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 120 (n_add_operand -> .)
    LESS            reduce using rule 120 (n_add_operand -> .)
    LESS_EQ         reduce using rule 120 (n_add_operand -> .)
    OR              reduce using rule 120 (n_add_operand -> .)
    AND             reduce using rule 120 (n_add_operand -> .)
    SEMICOLON       reduce using rule 120 (n_add_operand -> .)
    COMMA           reduce using rule 120 (n_add_operand -> .)
    R_PARENS        reduce using rule 120 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 120 (n_add_operand -> .)

    n_add_operand                  shift and go to state 104

state 70

    (96) const -> CONST_I . n_add_operand
    (120) n_add_operand -> .

    TIMES           reduce using rule 120 (n_add_operand -> .)
    DIVIDE          reduce using rule 120 (n_add_operand -> .)
    PLUS            reduce using rule 120 (n_add_operand -> .)
    MINUS           reduce using rule 120 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 120 (n_add_operand -> .)
    EQUALS          reduce using rule 120 (n_add_operand -> .)
    GREATER         reduce using rule 120 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 120 (n_add_operand -> .)
    LESS            reduce using rule 120 (n_add_operand -> .)
    LESS_EQ         reduce using rule 120 (n_add_operand -> .)
    OR              reduce using rule 120 (n_add_operand -> .)
    AND             reduce using rule 120 (n_add_operand -> .)
    SEMICOLON       reduce using rule 120 (n_add_operand -> .)
    COMMA           reduce using rule 120 (n_add_operand -> .)
    R_PARENS        reduce using rule 120 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 120 (n_add_operand -> .)

    n_add_operand                  shift and go to state 105

state 71

    (97) const -> CONST_STRING . n_add_operand
    (120) n_add_operand -> .

    TIMES           reduce using rule 120 (n_add_operand -> .)
    DIVIDE          reduce using rule 120 (n_add_operand -> .)
    PLUS            reduce using rule 120 (n_add_operand -> .)
    MINUS           reduce using rule 120 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 120 (n_add_operand -> .)
    EQUALS          reduce using rule 120 (n_add_operand -> .)
    GREATER         reduce using rule 120 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 120 (n_add_operand -> .)
    LESS            reduce using rule 120 (n_add_operand -> .)
    LESS_EQ         reduce using rule 120 (n_add_operand -> .)
    OR              reduce using rule 120 (n_add_operand -> .)
    AND             reduce using rule 120 (n_add_operand -> .)
    SEMICOLON       reduce using rule 120 (n_add_operand -> .)
    COMMA           reduce using rule 120 (n_add_operand -> .)
    R_PARENS        reduce using rule 120 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 120 (n_add_operand -> .)

    n_add_operand                  shift and go to state 106

state 72

    (98) const -> function_call .

    TIMES           reduce using rule 98 (const -> function_call .)
    DIVIDE          reduce using rule 98 (const -> function_call .)
    PLUS            reduce using rule 98 (const -> function_call .)
    MINUS           reduce using rule 98 (const -> function_call .)
    NOT_EQUAL       reduce using rule 98 (const -> function_call .)
    EQUALS          reduce using rule 98 (const -> function_call .)
    GREATER         reduce using rule 98 (const -> function_call .)
    GREATER_EQ      reduce using rule 98 (const -> function_call .)
    LESS            reduce using rule 98 (const -> function_call .)
    LESS_EQ         reduce using rule 98 (const -> function_call .)
    OR              reduce using rule 98 (const -> function_call .)
    AND             reduce using rule 98 (const -> function_call .)
    SEMICOLON       reduce using rule 98 (const -> function_call .)
    COMMA           reduce using rule 98 (const -> function_call .)
    R_PARENS        reduce using rule 98 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 98 (const -> function_call .)


state 73

    (99) const -> array_access .

    TIMES           reduce using rule 99 (const -> array_access .)
    DIVIDE          reduce using rule 99 (const -> array_access .)
    PLUS            reduce using rule 99 (const -> array_access .)
    MINUS           reduce using rule 99 (const -> array_access .)
    NOT_EQUAL       reduce using rule 99 (const -> array_access .)
    EQUALS          reduce using rule 99 (const -> array_access .)
    GREATER         reduce using rule 99 (const -> array_access .)
    GREATER_EQ      reduce using rule 99 (const -> array_access .)
    LESS            reduce using rule 99 (const -> array_access .)
    LESS_EQ         reduce using rule 99 (const -> array_access .)
    OR              reduce using rule 99 (const -> array_access .)
    AND             reduce using rule 99 (const -> array_access .)
    SEMICOLON       reduce using rule 99 (const -> array_access .)
    COMMA           reduce using rule 99 (const -> array_access .)
    R_PARENS        reduce using rule 99 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 99 (const -> array_access .)


state 74

    (60) print -> PRINT L_PARENS . print_aux R_PARENS
    (61) print -> PRINT L_PARENS . R_PARENS
    (62) print_aux -> . expression n_print COMMA print_aux
    (63) print_aux -> . expression n_print
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    R_PARENS        shift and go to state 108
    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    print_aux                      shift and go to state 107
    expression                     shift and go to state 109
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 75

    (66) read -> READ L_PARENS . ID n_register_read R_PARENS

    ID              shift and go to state 110


state 76

    (52) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> IF L_PARENS . expression R_PARENS n_end_condition block else n_end_if
    (55) if -> IF L_PARENS . expression R_PARENS n_end_condition block n_end_if
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 111
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 77

    (59) while -> WHILE n_start_while . L_PARENS expression R_PARENS n_end_condition block n_end_while

    L_PARENS        shift and go to state 112


state 78

    (6) main -> FUNCTION MAIN n_start_main function_body n_end_main .

    $end            reduce using rule 6 (main -> FUNCTION MAIN n_start_main function_body n_end_main .)


state 79

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 113


state 80

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 114


state 81

    (15) function_params -> type . ID n_add_param array_index COMMA function_params
    (16) function_params -> type . ID n_add_param array_index
    (17) function_params -> type . ID n_add_param COMMA function_params
    (18) function_params -> type . ID n_add_param

    ID              shift and go to state 115


state 82

    (9) function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)


state 83

    (11) vars -> var n_increment_local_var_count vars .

    ID              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    RETURN          reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    PRINT           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    READ            reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    IF              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    WHILE           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)


state 84

    (23) var -> type_aux var_aux SEMICOLON .

    GLOBAL          reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    INT             reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    READ            reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type_aux var_aux SEMICOLON .)


state 85

    (26) var_aux -> ID n_add_var_arr . array_dim COMMA var_aux
    (27) var_aux -> ID n_add_var_arr . array_dim
    (44) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET

    L_SQUARE_BRACKET shift and go to state 117

    array_dim                      shift and go to state 116

state 86

    (28) var_aux -> ID n_add_var . COMMA var_aux
    (29) var_aux -> ID n_add_var .

    COMMA           shift and go to state 118
    SEMICOLON       reduce using rule 29 (var_aux -> ID n_add_var .)


state 87

    (46) assignment -> ID n_start_assignment array_index . ASSIGN expression
    (47) assignment -> ID n_start_assignment array_index . ASSIGN read

    ASSIGN          shift and go to state 119


state 88

    (48) assignment -> ID n_start_assignment ASSIGN . expression
    (49) assignment -> ID n_start_assignment ASSIGN . read
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    READ            shift and go to state 38
    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 120
    read                           shift and go to state 121
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 89

    (42) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 122
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 90

    (50) function_call -> ID n_calling_func params_pass . n_validate_function_call
    (129) n_validate_function_call -> .

    SEMICOLON       reduce using rule 129 (n_validate_function_call -> .)
    TIMES           reduce using rule 129 (n_validate_function_call -> .)
    DIVIDE          reduce using rule 129 (n_validate_function_call -> .)
    PLUS            reduce using rule 129 (n_validate_function_call -> .)
    MINUS           reduce using rule 129 (n_validate_function_call -> .)
    NOT_EQUAL       reduce using rule 129 (n_validate_function_call -> .)
    EQUALS          reduce using rule 129 (n_validate_function_call -> .)
    GREATER         reduce using rule 129 (n_validate_function_call -> .)
    GREATER_EQ      reduce using rule 129 (n_validate_function_call -> .)
    LESS            reduce using rule 129 (n_validate_function_call -> .)
    LESS_EQ         reduce using rule 129 (n_validate_function_call -> .)
    OR              reduce using rule 129 (n_validate_function_call -> .)
    AND             reduce using rule 129 (n_validate_function_call -> .)
    COMMA           reduce using rule 129 (n_validate_function_call -> .)
    R_PARENS        reduce using rule 129 (n_validate_function_call -> .)
    R_SQUARE_BRACKET reduce using rule 129 (n_validate_function_call -> .)

    n_validate_function_call       shift and go to state 123

state 91

    (67) params_pass -> L_PARENS . expression n_validate_param params_pass_aux R_PARENS
    (68) params_pass -> L_PARENS . expression n_validate_param R_PARENS
    (69) params_pass -> L_PARENS . R_PARENS
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    R_PARENS        shift and go to state 125
    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 124
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 92

    (51) return -> RETURN expression n_return .

    SEMICOLON       reduce using rule 51 (return -> RETURN expression n_return .)


state 93

    (64) expression -> exp n_eval_exp . AND n_add_operator expression
    (65) expression -> exp n_eval_exp .

    AND             shift and go to state 126
    SEMICOLON       reduce using rule 65 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 65 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 65 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 65 (expression -> exp n_eval_exp .)


state 94

    (73) exp -> xp n_eval_xp . OR n_add_operator exp
    (74) exp -> xp n_eval_xp .

    OR              shift and go to state 127
    AND             reduce using rule 74 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 74 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 74 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 74 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 74 (exp -> xp n_eval_xp .)


state 95

    (75) xp -> x n_eval_x . NOT_EQUAL n_add_operator xp
    (76) xp -> x n_eval_x . EQUALS n_add_operator xp
    (77) xp -> x n_eval_x . GREATER n_add_operator xp
    (78) xp -> x n_eval_x . GREATER_EQ n_add_operator xp
    (79) xp -> x n_eval_x . LESS n_add_operator xp
    (80) xp -> x n_eval_x . LESS_EQ n_add_operator xp
    (81) xp -> x n_eval_x .

    NOT_EQUAL       shift and go to state 128
    EQUALS          shift and go to state 129
    GREATER         shift and go to state 130
    GREATER_EQ      shift and go to state 131
    LESS            shift and go to state 132
    LESS_EQ         shift and go to state 133
    OR              reduce using rule 81 (xp -> x n_eval_x .)
    AND             reduce using rule 81 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 81 (xp -> x n_eval_x .)
    COMMA           reduce using rule 81 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 81 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 81 (xp -> x n_eval_x .)


state 96

    (82) x -> term n_eval_term . PLUS n_add_operator x
    (83) x -> term n_eval_term . MINUS n_add_operator x
    (84) x -> term n_eval_term .

    PLUS            shift and go to state 134
    MINUS           shift and go to state 135
    NOT_EQUAL       reduce using rule 84 (x -> term n_eval_term .)
    EQUALS          reduce using rule 84 (x -> term n_eval_term .)
    GREATER         reduce using rule 84 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 84 (x -> term n_eval_term .)
    LESS            reduce using rule 84 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 84 (x -> term n_eval_term .)
    OR              reduce using rule 84 (x -> term n_eval_term .)
    AND             reduce using rule 84 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 84 (x -> term n_eval_term .)
    COMMA           reduce using rule 84 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 84 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 84 (x -> term n_eval_term .)


state 97

    (91) factor_aux -> PLUS const .

    TIMES           reduce using rule 91 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 91 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 91 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 91 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 91 (factor_aux -> PLUS const .)
    EQUALS          reduce using rule 91 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 91 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 91 (factor_aux -> PLUS const .)
    LESS            reduce using rule 91 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 91 (factor_aux -> PLUS const .)
    OR              reduce using rule 91 (factor_aux -> PLUS const .)
    AND             reduce using rule 91 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 91 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 91 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 91 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 91 (factor_aux -> PLUS const .)


state 98

    (92) factor_aux -> MINUS const .

    TIMES           reduce using rule 92 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 92 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 92 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 92 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 92 (factor_aux -> MINUS const .)
    EQUALS          reduce using rule 92 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 92 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 92 (factor_aux -> MINUS const .)
    LESS            reduce using rule 92 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 92 (factor_aux -> MINUS const .)
    OR              reduce using rule 92 (factor_aux -> MINUS const .)
    AND             reduce using rule 92 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 92 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 92 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 92 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 92 (factor_aux -> MINUS const .)


state 99

    (85) term -> factor n_eval_factor . TIMES n_add_operator term
    (86) term -> factor n_eval_factor . DIVIDE n_add_operator term
    (87) term -> factor n_eval_factor .

    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137
    PLUS            reduce using rule 87 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 87 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 87 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 87 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 87 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 87 (term -> factor n_eval_factor .)
    LESS            reduce using rule 87 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 87 (term -> factor n_eval_factor .)
    OR              reduce using rule 87 (term -> factor n_eval_factor .)
    AND             reduce using rule 87 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 87 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 87 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 87 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 87 (term -> factor n_eval_factor .)


state 100

    (88) factor -> NOT factor_aux .

    TIMES           reduce using rule 88 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 88 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 88 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 88 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 88 (factor -> NOT factor_aux .)
    EQUALS          reduce using rule 88 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 88 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 88 (factor -> NOT factor_aux .)
    LESS            reduce using rule 88 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 88 (factor -> NOT factor_aux .)
    OR              reduce using rule 88 (factor -> NOT factor_aux .)
    AND             reduce using rule 88 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 88 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 88 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 88 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 88 (factor -> NOT factor_aux .)


state 101

    (90) factor_aux -> L_PARENS n_add_operator . expression n_pop_fake_bottom R_PARENS
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 138
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 102

    (94) const -> ID n_add_operand .

    TIMES           reduce using rule 94 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 94 (const -> ID n_add_operand .)
    PLUS            reduce using rule 94 (const -> ID n_add_operand .)
    MINUS           reduce using rule 94 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 94 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 94 (const -> ID n_add_operand .)
    GREATER         reduce using rule 94 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 94 (const -> ID n_add_operand .)
    LESS            reduce using rule 94 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 94 (const -> ID n_add_operand .)
    OR              reduce using rule 94 (const -> ID n_add_operand .)
    AND             reduce using rule 94 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 94 (const -> ID n_add_operand .)
    COMMA           reduce using rule 94 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 94 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 94 (const -> ID n_add_operand .)


state 103

    (100) array_access -> ID array_index .

    TIMES           reduce using rule 100 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 100 (array_access -> ID array_index .)
    PLUS            reduce using rule 100 (array_access -> ID array_index .)
    MINUS           reduce using rule 100 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 100 (array_access -> ID array_index .)
    EQUALS          reduce using rule 100 (array_access -> ID array_index .)
    GREATER         reduce using rule 100 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 100 (array_access -> ID array_index .)
    LESS            reduce using rule 100 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 100 (array_access -> ID array_index .)
    OR              reduce using rule 100 (array_access -> ID array_index .)
    AND             reduce using rule 100 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 100 (array_access -> ID array_index .)
    COMMA           reduce using rule 100 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 100 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 100 (array_access -> ID array_index .)


state 104

    (95) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 95 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 95 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 95 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 95 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 95 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 95 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 95 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 95 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 95 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 95 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 95 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 95 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 95 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 95 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 95 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 95 (const -> CONST_F n_add_operand .)


state 105

    (96) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 96 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 96 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 96 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 96 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 96 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 96 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 96 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 96 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 96 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 96 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 96 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 96 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 96 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 96 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 96 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 96 (const -> CONST_I n_add_operand .)


state 106

    (97) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 97 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 97 (const -> CONST_STRING n_add_operand .)


state 107

    (60) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 139


state 108

    (61) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 61 (print -> PRINT L_PARENS R_PARENS .)


state 109

    (62) print_aux -> expression . n_print COMMA print_aux
    (63) print_aux -> expression . n_print
    (124) n_print -> .

    COMMA           reduce using rule 124 (n_print -> .)
    R_PARENS        reduce using rule 124 (n_print -> .)

    n_print                        shift and go to state 140

state 110

    (66) read -> READ L_PARENS ID . n_register_read R_PARENS
    (130) n_register_read -> .

    R_PARENS        reduce using rule 130 (n_register_read -> .)

    n_register_read                shift and go to state 141

state 111

    (52) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif else n_end_if
    (53) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif n_end_if
    (54) if -> IF L_PARENS expression . R_PARENS n_end_condition block else n_end_if
    (55) if -> IF L_PARENS expression . R_PARENS n_end_condition block n_end_if

    R_PARENS        shift and go to state 142


state 112

    (59) while -> WHILE n_start_while L_PARENS . expression R_PARENS n_end_condition block n_end_while
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 143
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 113

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 144


state 114

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 146
    FLOAT           shift and go to state 147
    STRING          shift and go to state 148
    VOID            shift and go to state 149

    function_type                  shift and go to state 145

state 115

    (15) function_params -> type ID . n_add_param array_index COMMA function_params
    (16) function_params -> type ID . n_add_param array_index
    (17) function_params -> type ID . n_add_param COMMA function_params
    (18) function_params -> type ID . n_add_param
    (108) n_add_param -> .

    COMMA           reduce using rule 108 (n_add_param -> .)
    L_SQUARE_BRACKET reduce using rule 108 (n_add_param -> .)
    R_PARENS        reduce using rule 108 (n_add_param -> .)

    n_add_param                    shift and go to state 150

state 116

    (26) var_aux -> ID n_add_var_arr array_dim . COMMA var_aux
    (27) var_aux -> ID n_add_var_arr array_dim .

    COMMA           shift and go to state 151
    SEMICOLON       reduce using rule 27 (var_aux -> ID n_add_var_arr array_dim .)


state 117

    (44) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 152


state 118

    (28) var_aux -> ID n_add_var COMMA . var_aux
    (26) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (27) var_aux -> . ID n_add_var_arr array_dim
    (28) var_aux -> . ID n_add_var COMMA var_aux
    (29) var_aux -> . ID n_add_var

    ID              shift and go to state 48

    var_aux                        shift and go to state 153

state 119

    (46) assignment -> ID n_start_assignment array_index ASSIGN . expression
    (47) assignment -> ID n_start_assignment array_index ASSIGN . read
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    READ            shift and go to state 38
    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 154
    read                           shift and go to state 155
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 120

    (48) assignment -> ID n_start_assignment ASSIGN expression .

    SEMICOLON       reduce using rule 48 (assignment -> ID n_start_assignment ASSIGN expression .)


state 121

    (49) assignment -> ID n_start_assignment ASSIGN read .

    SEMICOLON       reduce using rule 49 (assignment -> ID n_start_assignment ASSIGN read .)


state 122

    (42) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 156


state 123

    (50) function_call -> ID n_calling_func params_pass n_validate_function_call .

    SEMICOLON       reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    TIMES           reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    DIVIDE          reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    PLUS            reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    MINUS           reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    NOT_EQUAL       reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    EQUALS          reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER         reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER_EQ      reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS            reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS_EQ         reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    OR              reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    AND             reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    COMMA           reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_PARENS        reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_SQUARE_BRACKET reduce using rule 50 (function_call -> ID n_calling_func params_pass n_validate_function_call .)


state 124

    (67) params_pass -> L_PARENS expression . n_validate_param params_pass_aux R_PARENS
    (68) params_pass -> L_PARENS expression . n_validate_param R_PARENS
    (128) n_validate_param -> .

    R_PARENS        reduce using rule 128 (n_validate_param -> .)
    COMMA           reduce using rule 128 (n_validate_param -> .)

    n_validate_param               shift and go to state 157

state 125

    (69) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)


state 126

    (64) expression -> exp n_eval_exp AND . n_add_operator expression
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 158

state 127

    (73) exp -> xp n_eval_xp OR . n_add_operator exp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 159

state 128

    (75) xp -> x n_eval_x NOT_EQUAL . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 160

state 129

    (76) xp -> x n_eval_x EQUALS . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 161

state 130

    (77) xp -> x n_eval_x GREATER . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 162

state 131

    (78) xp -> x n_eval_x GREATER_EQ . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 163

state 132

    (79) xp -> x n_eval_x LESS . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 164

state 133

    (80) xp -> x n_eval_x LESS_EQ . n_add_operator xp
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 165

state 134

    (82) x -> term n_eval_term PLUS . n_add_operator x
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 166

state 135

    (83) x -> term n_eval_term MINUS . n_add_operator x
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 167

state 136

    (85) term -> factor n_eval_factor TIMES . n_add_operator term
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 168

state 137

    (86) term -> factor n_eval_factor DIVIDE . n_add_operator term
    (121) n_add_operator -> .

    NOT             reduce using rule 121 (n_add_operator -> .)
    L_PARENS        reduce using rule 121 (n_add_operator -> .)
    PLUS            reduce using rule 121 (n_add_operator -> .)
    MINUS           reduce using rule 121 (n_add_operator -> .)
    ID              reduce using rule 121 (n_add_operator -> .)
    CONST_F         reduce using rule 121 (n_add_operator -> .)
    CONST_I         reduce using rule 121 (n_add_operator -> .)
    CONST_STRING    reduce using rule 121 (n_add_operator -> .)

    n_add_operator                 shift and go to state 169

state 138

    (90) factor_aux -> L_PARENS n_add_operator expression . n_pop_fake_bottom R_PARENS
    (122) n_pop_fake_bottom -> .

    R_PARENS        reduce using rule 122 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 170

state 139

    (60) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 60 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 140

    (62) print_aux -> expression n_print . COMMA print_aux
    (63) print_aux -> expression n_print .

    COMMA           shift and go to state 171
    R_PARENS        reduce using rule 63 (print_aux -> expression n_print .)


state 141

    (66) read -> READ L_PARENS ID n_register_read . R_PARENS

    R_PARENS        shift and go to state 172


state 142

    (52) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif else n_end_if
    (53) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif n_end_if
    (54) if -> IF L_PARENS expression R_PARENS . n_end_condition block else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS . n_end_condition block n_end_if
    (115) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 115 (n_end_condition -> .)

    n_end_condition                shift and go to state 173

state 143

    (59) while -> WHILE n_start_while L_PARENS expression . R_PARENS n_end_condition block n_end_while

    R_PARENS        shift and go to state 174


state 144

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 146
    FLOAT           shift and go to state 147
    STRING          shift and go to state 148
    VOID            shift and go to state 149

    function_type                  shift and go to state 175

state 145

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .)


state 146

    (19) function_type -> INT . n_add_function_type
    (103) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 103 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 176

state 147

    (20) function_type -> FLOAT . n_add_function_type
    (103) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 103 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 177

state 148

    (21) function_type -> STRING . n_add_function_type
    (103) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 103 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 178

state 149

    (22) function_type -> VOID . n_add_function_type
    (103) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 103 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 179

state 150

    (15) function_params -> type ID n_add_param . array_index COMMA function_params
    (16) function_params -> type ID n_add_param . array_index
    (17) function_params -> type ID n_add_param . COMMA function_params
    (18) function_params -> type ID n_add_param .
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 181
    R_PARENS        reduce using rule 18 (function_params -> type ID n_add_param .)
    L_SQUARE_BRACKET shift and go to state 89

    array_index                    shift and go to state 180

state 151

    (26) var_aux -> ID n_add_var_arr array_dim COMMA . var_aux
    (26) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (27) var_aux -> . ID n_add_var_arr array_dim
    (28) var_aux -> . ID n_add_var COMMA var_aux
    (29) var_aux -> . ID n_add_var

    ID              shift and go to state 48

    var_aux                        shift and go to state 182

state 152

    (44) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 183


state 153

    (28) var_aux -> ID n_add_var COMMA var_aux .

    SEMICOLON       reduce using rule 28 (var_aux -> ID n_add_var COMMA var_aux .)


state 154

    (46) assignment -> ID n_start_assignment array_index ASSIGN expression .

    SEMICOLON       reduce using rule 46 (assignment -> ID n_start_assignment array_index ASSIGN expression .)


state 155

    (47) assignment -> ID n_start_assignment array_index ASSIGN read .

    SEMICOLON       reduce using rule 47 (assignment -> ID n_start_assignment array_index ASSIGN read .)


state 156

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 184
    ASSIGN          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 157

    (67) params_pass -> L_PARENS expression n_validate_param . params_pass_aux R_PARENS
    (68) params_pass -> L_PARENS expression n_validate_param . R_PARENS
    (70) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (71) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        shift and go to state 186
    COMMA           shift and go to state 187

    params_pass_aux                shift and go to state 185

state 158

    (64) expression -> exp n_eval_exp AND n_add_operator . expression
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    exp                            shift and go to state 57
    expression                     shift and go to state 188
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 159

    (73) exp -> xp n_eval_xp OR n_add_operator . exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    xp                             shift and go to state 58
    exp                            shift and go to state 189
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 160

    (75) xp -> x n_eval_x NOT_EQUAL n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 190
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 161

    (76) xp -> x n_eval_x EQUALS n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 191
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 162

    (77) xp -> x n_eval_x GREATER n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 192
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 163

    (78) xp -> x n_eval_x GREATER_EQ n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 193
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 164

    (79) xp -> x n_eval_x LESS n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 194
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 165

    (80) xp -> x n_eval_x LESS_EQ n_add_operator . xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    x                              shift and go to state 59
    xp                             shift and go to state 195
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 166

    (82) x -> term n_eval_term PLUS n_add_operator . x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    term                           shift and go to state 60
    x                              shift and go to state 196
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 167

    (83) x -> term n_eval_term MINUS n_add_operator . x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    term                           shift and go to state 60
    x                              shift and go to state 197
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 168

    (85) term -> factor n_eval_factor TIMES n_add_operator . term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    factor                         shift and go to state 63
    term                           shift and go to state 198
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 169

    (86) term -> factor n_eval_factor DIVIDE n_add_operator . term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    factor                         shift and go to state 63
    term                           shift and go to state 199
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 170

    (90) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom . R_PARENS

    R_PARENS        shift and go to state 200


state 171

    (62) print_aux -> expression n_print COMMA . print_aux
    (62) print_aux -> . expression n_print COMMA print_aux
    (63) print_aux -> . expression n_print
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 109
    print_aux                      shift and go to state 201
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 172

    (66) read -> READ L_PARENS ID n_register_read R_PARENS .

    SEMICOLON       reduce using rule 66 (read -> READ L_PARENS ID n_register_read R_PARENS .)


state 173

    (52) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif else n_end_if
    (53) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif n_end_if
    (54) if -> IF L_PARENS expression R_PARENS n_end_condition . block else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS n_end_condition . block n_end_if
    (72) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 203

    block                          shift and go to state 202

state 174

    (59) while -> WHILE n_start_while L_PARENS expression R_PARENS . n_end_condition block n_end_while
    (115) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 115 (n_end_condition -> .)

    n_end_condition                shift and go to state 204

state 175

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .)


state 176

    (19) function_type -> INT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> INT n_add_function_type .)


state 177

    (20) function_type -> FLOAT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> FLOAT n_add_function_type .)


state 178

    (21) function_type -> STRING n_add_function_type .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> STRING n_add_function_type .)


state 179

    (22) function_type -> VOID n_add_function_type .

    L_KEY_BRACKET   reduce using rule 22 (function_type -> VOID n_add_function_type .)


state 180

    (15) function_params -> type ID n_add_param array_index . COMMA function_params
    (16) function_params -> type ID n_add_param array_index .

    COMMA           shift and go to state 205
    R_PARENS        reduce using rule 16 (function_params -> type ID n_add_param array_index .)


state 181

    (17) function_params -> type ID n_add_param COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 81
    function_params                shift and go to state 206

state 182

    (26) var_aux -> ID n_add_var_arr array_dim COMMA var_aux .

    SEMICOLON       reduce using rule 26 (var_aux -> ID n_add_var_arr array_dim COMMA var_aux .)


state 183

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 207
    COMMA           reduce using rule 45 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 45 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 184

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 208
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 185

    (67) params_pass -> L_PARENS expression n_validate_param params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 209


state 186

    (68) params_pass -> L_PARENS expression n_validate_param R_PARENS .

    SEMICOLON       reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    TIMES           reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    DIVIDE          reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    PLUS            reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    MINUS           reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    NOT_EQUAL       reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    EQUALS          reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER         reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER_EQ      reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS            reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS_EQ         reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    OR              reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    AND             reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    COMMA           reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_PARENS        reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 68 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)


state 187

    (70) params_pass_aux -> COMMA . expression n_validate_param params_pass_aux
    (71) params_pass_aux -> COMMA . expression n_validate_param
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 210
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 188

    (64) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 64 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 64 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 64 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 64 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 189

    (73) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 73 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 73 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 73 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 73 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 73 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 190

    (75) xp -> x n_eval_x NOT_EQUAL n_add_operator xp .

    OR              reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    AND             reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    SEMICOLON       reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    COMMA           reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_PARENS        reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 75 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)


state 191

    (76) xp -> x n_eval_x EQUALS n_add_operator xp .

    OR              reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    AND             reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    SEMICOLON       reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    COMMA           reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_PARENS        reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 76 (xp -> x n_eval_x EQUALS n_add_operator xp .)


state 192

    (77) xp -> x n_eval_x GREATER n_add_operator xp .

    OR              reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)
    AND             reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)
    SEMICOLON       reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)
    COMMA           reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_PARENS        reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 77 (xp -> x n_eval_x GREATER n_add_operator xp .)


state 193

    (78) xp -> x n_eval_x GREATER_EQ n_add_operator xp .

    OR              reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    AND             reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    COMMA           reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 78 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)


state 194

    (79) xp -> x n_eval_x LESS n_add_operator xp .

    OR              reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)
    AND             reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)
    SEMICOLON       reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)
    COMMA           reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_PARENS        reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 79 (xp -> x n_eval_x LESS n_add_operator xp .)


state 195

    (80) xp -> x n_eval_x LESS_EQ n_add_operator xp .

    OR              reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    AND             reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    COMMA           reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 80 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)


state 196

    (82) x -> term n_eval_term PLUS n_add_operator x .

    NOT_EQUAL       reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    EQUALS          reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER         reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER_EQ      reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS            reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS_EQ         reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    OR              reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    AND             reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    SEMICOLON       reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    COMMA           reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    R_PARENS        reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 82 (x -> term n_eval_term PLUS n_add_operator x .)


state 197

    (83) x -> term n_eval_term MINUS n_add_operator x .

    NOT_EQUAL       reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    EQUALS          reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER         reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER_EQ      reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS            reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS_EQ         reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    OR              reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    AND             reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    SEMICOLON       reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    COMMA           reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    R_PARENS        reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 83 (x -> term n_eval_term MINUS n_add_operator x .)


state 198

    (85) term -> factor n_eval_factor TIMES n_add_operator term .

    PLUS            reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    MINUS           reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    NOT_EQUAL       reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    EQUALS          reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER         reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER_EQ      reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS            reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS_EQ         reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    OR              reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    AND             reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    SEMICOLON       reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    COMMA           reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_PARENS        reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 85 (term -> factor n_eval_factor TIMES n_add_operator term .)


state 199

    (86) term -> factor n_eval_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    NOT_EQUAL       reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    EQUALS          reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER         reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER_EQ      reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS            reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS_EQ         reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    COMMA           reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_PARENS        reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 86 (term -> factor n_eval_factor DIVIDE n_add_operator term .)


state 200

    (90) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .

    TIMES           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    DIVIDE          reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    PLUS            reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    MINUS           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    NOT_EQUAL       reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    EQUALS          reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER         reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER_EQ      reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS            reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS_EQ         reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    OR              reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    AND             reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    SEMICOLON       reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    COMMA           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_PARENS        reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)


state 201

    (62) print_aux -> expression n_print COMMA print_aux .

    R_PARENS        reduce using rule 62 (print_aux -> expression n_print COMMA print_aux .)


state 202

    (52) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif else n_end_if
    (53) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif n_end_if
    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block . else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block . n_end_if
    (56) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (57) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
    (58) else -> . ELSE n_start_else block
    (117) n_end_if -> .

    ELIF            shift and go to state 214
    ELSE            shift and go to state 215
    ID              reduce using rule 117 (n_end_if -> .)
    RETURN          reduce using rule 117 (n_end_if -> .)
    PRINT           reduce using rule 117 (n_end_if -> .)
    READ            reduce using rule 117 (n_end_if -> .)
    IF              reduce using rule 117 (n_end_if -> .)
    WHILE           reduce using rule 117 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 117 (n_end_if -> .)

    elif                           shift and go to state 211
    else                           shift and go to state 212
    n_end_if                       shift and go to state 213

state 203

    (72) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (30) statement -> . statement_aux SEMICOLON
    (31) statement -> . statement_aux_2
    (32) statement_aux -> . assignment
    (33) statement_aux -> . function_call
    (34) statement_aux -> . return
    (35) statement_aux -> . print
    (36) statement_aux -> . read
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (47) assignment -> . ID n_start_assignment array_index ASSIGN read
    (48) assignment -> . ID n_start_assignment ASSIGN expression
    (49) assignment -> . ID n_start_assignment ASSIGN read
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (51) return -> . RETURN expression n_return
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (66) read -> . READ L_PARENS ID n_register_read R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (53) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (59) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 35
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statements                     shift and go to state 216
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    read                           shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 204

    (59) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition . block n_end_while
    (72) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 203

    block                          shift and go to state 217

state 205

    (15) function_params -> type ID n_add_param array_index COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (39) type -> . INT n_record_last_type
    (40) type -> . FLOAT n_record_last_type
    (41) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 81
    function_params                shift and go to state 218

state 206

    (17) function_params -> type ID n_add_param COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID n_add_param COMMA function_params .)


state 207

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 219


state 208

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 220


state 209

    (67) params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    TIMES           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    PLUS            reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    MINUS           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER         reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS            reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    OR              reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    AND             reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    COMMA           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)


state 210

    (70) params_pass_aux -> COMMA expression . n_validate_param params_pass_aux
    (71) params_pass_aux -> COMMA expression . n_validate_param
    (128) n_validate_param -> .

    COMMA           reduce using rule 128 (n_validate_param -> .)
    R_PARENS        reduce using rule 128 (n_validate_param -> .)

    n_validate_param               shift and go to state 221

state 211

    (52) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . else n_end_if
    (53) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . n_end_if
    (58) else -> . ELSE n_start_else block
    (117) n_end_if -> .

    ELSE            shift and go to state 215
    ID              reduce using rule 117 (n_end_if -> .)
    RETURN          reduce using rule 117 (n_end_if -> .)
    PRINT           reduce using rule 117 (n_end_if -> .)
    READ            reduce using rule 117 (n_end_if -> .)
    IF              reduce using rule 117 (n_end_if -> .)
    WHILE           reduce using rule 117 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 117 (n_end_if -> .)

    else                           shift and go to state 222
    n_end_if                       shift and go to state 223

state 212

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block else . n_end_if
    (117) n_end_if -> .

    ID              reduce using rule 117 (n_end_if -> .)
    RETURN          reduce using rule 117 (n_end_if -> .)
    PRINT           reduce using rule 117 (n_end_if -> .)
    READ            reduce using rule 117 (n_end_if -> .)
    IF              reduce using rule 117 (n_end_if -> .)
    WHILE           reduce using rule 117 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 117 (n_end_if -> .)

    n_end_if                       shift and go to state 224

state 213

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .

    ID              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    RETURN          reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    PRINT           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    READ            reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    IF              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    WHILE           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    R_KEY_BRACKET   reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)


state 214

    (56) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (57) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block
    (116) n_start_else -> .

    L_PARENS        reduce using rule 116 (n_start_else -> .)

    n_start_else                   shift and go to state 225

state 215

    (58) else -> ELSE . n_start_else block
    (116) n_start_else -> .

    L_KEY_BRACKET   reduce using rule 116 (n_start_else -> .)

    n_start_else                   shift and go to state 226

state 216

    (72) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 227


state 217

    (59) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block . n_end_while
    (119) n_end_while -> .

    ID              reduce using rule 119 (n_end_while -> .)
    RETURN          reduce using rule 119 (n_end_while -> .)
    PRINT           reduce using rule 119 (n_end_while -> .)
    READ            reduce using rule 119 (n_end_while -> .)
    IF              reduce using rule 119 (n_end_while -> .)
    WHILE           reduce using rule 119 (n_end_while -> .)
    R_KEY_BRACKET   reduce using rule 119 (n_end_while -> .)

    n_end_while                    shift and go to state 228

state 218

    (15) function_params -> type ID n_add_param array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID n_add_param array_index COMMA function_params .)


state 219

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 229


state 220

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    ASSIGN          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 221

    (70) params_pass_aux -> COMMA expression n_validate_param . params_pass_aux
    (71) params_pass_aux -> COMMA expression n_validate_param .
    (70) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (71) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        reduce using rule 71 (params_pass_aux -> COMMA expression n_validate_param .)
    COMMA           shift and go to state 187

    params_pass_aux                shift and go to state 230

state 222

    (52) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else . n_end_if
    (117) n_end_if -> .

    ID              reduce using rule 117 (n_end_if -> .)
    RETURN          reduce using rule 117 (n_end_if -> .)
    PRINT           reduce using rule 117 (n_end_if -> .)
    READ            reduce using rule 117 (n_end_if -> .)
    IF              reduce using rule 117 (n_end_if -> .)
    WHILE           reduce using rule 117 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 117 (n_end_if -> .)

    n_end_if                       shift and go to state 231

state 223

    (53) if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .

    ID              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    RETURN          reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    PRINT           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    READ            reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    IF              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    WHILE           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    R_KEY_BRACKET   reduce using rule 53 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)


state 224

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .

    ID              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    RETURN          reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    PRINT           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    READ            reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    IF              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    WHILE           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    R_KEY_BRACKET   reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)


state 225

    (56) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block elif
    (57) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block

    L_PARENS        shift and go to state 232


state 226

    (58) else -> ELSE n_start_else . block
    (72) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 203

    block                          shift and go to state 233

state 227

    (72) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    READ            reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 72 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 228

    (59) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .

    ID              reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    RETURN          reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    PRINT           reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    READ            reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    IF              reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    WHILE           reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    R_KEY_BRACKET   reduce using rule 59 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)


state 229

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    COMMA           reduce using rule 44 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 44 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 230

    (70) params_pass_aux -> COMMA expression n_validate_param params_pass_aux .

    R_PARENS        reduce using rule 70 (params_pass_aux -> COMMA expression n_validate_param params_pass_aux .)


state 231

    (52) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .

    ID              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    RETURN          reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    PRINT           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    READ            reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    IF              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    WHILE           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    R_KEY_BRACKET   reduce using rule 52 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)


state 232

    (56) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block elif
    (57) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block
    (64) expression -> . exp n_eval_exp AND n_add_operator expression
    (65) expression -> . exp n_eval_exp
    (73) exp -> . xp n_eval_xp OR n_add_operator exp
    (74) exp -> . xp n_eval_xp
    (75) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (76) xp -> . x n_eval_x EQUALS n_add_operator xp
    (77) xp -> . x n_eval_x GREATER n_add_operator xp
    (78) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (79) xp -> . x n_eval_x LESS n_add_operator xp
    (80) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (81) xp -> . x n_eval_x
    (82) x -> . term n_eval_term PLUS n_add_operator x
    (83) x -> . term n_eval_term MINUS n_add_operator x
    (84) x -> . term n_eval_term
    (85) term -> . factor n_eval_factor TIMES n_add_operator term
    (86) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (87) term -> . factor n_eval_factor
    (88) factor -> . NOT factor_aux
    (89) factor -> . factor_aux
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . PLUS const
    (92) factor_aux -> . MINUS const
    (93) factor_aux -> . const
    (94) const -> . ID n_add_operand
    (95) const -> . CONST_F n_add_operand
    (96) const -> . CONST_I n_add_operand
    (97) const -> . CONST_STRING n_add_operand
    (98) const -> . function_call
    (99) const -> . array_access
    (50) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (100) array_access -> . ID array_index

    NOT             shift and go to state 64
    L_PARENS        shift and go to state 66
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    ID              shift and go to state 68
    CONST_F         shift and go to state 69
    CONST_I         shift and go to state 70
    CONST_STRING    shift and go to state 71

    expression                     shift and go to state 234
    exp                            shift and go to state 57
    xp                             shift and go to state 58
    x                              shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 63
    factor_aux                     shift and go to state 65
    const                          shift and go to state 67
    function_call                  shift and go to state 72
    array_access                   shift and go to state 73

state 233

    (58) else -> ELSE n_start_else block .

    ID              reduce using rule 58 (else -> ELSE n_start_else block .)
    RETURN          reduce using rule 58 (else -> ELSE n_start_else block .)
    PRINT           reduce using rule 58 (else -> ELSE n_start_else block .)
    READ            reduce using rule 58 (else -> ELSE n_start_else block .)
    IF              reduce using rule 58 (else -> ELSE n_start_else block .)
    WHILE           reduce using rule 58 (else -> ELSE n_start_else block .)
    R_KEY_BRACKET   reduce using rule 58 (else -> ELSE n_start_else block .)


state 234

    (56) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block elif
    (57) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block

    R_PARENS        shift and go to state 235


state 235

    (56) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block elif
    (57) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block
    (115) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 115 (n_end_condition -> .)

    n_end_condition                shift and go to state 236

state 236

    (56) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block elif
    (57) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block
    (72) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 203

    block                          shift and go to state 237

state 237

    (56) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block . elif
    (57) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .
    (56) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (57) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block

    ELSE            reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ID              reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    RETURN          reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    PRINT           reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    READ            reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    IF              reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    WHILE           reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    R_KEY_BRACKET   reduce using rule 57 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ELIF            shift and go to state 214

    elif                           shift and go to state 238

state 238

    (56) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .

    ELSE            reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    ID              reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    RETURN          reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    PRINT           reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    READ            reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    IF              reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    WHILE           reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    R_KEY_BRACKET   reduce using rule 56 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)

