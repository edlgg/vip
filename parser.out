Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body n_end_function
Rule 6     main -> FUNCTION MAIN n_start_main function_body n_end_main
Rule 7     function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 11    vars -> var n_increment_local_var_count vars
Rule 12    vars -> var n_increment_local_var_count
Rule 13    statements -> statement statements
Rule 14    statements -> statement
Rule 15    function_params -> type ID n_add_param array_index COMMA function_params
Rule 16    function_params -> type ID n_add_param array_index
Rule 17    function_params -> type ID n_add_param COMMA function_params
Rule 18    function_params -> type ID n_add_param
Rule 19    function_type -> INT n_add_function_type
Rule 20    function_type -> FLOAT n_add_function_type
Rule 21    function_type -> STRING n_add_function_type
Rule 22    function_type -> VOID n_add_function_type
Rule 23    var -> type_aux ID n_add_var array_dim var_aux SEMICOLON
Rule 24    var -> type_aux ID n_add_var array_dim SEMICOLON
Rule 25    var -> type_aux ID n_add_var var_aux SEMICOLON
Rule 26    var -> type_aux ID n_add_var SEMICOLON
Rule 27    type_aux -> GLOBAL type
Rule 28    type_aux -> type
Rule 29    var_aux -> COMMA ID n_add_var array_dim var_aux
Rule 30    var_aux -> COMMA ID n_add_var array_dim
Rule 31    var_aux -> COMMA ID n_add_var var_aux
Rule 32    var_aux -> COMMA ID n_add_var
Rule 33    statement -> statement_aux SEMICOLON
Rule 34    statement -> statement_aux_2
Rule 35    statement_aux -> assignment
Rule 36    statement_aux -> function_call
Rule 37    statement_aux -> return
Rule 38    statement_aux -> print
Rule 39    statement_aux_2 -> if
Rule 40    statement_aux_2 -> while
Rule 41    type -> INT n_record_last_type
Rule 42    type -> FLOAT n_record_last_type
Rule 43    type -> STRING n_record_last_type
Rule 44    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 45    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 46    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 47    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 48    assignment -> ID n_make_assignment array_index ASSIGN expression
Rule 49    assignment -> ID n_make_assignment array_index ASSIGN read
Rule 50    assignment -> ID n_make_assignment ASSIGN expression
Rule 51    assignment -> ID n_make_assignment ASSIGN read
Rule 52    function_call -> ID n_calling_func params_pass
Rule 53    return -> RETURN expression n_return
Rule 54    if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
Rule 55    if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
Rule 56    if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
Rule 57    if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if
Rule 58    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
Rule 59    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
Rule 60    else -> ELSE n_start_else block
Rule 61    while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
Rule 62    print -> PRINT L_PARENS print_aux R_PARENS
Rule 63    print -> PRINT L_PARENS R_PARENS
Rule 64    print_aux -> expression n_print COMMA print_aux
Rule 65    print_aux -> expression n_print
Rule 66    expression -> exp n_eval_exp AND n_add_operator expression
Rule 67    expression -> exp n_eval_exp
Rule 68    read -> READ ID
Rule 69    params_pass -> L_PARENS expression params_pass_aux R_PARENS
Rule 70    params_pass -> L_PARENS expression R_PARENS
Rule 71    params_pass -> L_PARENS R_PARENS
Rule 72    params_pass_aux -> COMMA expression params_pass_aux
Rule 73    params_pass_aux -> COMMA expression
Rule 74    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 75    exp -> xp n_eval_xp OR n_add_operator exp
Rule 76    exp -> xp n_eval_xp
Rule 77    xp -> x n_eval_x NOT_EQUAL n_add_operator xp
Rule 78    xp -> x n_eval_x EQUALS n_add_operator xp
Rule 79    xp -> x n_eval_x GREATER n_add_operator xp
Rule 80    xp -> x n_eval_x GREATER_EQ n_add_operator xp
Rule 81    xp -> x n_eval_x LESS n_add_operator xp
Rule 82    xp -> x n_eval_x LESS_EQ n_add_operator xp
Rule 83    xp -> x n_eval_x
Rule 84    x -> term n_eval_term PLUS n_add_operator x
Rule 85    x -> term n_eval_term MINUS n_add_operator x
Rule 86    x -> term n_eval_term
Rule 87    term -> factor n_eval_factor TIMES n_add_operator term
Rule 88    term -> factor n_eval_factor DIVIDE n_add_operator term
Rule 89    term -> factor n_eval_factor
Rule 90    factor -> NOT factor_aux
Rule 91    factor -> factor_aux
Rule 92    factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
Rule 93    factor_aux -> PLUS const
Rule 94    factor_aux -> MINUS const
Rule 95    factor_aux -> const
Rule 96    const -> ID n_add_operand
Rule 97    const -> CONST_I n_add_operand
Rule 98    const -> CONST_F n_add_operand
Rule 99    const -> CONST_STRING n_add_operand
Rule 100   const -> function_call
Rule 101   const -> array_access
Rule 102   array_access -> ID array_index
Rule 103   n_start_main -> <empty>
Rule 104   n_add_function_name -> <empty>
Rule 105   n_add_function_type -> <empty>
Rule 106   n_end_function -> <empty>
Rule 107   n_end_main -> <empty>
Rule 108   n_add_var -> <empty>
Rule 109   n_add_param -> <empty>
Rule 110   n_record_last_type -> <empty>
Rule 111   n_eval_exp -> <empty>
Rule 112   n_eval_xp -> <empty>
Rule 113   n_eval_x -> <empty>
Rule 114   n_eval_factor -> <empty>
Rule 115   n_eval_term -> <empty>
Rule 116   n_end_condition -> <empty>
Rule 117   n_start_else -> <empty>
Rule 118   n_end_if -> <empty>
Rule 119   n_start_while -> <empty>
Rule 120   n_end_while -> <empty>
Rule 121   n_add_operand -> <empty>
Rule 122   n_add_operator -> <empty>
Rule 123   n_pop_fake_bottom -> <empty>
Rule 124   n_make_assignment -> <empty>
Rule 125   n_print -> <empty>
Rule 126   n_increment_local_var_count -> <empty>
Rule 127   n_return -> <empty>
Rule 128   n_calling_func -> <empty>

Terminals, with rules where they appear

AND                  : 66
ASSIGN               : 48 49 50 51
COLON                : 7 8
COMMA                : 15 17 29 30 31 32 64 72 73
CONST_F              : 98
CONST_I              : 46 46 47 97
CONST_STRING         : 99
DIVIDE               : 88
ELIF                 : 58 59
ELSE                 : 60
EQUALS               : 78
FLOAT                : 20 42
FUNCTION             : 6 7 8
GLOBAL               : 27
GREATER              : 79
GREATER_EQ           : 80
ID                   : 7 8 15 16 17 18 23 24 25 26 29 30 31 32 48 49 50 51 52 68 96 102
IF                   : 54 55 56 57
INT                  : 19 41
LESS                 : 81
LESS_EQ              : 82
L_KEY_BRACKET        : 9 10 74
L_PARENS             : 7 8 54 55 56 57 58 59 61 62 63 69 70 71 92
L_SQUARE_BRACKET     : 44 44 45 46 46 47
MAIN                 : 6
MINUS                : 85 94
NOT                  : 90
NOT_EQUAL            : 77
OR                   : 75
PLUS                 : 84 93
PRINT                : 62 63
READ                 : 68
RETURN               : 53
R_KEY_BRACKET        : 9 10 74
R_PARENS             : 7 8 54 55 56 57 58 59 61 62 63 69 70 71 92
R_SQUARE_BRACKET     : 44 44 45 46 46 47
SEMICOLON            : 23 24 25 26 33
STRING               : 21 43
TIMES                : 87
VOID                 : 22
WHILE                : 61
error                : 

Nonterminals, with rules where they appear

array_access         : 101
array_dim            : 23 24 29 30
array_index          : 15 16 48 49 102
assignment           : 35
block                : 54 55 56 57 58 59 60 61
const                : 93 94 95
elif                 : 54 55 58
else                 : 54 56
exp                  : 66 67 75
expression           : 44 44 45 48 50 53 54 55 56 57 58 59 61 64 65 66 69 70 72 73 92
factor               : 87 88 89
factor_aux           : 90 91
function             : 3 4
function_body        : 5 6
function_call        : 36 100
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 39
main                 : 1 2
n_add_function_name  : 7 8
n_add_function_type  : 19 20 21 22
n_add_operand        : 96 97 98 99
n_add_operator       : 66 75 77 78 79 80 81 82 84 85 87 88 92
n_add_param          : 15 16 17 18
n_add_var            : 23 24 25 26 29 30 31 32
n_calling_func       : 52
n_end_condition      : 54 55 56 57 58 59 61
n_end_function       : 5
n_end_if             : 54 55 56 57
n_end_main           : 6
n_end_while          : 61
n_eval_exp           : 66 67
n_eval_factor        : 87 88 89
n_eval_term          : 84 85 86
n_eval_x             : 77 78 79 80 81 82 83
n_eval_xp            : 75 76
n_increment_local_var_count : 11 12
n_make_assignment    : 48 49 50 51
n_pop_fake_bottom    : 92
n_print              : 64 65
n_record_last_type   : 41 42 43
n_return             : 53
n_start_else         : 58 59 60
n_start_main         : 6
n_start_while        : 61
params_pass          : 52
params_pass_aux      : 69 72
print                : 38
print_aux            : 62 64
program              : 0
program_aux          : 1 3
read                 : 49 51
return               : 37
statement            : 13 14
statement_aux        : 33
statement_aux_2      : 34
statements           : 9 10 13 74
term                 : 84 85 86 87 88
type                 : 15 16 17 18 27 28
type_aux             : 23 24 25 26
var                  : 11 12
var_aux              : 23 25 29 31
vars                 : 9 11
while                : 40
x                    : 77 78 79 80 81 82 83 84 85
xp                   : 75 76 77 78 79 80 81 82

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN n_start_main function_body n_end_main
    (7) function_header -> FUNCTION . ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID n_add_function_name L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body n_end_function
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . n_start_main function_body n_end_main
    (103) n_start_main -> .

    L_KEY_BRACKET   reduce using rule 103 (n_start_main -> .)

    n_start_main                   shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . n_add_function_name L_PARENS R_PARENS COLON function_type
    (104) n_add_function_name -> .

    L_PARENS        reduce using rule 104 (n_add_function_name -> .)

    n_add_function_name            shift and go to state 14

state 11

    (5) function -> function_header function_body . n_end_function
    (106) n_end_function -> .

    FUNCTION        reduce using rule 106 (n_end_function -> .)

    n_end_function                 shift and go to state 15

state 12

    (9) function_body -> L_KEY_BRACKET . vars statements R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (13) statements -> . statement statements
    (14) statements -> . statement
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type
    (48) assignment -> . ID n_make_assignment array_index ASSIGN expression
    (49) assignment -> . ID n_make_assignment array_index ASSIGN read
    (50) assignment -> . ID n_make_assignment ASSIGN expression
    (51) assignment -> . ID n_make_assignment ASSIGN read
    (52) function_call -> . ID n_calling_func params_pass
    (53) return -> . RETURN expression n_return
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (61) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    GLOBAL          shift and go to state 24
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    vars                           shift and go to state 16
    statements                     shift and go to state 17
    var                            shift and go to state 18
    statement                      shift and go to state 19
    type_aux                       shift and go to state 20
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    type                           shift and go to state 25
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 13

    (6) main -> FUNCTION MAIN n_start_main . function_body n_end_main
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 39

state 14

    (7) function_header -> FUNCTION ID n_add_function_name . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 40


state 15

    (5) function -> function_header function_body n_end_function .

    FUNCTION        reduce using rule 5 (function -> function_header function_body n_end_function .)


state 16

    (9) function_body -> L_KEY_BRACKET vars . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_make_assignment array_index ASSIGN expression
    (49) assignment -> . ID n_make_assignment array_index ASSIGN read
    (50) assignment -> . ID n_make_assignment ASSIGN expression
    (51) assignment -> . ID n_make_assignment ASSIGN read
    (52) function_call -> . ID n_calling_func params_pass
    (53) return -> . RETURN expression n_return
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (61) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statements                     shift and go to state 41
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 17

    (10) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 42


state 18

    (11) vars -> var . n_increment_local_var_count vars
    (12) vars -> var . n_increment_local_var_count
    (126) n_increment_local_var_count -> .

    GLOBAL          reduce using rule 126 (n_increment_local_var_count -> .)
    INT             reduce using rule 126 (n_increment_local_var_count -> .)
    FLOAT           reduce using rule 126 (n_increment_local_var_count -> .)
    STRING          reduce using rule 126 (n_increment_local_var_count -> .)
    ID              reduce using rule 126 (n_increment_local_var_count -> .)
    RETURN          reduce using rule 126 (n_increment_local_var_count -> .)
    PRINT           reduce using rule 126 (n_increment_local_var_count -> .)
    IF              reduce using rule 126 (n_increment_local_var_count -> .)
    WHILE           reduce using rule 126 (n_increment_local_var_count -> .)

    n_increment_local_var_count    shift and go to state 43

state 19

    (13) statements -> statement . statements
    (14) statements -> statement .
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_make_assignment array_index ASSIGN expression
    (49) assignment -> . ID n_make_assignment array_index ASSIGN read
    (50) assignment -> . ID n_make_assignment ASSIGN expression
    (51) assignment -> . ID n_make_assignment ASSIGN read
    (52) function_call -> . ID n_calling_func params_pass
    (53) return -> . RETURN expression n_return
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (61) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    R_KEY_BRACKET   reduce using rule 14 (statements -> statement .)
    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statement                      shift and go to state 19
    statements                     shift and go to state 44
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 20

    (23) var -> type_aux . ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux . ID n_add_var array_dim SEMICOLON
    (25) var -> type_aux . ID n_add_var var_aux SEMICOLON
    (26) var -> type_aux . ID n_add_var SEMICOLON

    ID              shift and go to state 45


state 21

    (48) assignment -> ID . n_make_assignment array_index ASSIGN expression
    (49) assignment -> ID . n_make_assignment array_index ASSIGN read
    (50) assignment -> ID . n_make_assignment ASSIGN expression
    (51) assignment -> ID . n_make_assignment ASSIGN read
    (52) function_call -> ID . n_calling_func params_pass
    (124) n_make_assignment -> .
    (128) n_calling_func -> .

    ASSIGN          reduce using rule 124 (n_make_assignment -> .)
    L_SQUARE_BRACKET reduce using rule 124 (n_make_assignment -> .)
    L_PARENS        reduce using rule 128 (n_calling_func -> .)

    n_make_assignment              shift and go to state 46
    n_calling_func                 shift and go to state 47

state 22

    (33) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 48


state 23

    (34) statement -> statement_aux_2 .

    ID              reduce using rule 34 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 34 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 34 (statement -> statement_aux_2 .)
    IF              reduce using rule 34 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 34 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 34 (statement -> statement_aux_2 .)


state 24

    (27) type_aux -> GLOBAL . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 49

state 25

    (28) type_aux -> type .

    ID              reduce using rule 28 (type_aux -> type .)


state 26

    (35) statement_aux -> assignment .

    SEMICOLON       reduce using rule 35 (statement_aux -> assignment .)


state 27

    (36) statement_aux -> function_call .

    SEMICOLON       reduce using rule 36 (statement_aux -> function_call .)


state 28

    (37) statement_aux -> return .

    SEMICOLON       reduce using rule 37 (statement_aux -> return .)


state 29

    (38) statement_aux -> print .

    SEMICOLON       reduce using rule 38 (statement_aux -> print .)


state 30

    (39) statement_aux_2 -> if .

    ID              reduce using rule 39 (statement_aux_2 -> if .)
    RETURN          reduce using rule 39 (statement_aux_2 -> if .)
    PRINT           reduce using rule 39 (statement_aux_2 -> if .)
    IF              reduce using rule 39 (statement_aux_2 -> if .)
    WHILE           reduce using rule 39 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 39 (statement_aux_2 -> if .)


state 31

    (40) statement_aux_2 -> while .

    ID              reduce using rule 40 (statement_aux_2 -> while .)
    RETURN          reduce using rule 40 (statement_aux_2 -> while .)
    PRINT           reduce using rule 40 (statement_aux_2 -> while .)
    IF              reduce using rule 40 (statement_aux_2 -> while .)
    WHILE           reduce using rule 40 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 40 (statement_aux_2 -> while .)


state 32

    (41) type -> INT . n_record_last_type
    (110) n_record_last_type -> .

    ID              reduce using rule 110 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 50

state 33

    (42) type -> FLOAT . n_record_last_type
    (110) n_record_last_type -> .

    ID              reduce using rule 110 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 51

state 34

    (43) type -> STRING . n_record_last_type
    (110) n_record_last_type -> .

    ID              reduce using rule 110 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 52

state 35

    (53) return -> RETURN . expression n_return
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 53
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 36

    (62) print -> PRINT . L_PARENS print_aux R_PARENS
    (63) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 71


state 37

    (54) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> IF . L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (57) if -> IF . L_PARENS expression R_PARENS n_end_condition block n_end_if

    L_PARENS        shift and go to state 72


state 38

    (61) while -> WHILE . n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (119) n_start_while -> .

    L_PARENS        reduce using rule 119 (n_start_while -> .)

    n_start_while                  shift and go to state 73

state 39

    (6) main -> FUNCTION MAIN n_start_main function_body . n_end_main
    (107) n_end_main -> .

    $end            reduce using rule 107 (n_end_main -> .)

    n_end_main                     shift and go to state 74

state 40

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    R_PARENS        shift and go to state 76
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    function_params                shift and go to state 75
    type                           shift and go to state 77

state 41

    (9) function_body -> L_KEY_BRACKET vars statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 78


state 42

    (10) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 43

    (11) vars -> var n_increment_local_var_count . vars
    (12) vars -> var n_increment_local_var_count .
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    ID              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    RETURN          reduce using rule 12 (vars -> var n_increment_local_var_count .)
    PRINT           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    IF              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    WHILE           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    GLOBAL          shift and go to state 24
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    var                            shift and go to state 18
    vars                           shift and go to state 79
    type_aux                       shift and go to state 20
    type                           shift and go to state 25

state 44

    (13) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 13 (statements -> statement statements .)


state 45

    (23) var -> type_aux ID . n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux ID . n_add_var array_dim SEMICOLON
    (25) var -> type_aux ID . n_add_var var_aux SEMICOLON
    (26) var -> type_aux ID . n_add_var SEMICOLON
    (108) n_add_var -> .

    SEMICOLON       reduce using rule 108 (n_add_var -> .)
    L_SQUARE_BRACKET reduce using rule 108 (n_add_var -> .)
    COMMA           reduce using rule 108 (n_add_var -> .)

    n_add_var                      shift and go to state 80

state 46

    (48) assignment -> ID n_make_assignment . array_index ASSIGN expression
    (49) assignment -> ID n_make_assignment . array_index ASSIGN read
    (50) assignment -> ID n_make_assignment . ASSIGN expression
    (51) assignment -> ID n_make_assignment . ASSIGN read
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    ASSIGN          shift and go to state 82
    L_SQUARE_BRACKET shift and go to state 83

    array_index                    shift and go to state 81

state 47

    (52) function_call -> ID n_calling_func . params_pass
    (69) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (70) params_pass -> . L_PARENS expression R_PARENS
    (71) params_pass -> . L_PARENS R_PARENS

    L_PARENS        shift and go to state 85

    params_pass                    shift and go to state 84

state 48

    (33) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 33 (statement -> statement_aux SEMICOLON .)


state 49

    (27) type_aux -> GLOBAL type .

    ID              reduce using rule 27 (type_aux -> GLOBAL type .)


state 50

    (41) type -> INT n_record_last_type .

    ID              reduce using rule 41 (type -> INT n_record_last_type .)


state 51

    (42) type -> FLOAT n_record_last_type .

    ID              reduce using rule 42 (type -> FLOAT n_record_last_type .)


state 52

    (43) type -> STRING n_record_last_type .

    ID              reduce using rule 43 (type -> STRING n_record_last_type .)


state 53

    (53) return -> RETURN expression . n_return
    (127) n_return -> .

    SEMICOLON       reduce using rule 127 (n_return -> .)

    n_return                       shift and go to state 86

state 54

    (66) expression -> exp . n_eval_exp AND n_add_operator expression
    (67) expression -> exp . n_eval_exp
    (111) n_eval_exp -> .

    AND             reduce using rule 111 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 111 (n_eval_exp -> .)
    COMMA           reduce using rule 111 (n_eval_exp -> .)
    R_PARENS        reduce using rule 111 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 111 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 87

state 55

    (75) exp -> xp . n_eval_xp OR n_add_operator exp
    (76) exp -> xp . n_eval_xp
    (112) n_eval_xp -> .

    OR              reduce using rule 112 (n_eval_xp -> .)
    AND             reduce using rule 112 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 112 (n_eval_xp -> .)
    COMMA           reduce using rule 112 (n_eval_xp -> .)
    R_PARENS        reduce using rule 112 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 112 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 88

state 56

    (77) xp -> x . n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> x . n_eval_x EQUALS n_add_operator xp
    (79) xp -> x . n_eval_x GREATER n_add_operator xp
    (80) xp -> x . n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> x . n_eval_x LESS n_add_operator xp
    (82) xp -> x . n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> x . n_eval_x
    (113) n_eval_x -> .

    NOT_EQUAL       reduce using rule 113 (n_eval_x -> .)
    EQUALS          reduce using rule 113 (n_eval_x -> .)
    GREATER         reduce using rule 113 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 113 (n_eval_x -> .)
    LESS            reduce using rule 113 (n_eval_x -> .)
    LESS_EQ         reduce using rule 113 (n_eval_x -> .)
    OR              reduce using rule 113 (n_eval_x -> .)
    AND             reduce using rule 113 (n_eval_x -> .)
    SEMICOLON       reduce using rule 113 (n_eval_x -> .)
    COMMA           reduce using rule 113 (n_eval_x -> .)
    R_PARENS        reduce using rule 113 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 113 (n_eval_x -> .)

    n_eval_x                       shift and go to state 89

state 57

    (84) x -> term . n_eval_term PLUS n_add_operator x
    (85) x -> term . n_eval_term MINUS n_add_operator x
    (86) x -> term . n_eval_term
    (115) n_eval_term -> .

    PLUS            reduce using rule 115 (n_eval_term -> .)
    MINUS           reduce using rule 115 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 115 (n_eval_term -> .)
    EQUALS          reduce using rule 115 (n_eval_term -> .)
    GREATER         reduce using rule 115 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 115 (n_eval_term -> .)
    LESS            reduce using rule 115 (n_eval_term -> .)
    LESS_EQ         reduce using rule 115 (n_eval_term -> .)
    OR              reduce using rule 115 (n_eval_term -> .)
    AND             reduce using rule 115 (n_eval_term -> .)
    SEMICOLON       reduce using rule 115 (n_eval_term -> .)
    COMMA           reduce using rule 115 (n_eval_term -> .)
    R_PARENS        reduce using rule 115 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 115 (n_eval_term -> .)

    n_eval_term                    shift and go to state 90

state 58

    (93) factor_aux -> PLUS . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    const                          shift and go to state 91
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 59

    (94) factor_aux -> MINUS . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    const                          shift and go to state 92
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 60

    (87) term -> factor . n_eval_factor TIMES n_add_operator term
    (88) term -> factor . n_eval_factor DIVIDE n_add_operator term
    (89) term -> factor . n_eval_factor
    (114) n_eval_factor -> .

    TIMES           reduce using rule 114 (n_eval_factor -> .)
    DIVIDE          reduce using rule 114 (n_eval_factor -> .)
    PLUS            reduce using rule 114 (n_eval_factor -> .)
    MINUS           reduce using rule 114 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 114 (n_eval_factor -> .)
    EQUALS          reduce using rule 114 (n_eval_factor -> .)
    GREATER         reduce using rule 114 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 114 (n_eval_factor -> .)
    LESS            reduce using rule 114 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 114 (n_eval_factor -> .)
    OR              reduce using rule 114 (n_eval_factor -> .)
    AND             reduce using rule 114 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 114 (n_eval_factor -> .)
    COMMA           reduce using rule 114 (n_eval_factor -> .)
    R_PARENS        reduce using rule 114 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 114 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 93

state 61

    (90) factor -> NOT . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor_aux                     shift and go to state 94
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 62

    (91) factor -> factor_aux .

    TIMES           reduce using rule 91 (factor -> factor_aux .)
    DIVIDE          reduce using rule 91 (factor -> factor_aux .)
    PLUS            reduce using rule 91 (factor -> factor_aux .)
    MINUS           reduce using rule 91 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 91 (factor -> factor_aux .)
    EQUALS          reduce using rule 91 (factor -> factor_aux .)
    GREATER         reduce using rule 91 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 91 (factor -> factor_aux .)
    LESS            reduce using rule 91 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 91 (factor -> factor_aux .)
    OR              reduce using rule 91 (factor -> factor_aux .)
    AND             reduce using rule 91 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 91 (factor -> factor_aux .)
    COMMA           reduce using rule 91 (factor -> factor_aux .)
    R_PARENS        reduce using rule 91 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 91 (factor -> factor_aux .)


state 63

    (92) factor_aux -> L_PARENS . n_add_operator expression n_pop_fake_bottom R_PARENS
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 95

state 64

    (95) factor_aux -> const .

    TIMES           reduce using rule 95 (factor_aux -> const .)
    DIVIDE          reduce using rule 95 (factor_aux -> const .)
    PLUS            reduce using rule 95 (factor_aux -> const .)
    MINUS           reduce using rule 95 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 95 (factor_aux -> const .)
    EQUALS          reduce using rule 95 (factor_aux -> const .)
    GREATER         reduce using rule 95 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 95 (factor_aux -> const .)
    LESS            reduce using rule 95 (factor_aux -> const .)
    LESS_EQ         reduce using rule 95 (factor_aux -> const .)
    OR              reduce using rule 95 (factor_aux -> const .)
    AND             reduce using rule 95 (factor_aux -> const .)
    SEMICOLON       reduce using rule 95 (factor_aux -> const .)
    COMMA           reduce using rule 95 (factor_aux -> const .)
    R_PARENS        reduce using rule 95 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 95 (factor_aux -> const .)


state 65

    (96) const -> ID . n_add_operand
    (52) function_call -> ID . n_calling_func params_pass
    (102) array_access -> ID . array_index
    (121) n_add_operand -> .
    (128) n_calling_func -> .
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 121 (n_add_operand -> .)
    DIVIDE          reduce using rule 121 (n_add_operand -> .)
    PLUS            reduce using rule 121 (n_add_operand -> .)
    MINUS           reduce using rule 121 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 121 (n_add_operand -> .)
    EQUALS          reduce using rule 121 (n_add_operand -> .)
    GREATER         reduce using rule 121 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 121 (n_add_operand -> .)
    LESS            reduce using rule 121 (n_add_operand -> .)
    LESS_EQ         reduce using rule 121 (n_add_operand -> .)
    OR              reduce using rule 121 (n_add_operand -> .)
    AND             reduce using rule 121 (n_add_operand -> .)
    SEMICOLON       reduce using rule 121 (n_add_operand -> .)
    COMMA           reduce using rule 121 (n_add_operand -> .)
    R_PARENS        reduce using rule 121 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 121 (n_add_operand -> .)
    L_PARENS        reduce using rule 128 (n_calling_func -> .)
    L_SQUARE_BRACKET shift and go to state 83

    n_add_operand                  shift and go to state 96
    n_calling_func                 shift and go to state 47
    array_index                    shift and go to state 97

state 66

    (97) const -> CONST_I . n_add_operand
    (121) n_add_operand -> .

    TIMES           reduce using rule 121 (n_add_operand -> .)
    DIVIDE          reduce using rule 121 (n_add_operand -> .)
    PLUS            reduce using rule 121 (n_add_operand -> .)
    MINUS           reduce using rule 121 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 121 (n_add_operand -> .)
    EQUALS          reduce using rule 121 (n_add_operand -> .)
    GREATER         reduce using rule 121 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 121 (n_add_operand -> .)
    LESS            reduce using rule 121 (n_add_operand -> .)
    LESS_EQ         reduce using rule 121 (n_add_operand -> .)
    OR              reduce using rule 121 (n_add_operand -> .)
    AND             reduce using rule 121 (n_add_operand -> .)
    SEMICOLON       reduce using rule 121 (n_add_operand -> .)
    COMMA           reduce using rule 121 (n_add_operand -> .)
    R_PARENS        reduce using rule 121 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 121 (n_add_operand -> .)

    n_add_operand                  shift and go to state 98

state 67

    (98) const -> CONST_F . n_add_operand
    (121) n_add_operand -> .

    TIMES           reduce using rule 121 (n_add_operand -> .)
    DIVIDE          reduce using rule 121 (n_add_operand -> .)
    PLUS            reduce using rule 121 (n_add_operand -> .)
    MINUS           reduce using rule 121 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 121 (n_add_operand -> .)
    EQUALS          reduce using rule 121 (n_add_operand -> .)
    GREATER         reduce using rule 121 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 121 (n_add_operand -> .)
    LESS            reduce using rule 121 (n_add_operand -> .)
    LESS_EQ         reduce using rule 121 (n_add_operand -> .)
    OR              reduce using rule 121 (n_add_operand -> .)
    AND             reduce using rule 121 (n_add_operand -> .)
    SEMICOLON       reduce using rule 121 (n_add_operand -> .)
    COMMA           reduce using rule 121 (n_add_operand -> .)
    R_PARENS        reduce using rule 121 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 121 (n_add_operand -> .)

    n_add_operand                  shift and go to state 99

state 68

    (99) const -> CONST_STRING . n_add_operand
    (121) n_add_operand -> .

    TIMES           reduce using rule 121 (n_add_operand -> .)
    DIVIDE          reduce using rule 121 (n_add_operand -> .)
    PLUS            reduce using rule 121 (n_add_operand -> .)
    MINUS           reduce using rule 121 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 121 (n_add_operand -> .)
    EQUALS          reduce using rule 121 (n_add_operand -> .)
    GREATER         reduce using rule 121 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 121 (n_add_operand -> .)
    LESS            reduce using rule 121 (n_add_operand -> .)
    LESS_EQ         reduce using rule 121 (n_add_operand -> .)
    OR              reduce using rule 121 (n_add_operand -> .)
    AND             reduce using rule 121 (n_add_operand -> .)
    SEMICOLON       reduce using rule 121 (n_add_operand -> .)
    COMMA           reduce using rule 121 (n_add_operand -> .)
    R_PARENS        reduce using rule 121 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 121 (n_add_operand -> .)

    n_add_operand                  shift and go to state 100

state 69

    (100) const -> function_call .

    TIMES           reduce using rule 100 (const -> function_call .)
    DIVIDE          reduce using rule 100 (const -> function_call .)
    PLUS            reduce using rule 100 (const -> function_call .)
    MINUS           reduce using rule 100 (const -> function_call .)
    NOT_EQUAL       reduce using rule 100 (const -> function_call .)
    EQUALS          reduce using rule 100 (const -> function_call .)
    GREATER         reduce using rule 100 (const -> function_call .)
    GREATER_EQ      reduce using rule 100 (const -> function_call .)
    LESS            reduce using rule 100 (const -> function_call .)
    LESS_EQ         reduce using rule 100 (const -> function_call .)
    OR              reduce using rule 100 (const -> function_call .)
    AND             reduce using rule 100 (const -> function_call .)
    SEMICOLON       reduce using rule 100 (const -> function_call .)
    COMMA           reduce using rule 100 (const -> function_call .)
    R_PARENS        reduce using rule 100 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 100 (const -> function_call .)


state 70

    (101) const -> array_access .

    TIMES           reduce using rule 101 (const -> array_access .)
    DIVIDE          reduce using rule 101 (const -> array_access .)
    PLUS            reduce using rule 101 (const -> array_access .)
    MINUS           reduce using rule 101 (const -> array_access .)
    NOT_EQUAL       reduce using rule 101 (const -> array_access .)
    EQUALS          reduce using rule 101 (const -> array_access .)
    GREATER         reduce using rule 101 (const -> array_access .)
    GREATER_EQ      reduce using rule 101 (const -> array_access .)
    LESS            reduce using rule 101 (const -> array_access .)
    LESS_EQ         reduce using rule 101 (const -> array_access .)
    OR              reduce using rule 101 (const -> array_access .)
    AND             reduce using rule 101 (const -> array_access .)
    SEMICOLON       reduce using rule 101 (const -> array_access .)
    COMMA           reduce using rule 101 (const -> array_access .)
    R_PARENS        reduce using rule 101 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 101 (const -> array_access .)


state 71

    (62) print -> PRINT L_PARENS . print_aux R_PARENS
    (63) print -> PRINT L_PARENS . R_PARENS
    (64) print_aux -> . expression n_print COMMA print_aux
    (65) print_aux -> . expression n_print
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    R_PARENS        shift and go to state 102
    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    print_aux                      shift and go to state 101
    expression                     shift and go to state 103
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 72

    (54) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> IF L_PARENS . expression R_PARENS n_end_condition block else n_end_if
    (57) if -> IF L_PARENS . expression R_PARENS n_end_condition block n_end_if
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 104
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 73

    (61) while -> WHILE n_start_while . L_PARENS expression R_PARENS n_end_condition block n_end_while

    L_PARENS        shift and go to state 105


state 74

    (6) main -> FUNCTION MAIN n_start_main function_body n_end_main .

    $end            reduce using rule 6 (main -> FUNCTION MAIN n_start_main function_body n_end_main .)


state 75

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 106


state 76

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 107


state 77

    (15) function_params -> type . ID n_add_param array_index COMMA function_params
    (16) function_params -> type . ID n_add_param array_index
    (17) function_params -> type . ID n_add_param COMMA function_params
    (18) function_params -> type . ID n_add_param

    ID              shift and go to state 108


state 78

    (9) function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)


state 79

    (11) vars -> var n_increment_local_var_count vars .

    ID              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    RETURN          reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    PRINT           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    IF              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    WHILE           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)


state 80

    (23) var -> type_aux ID n_add_var . array_dim var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var . array_dim SEMICOLON
    (25) var -> type_aux ID n_add_var . var_aux SEMICOLON
    (26) var -> type_aux ID n_add_var . SEMICOLON
    (46) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 111
    L_SQUARE_BRACKET shift and go to state 112
    COMMA           shift and go to state 113

    array_dim                      shift and go to state 109
    var_aux                        shift and go to state 110

state 81

    (48) assignment -> ID n_make_assignment array_index . ASSIGN expression
    (49) assignment -> ID n_make_assignment array_index . ASSIGN read

    ASSIGN          shift and go to state 114


state 82

    (50) assignment -> ID n_make_assignment ASSIGN . expression
    (51) assignment -> ID n_make_assignment ASSIGN . read
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (68) read -> . READ ID
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    READ            shift and go to state 117
    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 115
    read                           shift and go to state 116
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 83

    (44) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 118
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 84

    (52) function_call -> ID n_calling_func params_pass .

    SEMICOLON       reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    TIMES           reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    DIVIDE          reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    PLUS            reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    MINUS           reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    NOT_EQUAL       reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    EQUALS          reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    GREATER         reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    GREATER_EQ      reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    LESS            reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    LESS_EQ         reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    OR              reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    AND             reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    COMMA           reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    R_PARENS        reduce using rule 52 (function_call -> ID n_calling_func params_pass .)
    R_SQUARE_BRACKET reduce using rule 52 (function_call -> ID n_calling_func params_pass .)


state 85

    (69) params_pass -> L_PARENS . expression params_pass_aux R_PARENS
    (70) params_pass -> L_PARENS . expression R_PARENS
    (71) params_pass -> L_PARENS . R_PARENS
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    R_PARENS        shift and go to state 120
    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 119
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 86

    (53) return -> RETURN expression n_return .

    SEMICOLON       reduce using rule 53 (return -> RETURN expression n_return .)


state 87

    (66) expression -> exp n_eval_exp . AND n_add_operator expression
    (67) expression -> exp n_eval_exp .

    AND             shift and go to state 121
    SEMICOLON       reduce using rule 67 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 67 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 67 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 67 (expression -> exp n_eval_exp .)


state 88

    (75) exp -> xp n_eval_xp . OR n_add_operator exp
    (76) exp -> xp n_eval_xp .

    OR              shift and go to state 122
    AND             reduce using rule 76 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 76 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 76 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 76 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 76 (exp -> xp n_eval_xp .)


state 89

    (77) xp -> x n_eval_x . NOT_EQUAL n_add_operator xp
    (78) xp -> x n_eval_x . EQUALS n_add_operator xp
    (79) xp -> x n_eval_x . GREATER n_add_operator xp
    (80) xp -> x n_eval_x . GREATER_EQ n_add_operator xp
    (81) xp -> x n_eval_x . LESS n_add_operator xp
    (82) xp -> x n_eval_x . LESS_EQ n_add_operator xp
    (83) xp -> x n_eval_x .

    NOT_EQUAL       shift and go to state 123
    EQUALS          shift and go to state 124
    GREATER         shift and go to state 125
    GREATER_EQ      shift and go to state 126
    LESS            shift and go to state 127
    LESS_EQ         shift and go to state 128
    OR              reduce using rule 83 (xp -> x n_eval_x .)
    AND             reduce using rule 83 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 83 (xp -> x n_eval_x .)
    COMMA           reduce using rule 83 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 83 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 83 (xp -> x n_eval_x .)


state 90

    (84) x -> term n_eval_term . PLUS n_add_operator x
    (85) x -> term n_eval_term . MINUS n_add_operator x
    (86) x -> term n_eval_term .

    PLUS            shift and go to state 129
    MINUS           shift and go to state 130
    NOT_EQUAL       reduce using rule 86 (x -> term n_eval_term .)
    EQUALS          reduce using rule 86 (x -> term n_eval_term .)
    GREATER         reduce using rule 86 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 86 (x -> term n_eval_term .)
    LESS            reduce using rule 86 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 86 (x -> term n_eval_term .)
    OR              reduce using rule 86 (x -> term n_eval_term .)
    AND             reduce using rule 86 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 86 (x -> term n_eval_term .)
    COMMA           reduce using rule 86 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 86 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 86 (x -> term n_eval_term .)


state 91

    (93) factor_aux -> PLUS const .

    TIMES           reduce using rule 93 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 93 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 93 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 93 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 93 (factor_aux -> PLUS const .)
    EQUALS          reduce using rule 93 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 93 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 93 (factor_aux -> PLUS const .)
    LESS            reduce using rule 93 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 93 (factor_aux -> PLUS const .)
    OR              reduce using rule 93 (factor_aux -> PLUS const .)
    AND             reduce using rule 93 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 93 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 93 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 93 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 93 (factor_aux -> PLUS const .)


state 92

    (94) factor_aux -> MINUS const .

    TIMES           reduce using rule 94 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 94 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 94 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 94 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 94 (factor_aux -> MINUS const .)
    EQUALS          reduce using rule 94 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 94 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 94 (factor_aux -> MINUS const .)
    LESS            reduce using rule 94 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 94 (factor_aux -> MINUS const .)
    OR              reduce using rule 94 (factor_aux -> MINUS const .)
    AND             reduce using rule 94 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 94 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 94 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 94 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 94 (factor_aux -> MINUS const .)


state 93

    (87) term -> factor n_eval_factor . TIMES n_add_operator term
    (88) term -> factor n_eval_factor . DIVIDE n_add_operator term
    (89) term -> factor n_eval_factor .

    TIMES           shift and go to state 131
    DIVIDE          shift and go to state 132
    PLUS            reduce using rule 89 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 89 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 89 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 89 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 89 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 89 (term -> factor n_eval_factor .)
    LESS            reduce using rule 89 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 89 (term -> factor n_eval_factor .)
    OR              reduce using rule 89 (term -> factor n_eval_factor .)
    AND             reduce using rule 89 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 89 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 89 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 89 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 89 (term -> factor n_eval_factor .)


state 94

    (90) factor -> NOT factor_aux .

    TIMES           reduce using rule 90 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 90 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 90 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 90 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 90 (factor -> NOT factor_aux .)
    EQUALS          reduce using rule 90 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 90 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 90 (factor -> NOT factor_aux .)
    LESS            reduce using rule 90 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 90 (factor -> NOT factor_aux .)
    OR              reduce using rule 90 (factor -> NOT factor_aux .)
    AND             reduce using rule 90 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 90 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 90 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 90 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 90 (factor -> NOT factor_aux .)


state 95

    (92) factor_aux -> L_PARENS n_add_operator . expression n_pop_fake_bottom R_PARENS
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 133
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 96

    (96) const -> ID n_add_operand .

    TIMES           reduce using rule 96 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 96 (const -> ID n_add_operand .)
    PLUS            reduce using rule 96 (const -> ID n_add_operand .)
    MINUS           reduce using rule 96 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 96 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 96 (const -> ID n_add_operand .)
    GREATER         reduce using rule 96 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 96 (const -> ID n_add_operand .)
    LESS            reduce using rule 96 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 96 (const -> ID n_add_operand .)
    OR              reduce using rule 96 (const -> ID n_add_operand .)
    AND             reduce using rule 96 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 96 (const -> ID n_add_operand .)
    COMMA           reduce using rule 96 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 96 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 96 (const -> ID n_add_operand .)


state 97

    (102) array_access -> ID array_index .

    TIMES           reduce using rule 102 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 102 (array_access -> ID array_index .)
    PLUS            reduce using rule 102 (array_access -> ID array_index .)
    MINUS           reduce using rule 102 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 102 (array_access -> ID array_index .)
    EQUALS          reduce using rule 102 (array_access -> ID array_index .)
    GREATER         reduce using rule 102 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 102 (array_access -> ID array_index .)
    LESS            reduce using rule 102 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 102 (array_access -> ID array_index .)
    OR              reduce using rule 102 (array_access -> ID array_index .)
    AND             reduce using rule 102 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 102 (array_access -> ID array_index .)
    COMMA           reduce using rule 102 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 102 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 102 (array_access -> ID array_index .)


state 98

    (97) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 97 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 97 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 97 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 97 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 97 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 97 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 97 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 97 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 97 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 97 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 97 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 97 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 97 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 97 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 97 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 97 (const -> CONST_I n_add_operand .)


state 99

    (98) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 98 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 98 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 98 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 98 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 98 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 98 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 98 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 98 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 98 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 98 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 98 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 98 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 98 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 98 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 98 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 98 (const -> CONST_F n_add_operand .)


state 100

    (99) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 99 (const -> CONST_STRING n_add_operand .)


state 101

    (62) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 134


state 102

    (63) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 63 (print -> PRINT L_PARENS R_PARENS .)


state 103

    (64) print_aux -> expression . n_print COMMA print_aux
    (65) print_aux -> expression . n_print
    (125) n_print -> .

    COMMA           reduce using rule 125 (n_print -> .)
    R_PARENS        reduce using rule 125 (n_print -> .)

    n_print                        shift and go to state 135

state 104

    (54) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif else n_end_if
    (55) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif n_end_if
    (56) if -> IF L_PARENS expression . R_PARENS n_end_condition block else n_end_if
    (57) if -> IF L_PARENS expression . R_PARENS n_end_condition block n_end_if

    R_PARENS        shift and go to state 136


state 105

    (61) while -> WHILE n_start_while L_PARENS . expression R_PARENS n_end_condition block n_end_while
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 137
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 106

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 138


state 107

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142
    VOID            shift and go to state 143

    function_type                  shift and go to state 139

state 108

    (15) function_params -> type ID . n_add_param array_index COMMA function_params
    (16) function_params -> type ID . n_add_param array_index
    (17) function_params -> type ID . n_add_param COMMA function_params
    (18) function_params -> type ID . n_add_param
    (109) n_add_param -> .

    COMMA           reduce using rule 109 (n_add_param -> .)
    L_SQUARE_BRACKET reduce using rule 109 (n_add_param -> .)
    R_PARENS        reduce using rule 109 (n_add_param -> .)

    n_add_param                    shift and go to state 144

state 109

    (23) var -> type_aux ID n_add_var array_dim . var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var array_dim . SEMICOLON
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 146
    COMMA           shift and go to state 113

    var_aux                        shift and go to state 145

state 110

    (25) var -> type_aux ID n_add_var var_aux . SEMICOLON

    SEMICOLON       shift and go to state 147


state 111

    (26) var -> type_aux ID n_add_var SEMICOLON .

    GLOBAL          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    INT             reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    FLOAT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    STRING          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    ID              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    RETURN          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    PRINT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    IF              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    WHILE           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)


state 112

    (46) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 148


state 113

    (29) var_aux -> COMMA . ID n_add_var array_dim var_aux
    (30) var_aux -> COMMA . ID n_add_var array_dim
    (31) var_aux -> COMMA . ID n_add_var var_aux
    (32) var_aux -> COMMA . ID n_add_var

    ID              shift and go to state 149


state 114

    (48) assignment -> ID n_make_assignment array_index ASSIGN . expression
    (49) assignment -> ID n_make_assignment array_index ASSIGN . read
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (68) read -> . READ ID
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    READ            shift and go to state 117
    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 150
    read                           shift and go to state 151
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 115

    (50) assignment -> ID n_make_assignment ASSIGN expression .

    SEMICOLON       reduce using rule 50 (assignment -> ID n_make_assignment ASSIGN expression .)


state 116

    (51) assignment -> ID n_make_assignment ASSIGN read .

    SEMICOLON       reduce using rule 51 (assignment -> ID n_make_assignment ASSIGN read .)


state 117

    (68) read -> READ . ID

    ID              shift and go to state 152


state 118

    (44) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 153


state 119

    (69) params_pass -> L_PARENS expression . params_pass_aux R_PARENS
    (70) params_pass -> L_PARENS expression . R_PARENS
    (72) params_pass_aux -> . COMMA expression params_pass_aux
    (73) params_pass_aux -> . COMMA expression

    R_PARENS        shift and go to state 155
    COMMA           shift and go to state 156

    params_pass_aux                shift and go to state 154

state 120

    (71) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)


state 121

    (66) expression -> exp n_eval_exp AND . n_add_operator expression
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 157

state 122

    (75) exp -> xp n_eval_xp OR . n_add_operator exp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 158

state 123

    (77) xp -> x n_eval_x NOT_EQUAL . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 159

state 124

    (78) xp -> x n_eval_x EQUALS . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 160

state 125

    (79) xp -> x n_eval_x GREATER . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 161

state 126

    (80) xp -> x n_eval_x GREATER_EQ . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 162

state 127

    (81) xp -> x n_eval_x LESS . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 163

state 128

    (82) xp -> x n_eval_x LESS_EQ . n_add_operator xp
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 164

state 129

    (84) x -> term n_eval_term PLUS . n_add_operator x
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 165

state 130

    (85) x -> term n_eval_term MINUS . n_add_operator x
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 166

state 131

    (87) term -> factor n_eval_factor TIMES . n_add_operator term
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 167

state 132

    (88) term -> factor n_eval_factor DIVIDE . n_add_operator term
    (122) n_add_operator -> .

    NOT             reduce using rule 122 (n_add_operator -> .)
    L_PARENS        reduce using rule 122 (n_add_operator -> .)
    PLUS            reduce using rule 122 (n_add_operator -> .)
    MINUS           reduce using rule 122 (n_add_operator -> .)
    ID              reduce using rule 122 (n_add_operator -> .)
    CONST_I         reduce using rule 122 (n_add_operator -> .)
    CONST_F         reduce using rule 122 (n_add_operator -> .)
    CONST_STRING    reduce using rule 122 (n_add_operator -> .)

    n_add_operator                 shift and go to state 168

state 133

    (92) factor_aux -> L_PARENS n_add_operator expression . n_pop_fake_bottom R_PARENS
    (123) n_pop_fake_bottom -> .

    R_PARENS        reduce using rule 123 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 169

state 134

    (62) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 62 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 135

    (64) print_aux -> expression n_print . COMMA print_aux
    (65) print_aux -> expression n_print .

    COMMA           shift and go to state 170
    R_PARENS        reduce using rule 65 (print_aux -> expression n_print .)


state 136

    (54) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif n_end_if
    (56) if -> IF L_PARENS expression R_PARENS . n_end_condition block else n_end_if
    (57) if -> IF L_PARENS expression R_PARENS . n_end_condition block n_end_if
    (116) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 116 (n_end_condition -> .)

    n_end_condition                shift and go to state 171

state 137

    (61) while -> WHILE n_start_while L_PARENS expression . R_PARENS n_end_condition block n_end_while

    R_PARENS        shift and go to state 172


state 138

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142
    VOID            shift and go to state 143

    function_type                  shift and go to state 173

state 139

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .)


state 140

    (19) function_type -> INT . n_add_function_type
    (105) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 105 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 174

state 141

    (20) function_type -> FLOAT . n_add_function_type
    (105) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 105 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 175

state 142

    (21) function_type -> STRING . n_add_function_type
    (105) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 105 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 176

state 143

    (22) function_type -> VOID . n_add_function_type
    (105) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 105 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 177

state 144

    (15) function_params -> type ID n_add_param . array_index COMMA function_params
    (16) function_params -> type ID n_add_param . array_index
    (17) function_params -> type ID n_add_param . COMMA function_params
    (18) function_params -> type ID n_add_param .
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 179
    R_PARENS        reduce using rule 18 (function_params -> type ID n_add_param .)
    L_SQUARE_BRACKET shift and go to state 83

    array_index                    shift and go to state 178

state 145

    (23) var -> type_aux ID n_add_var array_dim var_aux . SEMICOLON

    SEMICOLON       shift and go to state 180


state 146

    (24) var -> type_aux ID n_add_var array_dim SEMICOLON .

    GLOBAL          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    INT             reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    FLOAT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    STRING          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    ID              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    PRINT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    IF              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)


state 147

    (25) var -> type_aux ID n_add_var var_aux SEMICOLON .

    GLOBAL          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    INT             reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    FLOAT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    STRING          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    ID              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    RETURN          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    PRINT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    IF              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    WHILE           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)


state 148

    (46) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 181


state 149

    (29) var_aux -> COMMA ID . n_add_var array_dim var_aux
    (30) var_aux -> COMMA ID . n_add_var array_dim
    (31) var_aux -> COMMA ID . n_add_var var_aux
    (32) var_aux -> COMMA ID . n_add_var
    (108) n_add_var -> .

    L_SQUARE_BRACKET reduce using rule 108 (n_add_var -> .)
    COMMA           reduce using rule 108 (n_add_var -> .)
    SEMICOLON       reduce using rule 108 (n_add_var -> .)

    n_add_var                      shift and go to state 182

state 150

    (48) assignment -> ID n_make_assignment array_index ASSIGN expression .

    SEMICOLON       reduce using rule 48 (assignment -> ID n_make_assignment array_index ASSIGN expression .)


state 151

    (49) assignment -> ID n_make_assignment array_index ASSIGN read .

    SEMICOLON       reduce using rule 49 (assignment -> ID n_make_assignment array_index ASSIGN read .)


state 152

    (68) read -> READ ID .

    SEMICOLON       reduce using rule 68 (read -> READ ID .)


state 153

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 183
    ASSIGN          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 154

    (69) params_pass -> L_PARENS expression params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 184


state 155

    (70) params_pass -> L_PARENS expression R_PARENS .

    SEMICOLON       reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    TIMES           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    EQUALS          reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)


state 156

    (72) params_pass_aux -> COMMA . expression params_pass_aux
    (73) params_pass_aux -> COMMA . expression
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 185
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 157

    (66) expression -> exp n_eval_exp AND n_add_operator . expression
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    exp                            shift and go to state 54
    expression                     shift and go to state 186
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 158

    (75) exp -> xp n_eval_xp OR n_add_operator . exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    xp                             shift and go to state 55
    exp                            shift and go to state 187
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 159

    (77) xp -> x n_eval_x NOT_EQUAL n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 188
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 160

    (78) xp -> x n_eval_x EQUALS n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 189
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 161

    (79) xp -> x n_eval_x GREATER n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 190
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 162

    (80) xp -> x n_eval_x GREATER_EQ n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 191
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 163

    (81) xp -> x n_eval_x LESS n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 192
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 164

    (82) xp -> x n_eval_x LESS_EQ n_add_operator . xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 56
    xp                             shift and go to state 193
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 165

    (84) x -> term n_eval_term PLUS n_add_operator . x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    term                           shift and go to state 57
    x                              shift and go to state 194
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 166

    (85) x -> term n_eval_term MINUS n_add_operator . x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    term                           shift and go to state 57
    x                              shift and go to state 195
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 167

    (87) term -> factor n_eval_factor TIMES n_add_operator . term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor                         shift and go to state 60
    term                           shift and go to state 196
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 168

    (88) term -> factor n_eval_factor DIVIDE n_add_operator . term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor                         shift and go to state 60
    term                           shift and go to state 197
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 169

    (92) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom . R_PARENS

    R_PARENS        shift and go to state 198


state 170

    (64) print_aux -> expression n_print COMMA . print_aux
    (64) print_aux -> . expression n_print COMMA print_aux
    (65) print_aux -> . expression n_print
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 103
    print_aux                      shift and go to state 199
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 171

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif n_end_if
    (56) if -> IF L_PARENS expression R_PARENS n_end_condition . block else n_end_if
    (57) if -> IF L_PARENS expression R_PARENS n_end_condition . block n_end_if
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 201

    block                          shift and go to state 200

state 172

    (61) while -> WHILE n_start_while L_PARENS expression R_PARENS . n_end_condition block n_end_while
    (116) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 116 (n_end_condition -> .)

    n_end_condition                shift and go to state 202

state 173

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .)


state 174

    (19) function_type -> INT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> INT n_add_function_type .)


state 175

    (20) function_type -> FLOAT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> FLOAT n_add_function_type .)


state 176

    (21) function_type -> STRING n_add_function_type .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> STRING n_add_function_type .)


state 177

    (22) function_type -> VOID n_add_function_type .

    L_KEY_BRACKET   reduce using rule 22 (function_type -> VOID n_add_function_type .)


state 178

    (15) function_params -> type ID n_add_param array_index . COMMA function_params
    (16) function_params -> type ID n_add_param array_index .

    COMMA           shift and go to state 203
    R_PARENS        reduce using rule 16 (function_params -> type ID n_add_param array_index .)


state 179

    (17) function_params -> type ID n_add_param COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 77
    function_params                shift and go to state 204

state 180

    (23) var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .

    GLOBAL          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    INT             reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)


state 181

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 205
    SEMICOLON       reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 182

    (29) var_aux -> COMMA ID n_add_var . array_dim var_aux
    (30) var_aux -> COMMA ID n_add_var . array_dim
    (31) var_aux -> COMMA ID n_add_var . var_aux
    (32) var_aux -> COMMA ID n_add_var .
    (46) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 32 (var_aux -> COMMA ID n_add_var .)
    L_SQUARE_BRACKET shift and go to state 112
    COMMA           shift and go to state 113

    array_dim                      shift and go to state 206
    var_aux                        shift and go to state 207

state 183

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 208
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 184

    (69) params_pass -> L_PARENS expression params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    TIMES           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    PLUS            reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    MINUS           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER         reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS            reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    OR              reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    AND             reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    COMMA           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)


state 185

    (72) params_pass_aux -> COMMA expression . params_pass_aux
    (73) params_pass_aux -> COMMA expression .
    (72) params_pass_aux -> . COMMA expression params_pass_aux
    (73) params_pass_aux -> . COMMA expression

    R_PARENS        reduce using rule 73 (params_pass_aux -> COMMA expression .)
    COMMA           shift and go to state 156

    params_pass_aux                shift and go to state 209

state 186

    (66) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 187

    (75) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 188

    (77) xp -> x n_eval_x NOT_EQUAL n_add_operator xp .

    OR              reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    AND             reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    SEMICOLON       reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    COMMA           reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_PARENS        reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 77 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)


state 189

    (78) xp -> x n_eval_x EQUALS n_add_operator xp .

    OR              reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    AND             reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    SEMICOLON       reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    COMMA           reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_PARENS        reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 78 (xp -> x n_eval_x EQUALS n_add_operator xp .)


state 190

    (79) xp -> x n_eval_x GREATER n_add_operator xp .

    OR              reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)
    AND             reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)
    SEMICOLON       reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)
    COMMA           reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_PARENS        reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 79 (xp -> x n_eval_x GREATER n_add_operator xp .)


state 191

    (80) xp -> x n_eval_x GREATER_EQ n_add_operator xp .

    OR              reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    AND             reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    COMMA           reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 80 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)


state 192

    (81) xp -> x n_eval_x LESS n_add_operator xp .

    OR              reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)
    AND             reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)
    SEMICOLON       reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)
    COMMA           reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_PARENS        reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 81 (xp -> x n_eval_x LESS n_add_operator xp .)


state 193

    (82) xp -> x n_eval_x LESS_EQ n_add_operator xp .

    OR              reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    AND             reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    COMMA           reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 82 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)


state 194

    (84) x -> term n_eval_term PLUS n_add_operator x .

    NOT_EQUAL       reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    EQUALS          reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER         reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER_EQ      reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS            reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS_EQ         reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    OR              reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    AND             reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    SEMICOLON       reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    COMMA           reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    R_PARENS        reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 84 (x -> term n_eval_term PLUS n_add_operator x .)


state 195

    (85) x -> term n_eval_term MINUS n_add_operator x .

    NOT_EQUAL       reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    EQUALS          reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER         reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER_EQ      reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS            reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS_EQ         reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    OR              reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    AND             reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    SEMICOLON       reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    COMMA           reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    R_PARENS        reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 85 (x -> term n_eval_term MINUS n_add_operator x .)


state 196

    (87) term -> factor n_eval_factor TIMES n_add_operator term .

    PLUS            reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    MINUS           reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    NOT_EQUAL       reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    EQUALS          reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER         reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER_EQ      reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS            reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS_EQ         reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    OR              reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    AND             reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    SEMICOLON       reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    COMMA           reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_PARENS        reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 87 (term -> factor n_eval_factor TIMES n_add_operator term .)


state 197

    (88) term -> factor n_eval_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    NOT_EQUAL       reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    EQUALS          reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER         reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER_EQ      reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS            reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS_EQ         reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    COMMA           reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_PARENS        reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 88 (term -> factor n_eval_factor DIVIDE n_add_operator term .)


state 198

    (92) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .

    TIMES           reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    DIVIDE          reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    PLUS            reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    MINUS           reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    NOT_EQUAL       reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    EQUALS          reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER         reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER_EQ      reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS            reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS_EQ         reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    OR              reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    AND             reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    SEMICOLON       reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    COMMA           reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_PARENS        reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 92 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)


state 199

    (64) print_aux -> expression n_print COMMA print_aux .

    R_PARENS        reduce using rule 64 (print_aux -> expression n_print COMMA print_aux .)


state 200

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif n_end_if
    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block . else n_end_if
    (57) if -> IF L_PARENS expression R_PARENS n_end_condition block . n_end_if
    (58) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (59) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
    (60) else -> . ELSE n_start_else block
    (118) n_end_if -> .

    ELIF            shift and go to state 213
    ELSE            shift and go to state 214
    ID              reduce using rule 118 (n_end_if -> .)
    RETURN          reduce using rule 118 (n_end_if -> .)
    PRINT           reduce using rule 118 (n_end_if -> .)
    IF              reduce using rule 118 (n_end_if -> .)
    WHILE           reduce using rule 118 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 118 (n_end_if -> .)

    elif                           shift and go to state 210
    else                           shift and go to state 211
    n_end_if                       shift and go to state 212

state 201

    (74) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_make_assignment array_index ASSIGN expression
    (49) assignment -> . ID n_make_assignment array_index ASSIGN read
    (50) assignment -> . ID n_make_assignment ASSIGN expression
    (51) assignment -> . ID n_make_assignment ASSIGN read
    (52) function_call -> . ID n_calling_func params_pass
    (53) return -> . RETURN expression n_return
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (61) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statements                     shift and go to state 215
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 202

    (61) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition . block n_end_while
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 201

    block                          shift and go to state 216

state 203

    (15) function_params -> type ID n_add_param array_index COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 77
    function_params                shift and go to state 217

state 204

    (17) function_params -> type ID n_add_param COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID n_add_param COMMA function_params .)


state 205

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 218


state 206

    (29) var_aux -> COMMA ID n_add_var array_dim . var_aux
    (30) var_aux -> COMMA ID n_add_var array_dim .
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 30 (var_aux -> COMMA ID n_add_var array_dim .)
    COMMA           shift and go to state 113

    var_aux                        shift and go to state 219

state 207

    (31) var_aux -> COMMA ID n_add_var var_aux .

    SEMICOLON       reduce using rule 31 (var_aux -> COMMA ID n_add_var var_aux .)


state 208

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 220


state 209

    (72) params_pass_aux -> COMMA expression params_pass_aux .

    R_PARENS        reduce using rule 72 (params_pass_aux -> COMMA expression params_pass_aux .)


state 210

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . else n_end_if
    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . n_end_if
    (60) else -> . ELSE n_start_else block
    (118) n_end_if -> .

    ELSE            shift and go to state 214
    ID              reduce using rule 118 (n_end_if -> .)
    RETURN          reduce using rule 118 (n_end_if -> .)
    PRINT           reduce using rule 118 (n_end_if -> .)
    IF              reduce using rule 118 (n_end_if -> .)
    WHILE           reduce using rule 118 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 118 (n_end_if -> .)

    else                           shift and go to state 221
    n_end_if                       shift and go to state 222

state 211

    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block else . n_end_if
    (118) n_end_if -> .

    ID              reduce using rule 118 (n_end_if -> .)
    RETURN          reduce using rule 118 (n_end_if -> .)
    PRINT           reduce using rule 118 (n_end_if -> .)
    IF              reduce using rule 118 (n_end_if -> .)
    WHILE           reduce using rule 118 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 118 (n_end_if -> .)

    n_end_if                       shift and go to state 223

state 212

    (57) if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .

    ID              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    RETURN          reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    PRINT           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    IF              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    WHILE           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    R_KEY_BRACKET   reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)


state 213

    (58) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (59) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block
    (117) n_start_else -> .

    L_PARENS        reduce using rule 117 (n_start_else -> .)

    n_start_else                   shift and go to state 224

state 214

    (60) else -> ELSE . n_start_else block
    (117) n_start_else -> .

    L_KEY_BRACKET   reduce using rule 117 (n_start_else -> .)

    n_start_else                   shift and go to state 225

state 215

    (74) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 226


state 216

    (61) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block . n_end_while
    (120) n_end_while -> .

    ID              reduce using rule 120 (n_end_while -> .)
    RETURN          reduce using rule 120 (n_end_while -> .)
    PRINT           reduce using rule 120 (n_end_while -> .)
    IF              reduce using rule 120 (n_end_while -> .)
    WHILE           reduce using rule 120 (n_end_while -> .)
    R_KEY_BRACKET   reduce using rule 120 (n_end_while -> .)

    n_end_while                    shift and go to state 227

state 217

    (15) function_params -> type ID n_add_param array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID n_add_param array_index COMMA function_params .)


state 218

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 228


state 219

    (29) var_aux -> COMMA ID n_add_var array_dim var_aux .

    SEMICOLON       reduce using rule 29 (var_aux -> COMMA ID n_add_var array_dim var_aux .)


state 220

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    ASSIGN          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 221

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else . n_end_if
    (118) n_end_if -> .

    ID              reduce using rule 118 (n_end_if -> .)
    RETURN          reduce using rule 118 (n_end_if -> .)
    PRINT           reduce using rule 118 (n_end_if -> .)
    IF              reduce using rule 118 (n_end_if -> .)
    WHILE           reduce using rule 118 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 118 (n_end_if -> .)

    n_end_if                       shift and go to state 229

state 222

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .

    ID              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    RETURN          reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    PRINT           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    IF              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    WHILE           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    R_KEY_BRACKET   reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)


state 223

    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .

    ID              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    RETURN          reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    PRINT           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    IF              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    WHILE           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    R_KEY_BRACKET   reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)


state 224

    (58) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block elif
    (59) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block

    L_PARENS        shift and go to state 230


state 225

    (60) else -> ELSE n_start_else . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 201

    block                          shift and go to state 231

state 226

    (74) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 227

    (61) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .

    ID              reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    RETURN          reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    PRINT           reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    IF              reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    WHILE           reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    R_KEY_BRACKET   reduce using rule 61 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)


state 228

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 46 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 46 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 229

    (54) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .

    ID              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    RETURN          reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    PRINT           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    IF              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    WHILE           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    R_KEY_BRACKET   reduce using rule 54 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)


state 230

    (58) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block elif
    (59) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (78) xp -> . x n_eval_x EQUALS n_add_operator xp
    (79) xp -> . x n_eval_x GREATER n_add_operator xp
    (80) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (81) xp -> . x n_eval_x LESS n_add_operator xp
    (82) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (83) xp -> . x n_eval_x
    (84) x -> . term n_eval_term PLUS n_add_operator x
    (85) x -> . term n_eval_term MINUS n_add_operator x
    (86) x -> . term n_eval_term
    (87) term -> . factor n_eval_factor TIMES n_add_operator term
    (88) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (89) term -> . factor n_eval_factor
    (90) factor -> . NOT factor_aux
    (91) factor -> . factor_aux
    (92) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (93) factor_aux -> . PLUS const
    (94) factor_aux -> . MINUS const
    (95) factor_aux -> . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_I n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass
    (102) array_access -> . ID array_index

    NOT             shift and go to state 61
    L_PARENS        shift and go to state 63
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 232
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 60
    factor_aux                     shift and go to state 62
    const                          shift and go to state 64
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 231

    (60) else -> ELSE n_start_else block .

    ID              reduce using rule 60 (else -> ELSE n_start_else block .)
    RETURN          reduce using rule 60 (else -> ELSE n_start_else block .)
    PRINT           reduce using rule 60 (else -> ELSE n_start_else block .)
    IF              reduce using rule 60 (else -> ELSE n_start_else block .)
    WHILE           reduce using rule 60 (else -> ELSE n_start_else block .)
    R_KEY_BRACKET   reduce using rule 60 (else -> ELSE n_start_else block .)


state 232

    (58) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block elif
    (59) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block

    R_PARENS        shift and go to state 233


state 233

    (58) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block elif
    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block
    (116) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 116 (n_end_condition -> .)

    n_end_condition                shift and go to state 234

state 234

    (58) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block elif
    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 201

    block                          shift and go to state 235

state 235

    (58) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block . elif
    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .
    (58) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (59) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block

    ELSE            reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ID              reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    RETURN          reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    PRINT           reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    IF              reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    WHILE           reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    R_KEY_BRACKET   reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ELIF            shift and go to state 213

    elif                           shift and go to state 236

state 236

    (58) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .

    ELSE            reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    ID              reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    RETURN          reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    PRINT           reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    IF              reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    WHILE           reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    R_KEY_BRACKET   reduce using rule 58 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)

