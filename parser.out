Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body
Rule 6     main -> FUNCTION MAIN function_body
Rule 7     function_header -> FUNCTION ID L_PARENS function_header_aux R_PARENS COLON function_type
Rule 8     function_header_aux -> function_params
Rule 9     function_header_aux -> empty
Rule 10    function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET
Rule 11    function_body_aux -> var function_body_aux
Rule 12    function_body_aux -> empty
Rule 13    function_body_aux_2 -> statement function_body_aux_2
Rule 14    function_body_aux_2 -> statement
Rule 15    function_params -> type ID function_params_aux function_params_aux_2
Rule 16    function_params_aux -> array_index
Rule 17    function_params_aux -> empty
Rule 18    function_params_aux_2 -> COMMA function_params
Rule 19    function_params_aux_2 -> empty
Rule 20    function_type -> type
Rule 21    function_type -> VOID
Rule 22    var -> type ID var_aux var_aux_2
Rule 23    var_aux -> array_dim
Rule 24    var_aux -> empty
Rule 25    var_aux_2 -> COMMA ID var_aux var_aux_2
Rule 26    var_aux_2 -> empty
Rule 27    statement -> statement_aux SEMICOLON
Rule 28    statement_aux -> assignment
Rule 29    statement_aux -> function_call
Rule 30    statement_aux -> return
Rule 31    statement_aux -> if
Rule 32    statement_aux -> while
Rule 33    statement_aux -> print
Rule 34    type -> INT
Rule 35    type -> FLOAT
Rule 36    type -> STRING
Rule 37    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 38    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 39    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 40    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 41    assignment -> ID assignment_aux EQUALS assignment_aux_2
Rule 42    assignment_aux -> array_index
Rule 43    assignment_aux -> empty
Rule 44    assignment_aux_2 -> expression
Rule 45    assignment_aux_2 -> read
Rule 46    function_call -> ID params_pass
Rule 47    return -> RETURN expression
Rule 48    if -> IF L_PARENS expression R_PARENS block elif else
Rule 49    elif -> ELIF L_PARENS expression R_PARENS block elif
Rule 50    elif -> empty
Rule 51    else -> ELSE block
Rule 52    else -> empty
Rule 53    while -> WHILE L_PARENS expression R_PARENS block
Rule 54    print -> PRINT L_PARENS print_aux R_PARENS
Rule 55    print_aux -> CONST_STRING print_aux_2
Rule 56    print_aux -> ID print_aux_2
Rule 57    print_aux -> empty
Rule 58    print_aux_2 -> COMMA ID print_aux_2
Rule 59    print_aux_2 -> COMMA CONST_STRING print_aux_2
Rule 60    print_aux_2 -> empty
Rule 61    expression -> exp expression_aux
Rule 62    expression_aux -> AND exp expression_aux
Rule 63    expression_aux -> empty
Rule 64    read -> READ ID
Rule 65    params_pass -> L_PARENS params_pass_aux R_PARENS
Rule 66    params_pass_aux -> expression params_pass_aux_2
Rule 67    params_pass_aux -> empty
Rule 68    params_pass_aux_2 -> COMMA expression params_pass_aux_2
Rule 69    params_pass_aux_2 -> empty
Rule 70    block -> L_KEY_BRACKET statement R_KEY_BRACKET
Rule 71    exp -> xp exp_aux
Rule 72    exp_aux -> OR xp exp_aux
Rule 73    exp_aux -> empty
Rule 74    xp -> x xp_aux
Rule 75    xp_aux -> log_op x
Rule 76    xp_aux -> empty
Rule 77    x -> term x_aux
Rule 78    x_aux -> PLUS term x_aux
Rule 79    x_aux -> MINUS term x_aux
Rule 80    x_aux -> empty
Rule 81    log_op -> NOT_EQUAL
Rule 82    log_op -> IS_EQUAL
Rule 83    log_op -> GREATER
Rule 84    log_op -> GREATER_EQ
Rule 85    log_op -> LESS
Rule 86    log_op -> LESS_EQ
Rule 87    term -> factor term_aux
Rule 88    term_aux -> TIMES factor term_aux
Rule 89    term_aux -> DIVIDE factor term_aux
Rule 90    term_aux -> empty
Rule 91    factor -> factor_aux factor_aux_2
Rule 92    factor_aux -> NOT
Rule 93    factor_aux -> empty
Rule 94    factor_aux_2 -> L_PARENS expression R_PARENS
Rule 95    factor_aux_2 -> factor_aux_3 const
Rule 96    factor_aux_3 -> PLUS
Rule 97    factor_aux_3 -> MINUS
Rule 98    factor_aux_3 -> empty
Rule 99    const -> ID
Rule 100   const -> CONST_I
Rule 101   const -> CONST_F
Rule 102   const -> CONST_STRING
Rule 103   const -> function_call
Rule 104   const -> array_access
Rule 105   array_access -> ID array_index
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AND                  : 62
COLON                : 7
COMMA                : 18 25 58 59 68
CONST_F              : 101
CONST_I              : 39 39 40 100
CONST_STRING         : 55 59 102
DIVIDE               : 89
ELIF                 : 49
ELSE                 : 51
EQUALS               : 41
FLOAT                : 35
FUNCTION             : 6 7
GREATER              : 83
GREATER_EQ           : 84
ID                   : 7 15 22 25 41 46 56 58 64 99 105
IF                   : 48
INT                  : 34
IS_EQUAL             : 82
LESS                 : 85
LESS_EQ              : 86
L_KEY_BRACKET        : 10 70
L_PARENS             : 7 48 49 53 54 65 94
L_SQUARE_BRACKET     : 37 37 38 39 39 40
MAIN                 : 6
MINUS                : 79 97
NOT                  : 92
NOT_EQUAL            : 81
OR                   : 72
PLUS                 : 78 96
PRINT                : 54
READ                 : 64
RETURN               : 47
R_KEY_BRACKET        : 10 70
R_PARENS             : 7 48 49 53 54 65 94
R_SQUARE_BRACKET     : 37 37 38 39 39 40
SEMICOLON            : 27
STRING               : 36
TIMES                : 88
VOID                 : 21
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

array_access         : 104
array_dim            : 23
array_index          : 16 42 105
assignment           : 28
assignment_aux       : 41
assignment_aux_2     : 41
block                : 48 49 51 53
const                : 95
elif                 : 48 49
else                 : 48
empty                : 9 12 17 19 24 26 43 50 52 57 60 63 67 69 73 76 80 90 93 98
exp                  : 61 62
exp_aux              : 71 72
expression           : 37 37 38 44 47 48 49 53 66 68 94
expression_aux       : 61 62
factor               : 87 88 89
factor_aux           : 91
factor_aux_2         : 91
factor_aux_3         : 95
function             : 3 4
function_body        : 5 6
function_body_aux    : 10 11
function_body_aux_2  : 10 13
function_call        : 29 103
function_header      : 5
function_header_aux  : 7
function_params      : 8 18
function_params_aux  : 15
function_params_aux_2 : 15
function_type        : 7
if                   : 31
log_op               : 75
main                 : 1 2
params_pass          : 46
params_pass_aux      : 65
params_pass_aux_2    : 66 68
print                : 33
print_aux            : 54
print_aux_2          : 55 56 58 59
program              : 0
program_aux          : 1 3
read                 : 45
return               : 30
statement            : 13 14 70
statement_aux        : 27
term                 : 77 78 79
term_aux             : 87 88 89
type                 : 15 20 22
var                  : 11
var_aux              : 22 25
var_aux_2            : 22 25
while                : 32
x                    : 74 75
x_aux                : 77 78 79
xp                   : 71 72
xp_aux               : 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_header_aux R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_header_aux R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN function_body
    (7) function_header -> FUNCTION . ID L_PARENS function_header_aux R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body
    (10) function_body -> . L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . function_body
    (10) function_body -> . L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . L_PARENS function_header_aux R_PARENS COLON function_type

    L_PARENS        shift and go to state 14


state 11

    (5) function -> function_header function_body .

    FUNCTION        reduce using rule 5 (function -> function_header function_body .)


state 12

    (10) function_body -> L_KEY_BRACKET . function_body_aux function_body_aux_2 R_KEY_BRACKET
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . empty
    (22) var -> . type ID var_aux var_aux_2
    (106) empty -> .
    (34) type -> . INT
    (35) type -> . FLOAT
    (36) type -> . STRING

    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    function_body_aux              shift and go to state 15
    var                            shift and go to state 16
    empty                          shift and go to state 17
    type                           shift and go to state 18

state 13

    (6) main -> FUNCTION MAIN function_body .

    $end            reduce using rule 6 (main -> FUNCTION MAIN function_body .)


state 14

    (7) function_header -> FUNCTION ID L_PARENS . function_header_aux R_PARENS COLON function_type
    (8) function_header_aux -> . function_params
    (9) function_header_aux -> . empty
    (15) function_params -> . type ID function_params_aux function_params_aux_2
    (106) empty -> .
    (34) type -> . INT
    (35) type -> . FLOAT
    (36) type -> . STRING

    R_PARENS        reduce using rule 106 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    function_header_aux            shift and go to state 22
    function_params                shift and go to state 23
    empty                          shift and go to state 24
    type                           shift and go to state 25

state 15

    (10) function_body -> L_KEY_BRACKET function_body_aux . function_body_aux_2 R_KEY_BRACKET
    (13) function_body_aux_2 -> . statement function_body_aux_2
    (14) function_body_aux_2 -> . statement
    (27) statement -> . statement_aux SEMICOLON
    (28) statement_aux -> . assignment
    (29) statement_aux -> . function_call
    (30) statement_aux -> . return
    (31) statement_aux -> . if
    (32) statement_aux -> . while
    (33) statement_aux -> . print
    (41) assignment -> . ID assignment_aux EQUALS assignment_aux_2
    (46) function_call -> . ID params_pass
    (47) return -> . RETURN expression
    (48) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) while -> . WHILE L_PARENS expression R_PARENS block
    (54) print -> . PRINT L_PARENS print_aux R_PARENS

    ID              shift and go to state 35
    RETURN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    PRINT           shift and go to state 39

    function_body_aux_2            shift and go to state 26
    statement                      shift and go to state 27
    statement_aux                  shift and go to state 28
    assignment                     shift and go to state 29
    function_call                  shift and go to state 30
    return                         shift and go to state 31
    if                             shift and go to state 32
    while                          shift and go to state 33
    print                          shift and go to state 34

state 16

    (11) function_body_aux -> var . function_body_aux
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . empty
    (22) var -> . type ID var_aux var_aux_2
    (106) empty -> .
    (34) type -> . INT
    (35) type -> . FLOAT
    (36) type -> . STRING

    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    var                            shift and go to state 16
    function_body_aux              shift and go to state 40
    empty                          shift and go to state 17
    type                           shift and go to state 18

state 17

    (12) function_body_aux -> empty .

    ID              reduce using rule 12 (function_body_aux -> empty .)
    RETURN          reduce using rule 12 (function_body_aux -> empty .)
    IF              reduce using rule 12 (function_body_aux -> empty .)
    WHILE           reduce using rule 12 (function_body_aux -> empty .)
    PRINT           reduce using rule 12 (function_body_aux -> empty .)


state 18

    (22) var -> type . ID var_aux var_aux_2

    ID              shift and go to state 41


state 19

    (34) type -> INT .

    ID              reduce using rule 34 (type -> INT .)
    L_KEY_BRACKET   reduce using rule 34 (type -> INT .)


state 20

    (35) type -> FLOAT .

    ID              reduce using rule 35 (type -> FLOAT .)
    L_KEY_BRACKET   reduce using rule 35 (type -> FLOAT .)


state 21

    (36) type -> STRING .

    ID              reduce using rule 36 (type -> STRING .)
    L_KEY_BRACKET   reduce using rule 36 (type -> STRING .)


state 22

    (7) function_header -> FUNCTION ID L_PARENS function_header_aux . R_PARENS COLON function_type

    R_PARENS        shift and go to state 42


state 23

    (8) function_header_aux -> function_params .

    R_PARENS        reduce using rule 8 (function_header_aux -> function_params .)


state 24

    (9) function_header_aux -> empty .

    R_PARENS        reduce using rule 9 (function_header_aux -> empty .)


state 25

    (15) function_params -> type . ID function_params_aux function_params_aux_2

    ID              shift and go to state 43


state 26

    (10) function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 44


state 27

    (13) function_body_aux_2 -> statement . function_body_aux_2
    (14) function_body_aux_2 -> statement .
    (13) function_body_aux_2 -> . statement function_body_aux_2
    (14) function_body_aux_2 -> . statement
    (27) statement -> . statement_aux SEMICOLON
    (28) statement_aux -> . assignment
    (29) statement_aux -> . function_call
    (30) statement_aux -> . return
    (31) statement_aux -> . if
    (32) statement_aux -> . while
    (33) statement_aux -> . print
    (41) assignment -> . ID assignment_aux EQUALS assignment_aux_2
    (46) function_call -> . ID params_pass
    (47) return -> . RETURN expression
    (48) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) while -> . WHILE L_PARENS expression R_PARENS block
    (54) print -> . PRINT L_PARENS print_aux R_PARENS

    R_KEY_BRACKET   reduce using rule 14 (function_body_aux_2 -> statement .)
    ID              shift and go to state 35
    RETURN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 27
    function_body_aux_2            shift and go to state 45
    statement_aux                  shift and go to state 28
    assignment                     shift and go to state 29
    function_call                  shift and go to state 30
    return                         shift and go to state 31
    if                             shift and go to state 32
    while                          shift and go to state 33
    print                          shift and go to state 34

state 28

    (27) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 46


state 29

    (28) statement_aux -> assignment .

    SEMICOLON       reduce using rule 28 (statement_aux -> assignment .)


state 30

    (29) statement_aux -> function_call .

    SEMICOLON       reduce using rule 29 (statement_aux -> function_call .)


state 31

    (30) statement_aux -> return .

    SEMICOLON       reduce using rule 30 (statement_aux -> return .)


state 32

    (31) statement_aux -> if .

    SEMICOLON       reduce using rule 31 (statement_aux -> if .)


state 33

    (32) statement_aux -> while .

    SEMICOLON       reduce using rule 32 (statement_aux -> while .)


state 34

    (33) statement_aux -> print .

    SEMICOLON       reduce using rule 33 (statement_aux -> print .)


state 35

    (41) assignment -> ID . assignment_aux EQUALS assignment_aux_2
    (46) function_call -> ID . params_pass
    (42) assignment_aux -> . array_index
    (43) assignment_aux -> . empty
    (65) params_pass -> . L_PARENS params_pass_aux R_PARENS
    (37) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (106) empty -> .

    L_PARENS        shift and go to state 51
    L_SQUARE_BRACKET shift and go to state 52
    EQUALS          reduce using rule 106 (empty -> .)

    assignment_aux                 shift and go to state 47
    params_pass                    shift and go to state 48
    array_index                    shift and go to state 49
    empty                          shift and go to state 50

state 36

    (47) return -> RETURN . expression
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 53
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 37

    (48) if -> IF . L_PARENS expression R_PARENS block elif else

    L_PARENS        shift and go to state 62


state 38

    (53) while -> WHILE . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 63


state 39

    (54) print -> PRINT . L_PARENS print_aux R_PARENS

    L_PARENS        shift and go to state 64


state 40

    (11) function_body_aux -> var function_body_aux .

    ID              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    RETURN          reduce using rule 11 (function_body_aux -> var function_body_aux .)
    IF              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    WHILE           reduce using rule 11 (function_body_aux -> var function_body_aux .)
    PRINT           reduce using rule 11 (function_body_aux -> var function_body_aux .)


state 41

    (22) var -> type ID . var_aux var_aux_2
    (23) var_aux -> . array_dim
    (24) var_aux -> . empty
    (39) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (40) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (106) empty -> .

    L_SQUARE_BRACKET shift and go to state 68
    COMMA           reduce using rule 106 (empty -> .)
    INT             reduce using rule 106 (empty -> .)
    FLOAT           reduce using rule 106 (empty -> .)
    STRING          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)

    var_aux                        shift and go to state 65
    array_dim                      shift and go to state 66
    empty                          shift and go to state 67

state 42

    (7) function_header -> FUNCTION ID L_PARENS function_header_aux R_PARENS . COLON function_type

    COLON           shift and go to state 69


state 43

    (15) function_params -> type ID . function_params_aux function_params_aux_2
    (16) function_params_aux -> . array_index
    (17) function_params_aux -> . empty
    (37) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (106) empty -> .

    L_SQUARE_BRACKET shift and go to state 52
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)

    function_params_aux            shift and go to state 70
    array_index                    shift and go to state 71
    empty                          shift and go to state 72

state 44

    (10) function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .)


state 45

    (13) function_body_aux_2 -> statement function_body_aux_2 .

    R_KEY_BRACKET   reduce using rule 13 (function_body_aux_2 -> statement function_body_aux_2 .)


state 46

    (27) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 27 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 27 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 27 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 27 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 27 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 27 (statement -> statement_aux SEMICOLON .)


state 47

    (41) assignment -> ID assignment_aux . EQUALS assignment_aux_2

    EQUALS          shift and go to state 73


state 48

    (46) function_call -> ID params_pass .

    SEMICOLON       reduce using rule 46 (function_call -> ID params_pass .)
    TIMES           reduce using rule 46 (function_call -> ID params_pass .)
    DIVIDE          reduce using rule 46 (function_call -> ID params_pass .)
    PLUS            reduce using rule 46 (function_call -> ID params_pass .)
    MINUS           reduce using rule 46 (function_call -> ID params_pass .)
    NOT_EQUAL       reduce using rule 46 (function_call -> ID params_pass .)
    IS_EQUAL        reduce using rule 46 (function_call -> ID params_pass .)
    GREATER         reduce using rule 46 (function_call -> ID params_pass .)
    GREATER_EQ      reduce using rule 46 (function_call -> ID params_pass .)
    LESS            reduce using rule 46 (function_call -> ID params_pass .)
    LESS_EQ         reduce using rule 46 (function_call -> ID params_pass .)
    OR              reduce using rule 46 (function_call -> ID params_pass .)
    AND             reduce using rule 46 (function_call -> ID params_pass .)
    COMMA           reduce using rule 46 (function_call -> ID params_pass .)
    R_PARENS        reduce using rule 46 (function_call -> ID params_pass .)
    R_SQUARE_BRACKET reduce using rule 46 (function_call -> ID params_pass .)


state 49

    (42) assignment_aux -> array_index .

    EQUALS          reduce using rule 42 (assignment_aux -> array_index .)


state 50

    (43) assignment_aux -> empty .

    EQUALS          reduce using rule 43 (assignment_aux -> empty .)


state 51

    (65) params_pass -> L_PARENS . params_pass_aux R_PARENS
    (66) params_pass_aux -> . expression params_pass_aux_2
    (67) params_pass_aux -> . empty
    (61) expression -> . exp expression_aux
    (106) empty -> .
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty

    R_PARENS        reduce using rule 106 (empty -> .)
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)
    NOT             shift and go to state 60

    params_pass_aux                shift and go to state 74
    expression                     shift and go to state 75
    empty                          shift and go to state 76
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59

state 52

    (37) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 77
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 53

    (47) return -> RETURN expression .

    SEMICOLON       reduce using rule 47 (return -> RETURN expression .)


state 54

    (61) expression -> exp . expression_aux
    (62) expression_aux -> . AND exp expression_aux
    (63) expression_aux -> . empty
    (106) empty -> .

    AND             shift and go to state 79
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    expression_aux                 shift and go to state 78
    empty                          shift and go to state 80

state 55

    (71) exp -> xp . exp_aux
    (72) exp_aux -> . OR xp exp_aux
    (73) exp_aux -> . empty
    (106) empty -> .

    OR              shift and go to state 82
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    exp_aux                        shift and go to state 81
    empty                          shift and go to state 83

state 56

    (74) xp -> x . xp_aux
    (75) xp_aux -> . log_op x
    (76) xp_aux -> . empty
    (81) log_op -> . NOT_EQUAL
    (82) log_op -> . IS_EQUAL
    (83) log_op -> . GREATER
    (84) log_op -> . GREATER_EQ
    (85) log_op -> . LESS
    (86) log_op -> . LESS_EQ
    (106) empty -> .

    NOT_EQUAL       shift and go to state 87
    IS_EQUAL        shift and go to state 88
    GREATER         shift and go to state 89
    GREATER_EQ      shift and go to state 90
    LESS            shift and go to state 91
    LESS_EQ         shift and go to state 92
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    xp_aux                         shift and go to state 84
    log_op                         shift and go to state 85
    empty                          shift and go to state 86

state 57

    (77) x -> term . x_aux
    (78) x_aux -> . PLUS term x_aux
    (79) x_aux -> . MINUS term x_aux
    (80) x_aux -> . empty
    (106) empty -> .

    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    x_aux                          shift and go to state 93
    empty                          shift and go to state 96

state 58

    (87) term -> factor . term_aux
    (88) term_aux -> . TIMES factor term_aux
    (89) term_aux -> . DIVIDE factor term_aux
    (90) term_aux -> . empty
    (106) empty -> .

    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    term_aux                       shift and go to state 97
    empty                          shift and go to state 100

state 59

    (91) factor -> factor_aux . factor_aux_2
    (94) factor_aux_2 -> . L_PARENS expression R_PARENS
    (95) factor_aux_2 -> . factor_aux_3 const
    (96) factor_aux_3 -> . PLUS
    (97) factor_aux_3 -> . MINUS
    (98) factor_aux_3 -> . empty
    (106) empty -> .

    L_PARENS        shift and go to state 102
    PLUS            shift and go to state 104
    MINUS           shift and go to state 105
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    factor_aux_2                   shift and go to state 101
    factor_aux_3                   shift and go to state 103
    empty                          shift and go to state 106

state 60

    (92) factor_aux -> NOT .

    L_PARENS        reduce using rule 92 (factor_aux -> NOT .)
    PLUS            reduce using rule 92 (factor_aux -> NOT .)
    MINUS           reduce using rule 92 (factor_aux -> NOT .)
    ID              reduce using rule 92 (factor_aux -> NOT .)
    CONST_I         reduce using rule 92 (factor_aux -> NOT .)
    CONST_F         reduce using rule 92 (factor_aux -> NOT .)
    CONST_STRING    reduce using rule 92 (factor_aux -> NOT .)


state 61

    (93) factor_aux -> empty .

    L_PARENS        reduce using rule 93 (factor_aux -> empty .)
    PLUS            reduce using rule 93 (factor_aux -> empty .)
    MINUS           reduce using rule 93 (factor_aux -> empty .)
    ID              reduce using rule 93 (factor_aux -> empty .)
    CONST_I         reduce using rule 93 (factor_aux -> empty .)
    CONST_F         reduce using rule 93 (factor_aux -> empty .)
    CONST_STRING    reduce using rule 93 (factor_aux -> empty .)


state 62

    (48) if -> IF L_PARENS . expression R_PARENS block elif else
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 107
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 63

    (53) while -> WHILE L_PARENS . expression R_PARENS block
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 108
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 64

    (54) print -> PRINT L_PARENS . print_aux R_PARENS
    (55) print_aux -> . CONST_STRING print_aux_2
    (56) print_aux -> . ID print_aux_2
    (57) print_aux -> . empty
    (106) empty -> .

    CONST_STRING    shift and go to state 110
    ID              shift and go to state 111
    R_PARENS        reduce using rule 106 (empty -> .)

    print_aux                      shift and go to state 109
    empty                          shift and go to state 112

state 65

    (22) var -> type ID var_aux . var_aux_2
    (25) var_aux_2 -> . COMMA ID var_aux var_aux_2
    (26) var_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 114
    INT             reduce using rule 106 (empty -> .)
    FLOAT           reduce using rule 106 (empty -> .)
    STRING          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)

    var_aux_2                      shift and go to state 113
    empty                          shift and go to state 115

state 66

    (23) var_aux -> array_dim .

    COMMA           reduce using rule 23 (var_aux -> array_dim .)
    INT             reduce using rule 23 (var_aux -> array_dim .)
    FLOAT           reduce using rule 23 (var_aux -> array_dim .)
    STRING          reduce using rule 23 (var_aux -> array_dim .)
    ID              reduce using rule 23 (var_aux -> array_dim .)
    RETURN          reduce using rule 23 (var_aux -> array_dim .)
    IF              reduce using rule 23 (var_aux -> array_dim .)
    WHILE           reduce using rule 23 (var_aux -> array_dim .)
    PRINT           reduce using rule 23 (var_aux -> array_dim .)


state 67

    (24) var_aux -> empty .

    COMMA           reduce using rule 24 (var_aux -> empty .)
    INT             reduce using rule 24 (var_aux -> empty .)
    FLOAT           reduce using rule 24 (var_aux -> empty .)
    STRING          reduce using rule 24 (var_aux -> empty .)
    ID              reduce using rule 24 (var_aux -> empty .)
    RETURN          reduce using rule 24 (var_aux -> empty .)
    IF              reduce using rule 24 (var_aux -> empty .)
    WHILE           reduce using rule 24 (var_aux -> empty .)
    PRINT           reduce using rule 24 (var_aux -> empty .)


state 68

    (39) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (40) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 116


state 69

    (7) function_header -> FUNCTION ID L_PARENS function_header_aux R_PARENS COLON . function_type
    (20) function_type -> . type
    (21) function_type -> . VOID
    (34) type -> . INT
    (35) type -> . FLOAT
    (36) type -> . STRING

    VOID            shift and go to state 119
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    function_type                  shift and go to state 117
    type                           shift and go to state 118

state 70

    (15) function_params -> type ID function_params_aux . function_params_aux_2
    (18) function_params_aux_2 -> . COMMA function_params
    (19) function_params_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 121
    R_PARENS        reduce using rule 106 (empty -> .)

    function_params_aux_2          shift and go to state 120
    empty                          shift and go to state 122

state 71

    (16) function_params_aux -> array_index .

    COMMA           reduce using rule 16 (function_params_aux -> array_index .)
    R_PARENS        reduce using rule 16 (function_params_aux -> array_index .)


state 72

    (17) function_params_aux -> empty .

    COMMA           reduce using rule 17 (function_params_aux -> empty .)
    R_PARENS        reduce using rule 17 (function_params_aux -> empty .)


state 73

    (41) assignment -> ID assignment_aux EQUALS . assignment_aux_2
    (44) assignment_aux_2 -> . expression
    (45) assignment_aux_2 -> . read
    (61) expression -> . exp expression_aux
    (64) read -> . READ ID
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    READ            shift and go to state 126
    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    assignment_aux_2               shift and go to state 123
    expression                     shift and go to state 124
    read                           shift and go to state 125
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 74

    (65) params_pass -> L_PARENS params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 127


state 75

    (66) params_pass_aux -> expression . params_pass_aux_2
    (68) params_pass_aux_2 -> . COMMA expression params_pass_aux_2
    (69) params_pass_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 129
    R_PARENS        reduce using rule 106 (empty -> .)

    params_pass_aux_2              shift and go to state 128
    empty                          shift and go to state 130

state 76

    (67) params_pass_aux -> empty .
    (93) factor_aux -> empty .

    R_PARENS        reduce using rule 67 (params_pass_aux -> empty .)
    L_PARENS        reduce using rule 93 (factor_aux -> empty .)
    PLUS            reduce using rule 93 (factor_aux -> empty .)
    MINUS           reduce using rule 93 (factor_aux -> empty .)
    ID              reduce using rule 93 (factor_aux -> empty .)
    CONST_I         reduce using rule 93 (factor_aux -> empty .)
    CONST_F         reduce using rule 93 (factor_aux -> empty .)
    CONST_STRING    reduce using rule 93 (factor_aux -> empty .)


state 77

    (37) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 131


state 78

    (61) expression -> exp expression_aux .

    SEMICOLON       reduce using rule 61 (expression -> exp expression_aux .)
    COMMA           reduce using rule 61 (expression -> exp expression_aux .)
    R_PARENS        reduce using rule 61 (expression -> exp expression_aux .)
    R_SQUARE_BRACKET reduce using rule 61 (expression -> exp expression_aux .)


state 79

    (62) expression_aux -> AND . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    exp                            shift and go to state 132
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 80

    (63) expression_aux -> empty .

    SEMICOLON       reduce using rule 63 (expression_aux -> empty .)
    COMMA           reduce using rule 63 (expression_aux -> empty .)
    R_PARENS        reduce using rule 63 (expression_aux -> empty .)
    R_SQUARE_BRACKET reduce using rule 63 (expression_aux -> empty .)


state 81

    (71) exp -> xp exp_aux .

    AND             reduce using rule 71 (exp -> xp exp_aux .)
    SEMICOLON       reduce using rule 71 (exp -> xp exp_aux .)
    COMMA           reduce using rule 71 (exp -> xp exp_aux .)
    R_PARENS        reduce using rule 71 (exp -> xp exp_aux .)
    R_SQUARE_BRACKET reduce using rule 71 (exp -> xp exp_aux .)


state 82

    (72) exp_aux -> OR . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    xp                             shift and go to state 133
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 83

    (73) exp_aux -> empty .

    AND             reduce using rule 73 (exp_aux -> empty .)
    SEMICOLON       reduce using rule 73 (exp_aux -> empty .)
    COMMA           reduce using rule 73 (exp_aux -> empty .)
    R_PARENS        reduce using rule 73 (exp_aux -> empty .)
    R_SQUARE_BRACKET reduce using rule 73 (exp_aux -> empty .)


state 84

    (74) xp -> x xp_aux .

    OR              reduce using rule 74 (xp -> x xp_aux .)
    AND             reduce using rule 74 (xp -> x xp_aux .)
    SEMICOLON       reduce using rule 74 (xp -> x xp_aux .)
    COMMA           reduce using rule 74 (xp -> x xp_aux .)
    R_PARENS        reduce using rule 74 (xp -> x xp_aux .)
    R_SQUARE_BRACKET reduce using rule 74 (xp -> x xp_aux .)


state 85

    (75) xp_aux -> log_op . x
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    x                              shift and go to state 134
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 86

    (76) xp_aux -> empty .

    OR              reduce using rule 76 (xp_aux -> empty .)
    AND             reduce using rule 76 (xp_aux -> empty .)
    SEMICOLON       reduce using rule 76 (xp_aux -> empty .)
    COMMA           reduce using rule 76 (xp_aux -> empty .)
    R_PARENS        reduce using rule 76 (xp_aux -> empty .)
    R_SQUARE_BRACKET reduce using rule 76 (xp_aux -> empty .)


state 87

    (81) log_op -> NOT_EQUAL .

    NOT             reduce using rule 81 (log_op -> NOT_EQUAL .)
    L_PARENS        reduce using rule 81 (log_op -> NOT_EQUAL .)
    PLUS            reduce using rule 81 (log_op -> NOT_EQUAL .)
    MINUS           reduce using rule 81 (log_op -> NOT_EQUAL .)
    ID              reduce using rule 81 (log_op -> NOT_EQUAL .)
    CONST_I         reduce using rule 81 (log_op -> NOT_EQUAL .)
    CONST_F         reduce using rule 81 (log_op -> NOT_EQUAL .)
    CONST_STRING    reduce using rule 81 (log_op -> NOT_EQUAL .)


state 88

    (82) log_op -> IS_EQUAL .

    NOT             reduce using rule 82 (log_op -> IS_EQUAL .)
    L_PARENS        reduce using rule 82 (log_op -> IS_EQUAL .)
    PLUS            reduce using rule 82 (log_op -> IS_EQUAL .)
    MINUS           reduce using rule 82 (log_op -> IS_EQUAL .)
    ID              reduce using rule 82 (log_op -> IS_EQUAL .)
    CONST_I         reduce using rule 82 (log_op -> IS_EQUAL .)
    CONST_F         reduce using rule 82 (log_op -> IS_EQUAL .)
    CONST_STRING    reduce using rule 82 (log_op -> IS_EQUAL .)


state 89

    (83) log_op -> GREATER .

    NOT             reduce using rule 83 (log_op -> GREATER .)
    L_PARENS        reduce using rule 83 (log_op -> GREATER .)
    PLUS            reduce using rule 83 (log_op -> GREATER .)
    MINUS           reduce using rule 83 (log_op -> GREATER .)
    ID              reduce using rule 83 (log_op -> GREATER .)
    CONST_I         reduce using rule 83 (log_op -> GREATER .)
    CONST_F         reduce using rule 83 (log_op -> GREATER .)
    CONST_STRING    reduce using rule 83 (log_op -> GREATER .)


state 90

    (84) log_op -> GREATER_EQ .

    NOT             reduce using rule 84 (log_op -> GREATER_EQ .)
    L_PARENS        reduce using rule 84 (log_op -> GREATER_EQ .)
    PLUS            reduce using rule 84 (log_op -> GREATER_EQ .)
    MINUS           reduce using rule 84 (log_op -> GREATER_EQ .)
    ID              reduce using rule 84 (log_op -> GREATER_EQ .)
    CONST_I         reduce using rule 84 (log_op -> GREATER_EQ .)
    CONST_F         reduce using rule 84 (log_op -> GREATER_EQ .)
    CONST_STRING    reduce using rule 84 (log_op -> GREATER_EQ .)


state 91

    (85) log_op -> LESS .

    NOT             reduce using rule 85 (log_op -> LESS .)
    L_PARENS        reduce using rule 85 (log_op -> LESS .)
    PLUS            reduce using rule 85 (log_op -> LESS .)
    MINUS           reduce using rule 85 (log_op -> LESS .)
    ID              reduce using rule 85 (log_op -> LESS .)
    CONST_I         reduce using rule 85 (log_op -> LESS .)
    CONST_F         reduce using rule 85 (log_op -> LESS .)
    CONST_STRING    reduce using rule 85 (log_op -> LESS .)


state 92

    (86) log_op -> LESS_EQ .

    NOT             reduce using rule 86 (log_op -> LESS_EQ .)
    L_PARENS        reduce using rule 86 (log_op -> LESS_EQ .)
    PLUS            reduce using rule 86 (log_op -> LESS_EQ .)
    MINUS           reduce using rule 86 (log_op -> LESS_EQ .)
    ID              reduce using rule 86 (log_op -> LESS_EQ .)
    CONST_I         reduce using rule 86 (log_op -> LESS_EQ .)
    CONST_F         reduce using rule 86 (log_op -> LESS_EQ .)
    CONST_STRING    reduce using rule 86 (log_op -> LESS_EQ .)


state 93

    (77) x -> term x_aux .

    NOT_EQUAL       reduce using rule 77 (x -> term x_aux .)
    IS_EQUAL        reduce using rule 77 (x -> term x_aux .)
    GREATER         reduce using rule 77 (x -> term x_aux .)
    GREATER_EQ      reduce using rule 77 (x -> term x_aux .)
    LESS            reduce using rule 77 (x -> term x_aux .)
    LESS_EQ         reduce using rule 77 (x -> term x_aux .)
    OR              reduce using rule 77 (x -> term x_aux .)
    AND             reduce using rule 77 (x -> term x_aux .)
    SEMICOLON       reduce using rule 77 (x -> term x_aux .)
    COMMA           reduce using rule 77 (x -> term x_aux .)
    R_PARENS        reduce using rule 77 (x -> term x_aux .)
    R_SQUARE_BRACKET reduce using rule 77 (x -> term x_aux .)


state 94

    (78) x_aux -> PLUS . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    term                           shift and go to state 135
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 95

    (79) x_aux -> MINUS . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    term                           shift and go to state 136
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 96

    (80) x_aux -> empty .

    NOT_EQUAL       reduce using rule 80 (x_aux -> empty .)
    IS_EQUAL        reduce using rule 80 (x_aux -> empty .)
    GREATER         reduce using rule 80 (x_aux -> empty .)
    GREATER_EQ      reduce using rule 80 (x_aux -> empty .)
    LESS            reduce using rule 80 (x_aux -> empty .)
    LESS_EQ         reduce using rule 80 (x_aux -> empty .)
    OR              reduce using rule 80 (x_aux -> empty .)
    AND             reduce using rule 80 (x_aux -> empty .)
    SEMICOLON       reduce using rule 80 (x_aux -> empty .)
    COMMA           reduce using rule 80 (x_aux -> empty .)
    R_PARENS        reduce using rule 80 (x_aux -> empty .)
    R_SQUARE_BRACKET reduce using rule 80 (x_aux -> empty .)


state 97

    (87) term -> factor term_aux .

    PLUS            reduce using rule 87 (term -> factor term_aux .)
    MINUS           reduce using rule 87 (term -> factor term_aux .)
    NOT_EQUAL       reduce using rule 87 (term -> factor term_aux .)
    IS_EQUAL        reduce using rule 87 (term -> factor term_aux .)
    GREATER         reduce using rule 87 (term -> factor term_aux .)
    GREATER_EQ      reduce using rule 87 (term -> factor term_aux .)
    LESS            reduce using rule 87 (term -> factor term_aux .)
    LESS_EQ         reduce using rule 87 (term -> factor term_aux .)
    OR              reduce using rule 87 (term -> factor term_aux .)
    AND             reduce using rule 87 (term -> factor term_aux .)
    SEMICOLON       reduce using rule 87 (term -> factor term_aux .)
    COMMA           reduce using rule 87 (term -> factor term_aux .)
    R_PARENS        reduce using rule 87 (term -> factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 87 (term -> factor term_aux .)


state 98

    (88) term_aux -> TIMES . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    factor                         shift and go to state 137
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 99

    (89) term_aux -> DIVIDE . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    factor                         shift and go to state 138
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 100

    (90) term_aux -> empty .

    PLUS            reduce using rule 90 (term_aux -> empty .)
    MINUS           reduce using rule 90 (term_aux -> empty .)
    NOT_EQUAL       reduce using rule 90 (term_aux -> empty .)
    IS_EQUAL        reduce using rule 90 (term_aux -> empty .)
    GREATER         reduce using rule 90 (term_aux -> empty .)
    GREATER_EQ      reduce using rule 90 (term_aux -> empty .)
    LESS            reduce using rule 90 (term_aux -> empty .)
    LESS_EQ         reduce using rule 90 (term_aux -> empty .)
    OR              reduce using rule 90 (term_aux -> empty .)
    AND             reduce using rule 90 (term_aux -> empty .)
    SEMICOLON       reduce using rule 90 (term_aux -> empty .)
    COMMA           reduce using rule 90 (term_aux -> empty .)
    R_PARENS        reduce using rule 90 (term_aux -> empty .)
    R_SQUARE_BRACKET reduce using rule 90 (term_aux -> empty .)


state 101

    (91) factor -> factor_aux factor_aux_2 .

    TIMES           reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    DIVIDE          reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    PLUS            reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    MINUS           reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    NOT_EQUAL       reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    IS_EQUAL        reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    GREATER         reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    GREATER_EQ      reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    LESS            reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    LESS_EQ         reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    OR              reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    AND             reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    SEMICOLON       reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    COMMA           reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    R_PARENS        reduce using rule 91 (factor -> factor_aux factor_aux_2 .)
    R_SQUARE_BRACKET reduce using rule 91 (factor -> factor_aux factor_aux_2 .)


state 102

    (94) factor_aux_2 -> L_PARENS . expression R_PARENS
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 139
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 103

    (95) factor_aux_2 -> factor_aux_3 . const
    (99) const -> . ID
    (100) const -> . CONST_I
    (101) const -> . CONST_F
    (102) const -> . CONST_STRING
    (103) const -> . function_call
    (104) const -> . array_access
    (46) function_call -> . ID params_pass
    (105) array_access -> . ID array_index

    ID              shift and go to state 141
    CONST_I         shift and go to state 142
    CONST_F         shift and go to state 143
    CONST_STRING    shift and go to state 144

    const                          shift and go to state 140
    function_call                  shift and go to state 145
    array_access                   shift and go to state 146

state 104

    (96) factor_aux_3 -> PLUS .

    ID              reduce using rule 96 (factor_aux_3 -> PLUS .)
    CONST_I         reduce using rule 96 (factor_aux_3 -> PLUS .)
    CONST_F         reduce using rule 96 (factor_aux_3 -> PLUS .)
    CONST_STRING    reduce using rule 96 (factor_aux_3 -> PLUS .)


state 105

    (97) factor_aux_3 -> MINUS .

    ID              reduce using rule 97 (factor_aux_3 -> MINUS .)
    CONST_I         reduce using rule 97 (factor_aux_3 -> MINUS .)
    CONST_F         reduce using rule 97 (factor_aux_3 -> MINUS .)
    CONST_STRING    reduce using rule 97 (factor_aux_3 -> MINUS .)


state 106

    (98) factor_aux_3 -> empty .

    ID              reduce using rule 98 (factor_aux_3 -> empty .)
    CONST_I         reduce using rule 98 (factor_aux_3 -> empty .)
    CONST_F         reduce using rule 98 (factor_aux_3 -> empty .)
    CONST_STRING    reduce using rule 98 (factor_aux_3 -> empty .)


state 107

    (48) if -> IF L_PARENS expression . R_PARENS block elif else

    R_PARENS        shift and go to state 147


state 108

    (53) while -> WHILE L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 148


state 109

    (54) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 149


state 110

    (55) print_aux -> CONST_STRING . print_aux_2
    (58) print_aux_2 -> . COMMA ID print_aux_2
    (59) print_aux_2 -> . COMMA CONST_STRING print_aux_2
    (60) print_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 151
    R_PARENS        reduce using rule 106 (empty -> .)

    print_aux_2                    shift and go to state 150
    empty                          shift and go to state 152

state 111

    (56) print_aux -> ID . print_aux_2
    (58) print_aux_2 -> . COMMA ID print_aux_2
    (59) print_aux_2 -> . COMMA CONST_STRING print_aux_2
    (60) print_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 151
    R_PARENS        reduce using rule 106 (empty -> .)

    print_aux_2                    shift and go to state 153
    empty                          shift and go to state 152

state 112

    (57) print_aux -> empty .

    R_PARENS        reduce using rule 57 (print_aux -> empty .)


state 113

    (22) var -> type ID var_aux var_aux_2 .

    INT             reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    FLOAT           reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    STRING          reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    ID              reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    RETURN          reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    IF              reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    WHILE           reduce using rule 22 (var -> type ID var_aux var_aux_2 .)
    PRINT           reduce using rule 22 (var -> type ID var_aux var_aux_2 .)


state 114

    (25) var_aux_2 -> COMMA . ID var_aux var_aux_2

    ID              shift and go to state 154


state 115

    (26) var_aux_2 -> empty .

    INT             reduce using rule 26 (var_aux_2 -> empty .)
    FLOAT           reduce using rule 26 (var_aux_2 -> empty .)
    STRING          reduce using rule 26 (var_aux_2 -> empty .)
    ID              reduce using rule 26 (var_aux_2 -> empty .)
    RETURN          reduce using rule 26 (var_aux_2 -> empty .)
    IF              reduce using rule 26 (var_aux_2 -> empty .)
    WHILE           reduce using rule 26 (var_aux_2 -> empty .)
    PRINT           reduce using rule 26 (var_aux_2 -> empty .)


state 116

    (39) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (40) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 155


state 117

    (7) function_header -> FUNCTION ID L_PARENS function_header_aux R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID L_PARENS function_header_aux R_PARENS COLON function_type .)


state 118

    (20) function_type -> type .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> type .)


state 119

    (21) function_type -> VOID .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> VOID .)


state 120

    (15) function_params -> type ID function_params_aux function_params_aux_2 .

    R_PARENS        reduce using rule 15 (function_params -> type ID function_params_aux function_params_aux_2 .)


state 121

    (18) function_params_aux_2 -> COMMA . function_params
    (15) function_params -> . type ID function_params_aux function_params_aux_2
    (34) type -> . INT
    (35) type -> . FLOAT
    (36) type -> . STRING

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21

    function_params                shift and go to state 156
    type                           shift and go to state 25

state 122

    (19) function_params_aux_2 -> empty .

    R_PARENS        reduce using rule 19 (function_params_aux_2 -> empty .)


state 123

    (41) assignment -> ID assignment_aux EQUALS assignment_aux_2 .

    SEMICOLON       reduce using rule 41 (assignment -> ID assignment_aux EQUALS assignment_aux_2 .)


state 124

    (44) assignment_aux_2 -> expression .

    SEMICOLON       reduce using rule 44 (assignment_aux_2 -> expression .)


state 125

    (45) assignment_aux_2 -> read .

    SEMICOLON       reduce using rule 45 (assignment_aux_2 -> read .)


state 126

    (64) read -> READ . ID

    ID              shift and go to state 157


state 127

    (65) params_pass -> L_PARENS params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    TIMES           reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    PLUS            reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    MINUS           reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    IS_EQUAL        reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    GREATER         reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    LESS            reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    OR              reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    AND             reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    COMMA           reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 65 (params_pass -> L_PARENS params_pass_aux R_PARENS .)


state 128

    (66) params_pass_aux -> expression params_pass_aux_2 .

    R_PARENS        reduce using rule 66 (params_pass_aux -> expression params_pass_aux_2 .)


state 129

    (68) params_pass_aux_2 -> COMMA . expression params_pass_aux_2
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 158
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 130

    (69) params_pass_aux_2 -> empty .

    R_PARENS        reduce using rule 69 (params_pass_aux_2 -> empty .)


state 131

    (37) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 159
    EQUALS          reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    IS_EQUAL        reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 38 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 132

    (62) expression_aux -> AND exp . expression_aux
    (62) expression_aux -> . AND exp expression_aux
    (63) expression_aux -> . empty
    (106) empty -> .

    AND             shift and go to state 79
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    expression_aux                 shift and go to state 160
    empty                          shift and go to state 80

state 133

    (72) exp_aux -> OR xp . exp_aux
    (72) exp_aux -> . OR xp exp_aux
    (73) exp_aux -> . empty
    (106) empty -> .

    OR              shift and go to state 82
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    exp_aux                        shift and go to state 161
    empty                          shift and go to state 83

state 134

    (75) xp_aux -> log_op x .

    OR              reduce using rule 75 (xp_aux -> log_op x .)
    AND             reduce using rule 75 (xp_aux -> log_op x .)
    SEMICOLON       reduce using rule 75 (xp_aux -> log_op x .)
    COMMA           reduce using rule 75 (xp_aux -> log_op x .)
    R_PARENS        reduce using rule 75 (xp_aux -> log_op x .)
    R_SQUARE_BRACKET reduce using rule 75 (xp_aux -> log_op x .)


state 135

    (78) x_aux -> PLUS term . x_aux
    (78) x_aux -> . PLUS term x_aux
    (79) x_aux -> . MINUS term x_aux
    (80) x_aux -> . empty
    (106) empty -> .

    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    x_aux                          shift and go to state 162
    empty                          shift and go to state 96

state 136

    (79) x_aux -> MINUS term . x_aux
    (78) x_aux -> . PLUS term x_aux
    (79) x_aux -> . MINUS term x_aux
    (80) x_aux -> . empty
    (106) empty -> .

    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    x_aux                          shift and go to state 163
    empty                          shift and go to state 96

state 137

    (88) term_aux -> TIMES factor . term_aux
    (88) term_aux -> . TIMES factor term_aux
    (89) term_aux -> . DIVIDE factor term_aux
    (90) term_aux -> . empty
    (106) empty -> .

    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    term_aux                       shift and go to state 164
    empty                          shift and go to state 100

state 138

    (89) term_aux -> DIVIDE factor . term_aux
    (88) term_aux -> . TIMES factor term_aux
    (89) term_aux -> . DIVIDE factor term_aux
    (90) term_aux -> . empty
    (106) empty -> .

    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    NOT_EQUAL       reduce using rule 106 (empty -> .)
    IS_EQUAL        reduce using rule 106 (empty -> .)
    GREATER         reduce using rule 106 (empty -> .)
    GREATER_EQ      reduce using rule 106 (empty -> .)
    LESS            reduce using rule 106 (empty -> .)
    LESS_EQ         reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    R_PARENS        reduce using rule 106 (empty -> .)
    R_SQUARE_BRACKET reduce using rule 106 (empty -> .)

    term_aux                       shift and go to state 165
    empty                          shift and go to state 100

state 139

    (94) factor_aux_2 -> L_PARENS expression . R_PARENS

    R_PARENS        shift and go to state 166


state 140

    (95) factor_aux_2 -> factor_aux_3 const .

    TIMES           reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    DIVIDE          reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    PLUS            reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    MINUS           reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    NOT_EQUAL       reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    IS_EQUAL        reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    GREATER         reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    GREATER_EQ      reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    LESS            reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    LESS_EQ         reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    OR              reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    AND             reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    SEMICOLON       reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    COMMA           reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    R_PARENS        reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)
    R_SQUARE_BRACKET reduce using rule 95 (factor_aux_2 -> factor_aux_3 const .)


state 141

    (99) const -> ID .
    (46) function_call -> ID . params_pass
    (105) array_access -> ID . array_index
    (65) params_pass -> . L_PARENS params_pass_aux R_PARENS
    (37) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (38) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 99 (const -> ID .)
    DIVIDE          reduce using rule 99 (const -> ID .)
    PLUS            reduce using rule 99 (const -> ID .)
    MINUS           reduce using rule 99 (const -> ID .)
    NOT_EQUAL       reduce using rule 99 (const -> ID .)
    IS_EQUAL        reduce using rule 99 (const -> ID .)
    GREATER         reduce using rule 99 (const -> ID .)
    GREATER_EQ      reduce using rule 99 (const -> ID .)
    LESS            reduce using rule 99 (const -> ID .)
    LESS_EQ         reduce using rule 99 (const -> ID .)
    OR              reduce using rule 99 (const -> ID .)
    AND             reduce using rule 99 (const -> ID .)
    SEMICOLON       reduce using rule 99 (const -> ID .)
    COMMA           reduce using rule 99 (const -> ID .)
    R_PARENS        reduce using rule 99 (const -> ID .)
    R_SQUARE_BRACKET reduce using rule 99 (const -> ID .)
    L_PARENS        shift and go to state 51
    L_SQUARE_BRACKET shift and go to state 52

    params_pass                    shift and go to state 48
    array_index                    shift and go to state 167

state 142

    (100) const -> CONST_I .

    TIMES           reduce using rule 100 (const -> CONST_I .)
    DIVIDE          reduce using rule 100 (const -> CONST_I .)
    PLUS            reduce using rule 100 (const -> CONST_I .)
    MINUS           reduce using rule 100 (const -> CONST_I .)
    NOT_EQUAL       reduce using rule 100 (const -> CONST_I .)
    IS_EQUAL        reduce using rule 100 (const -> CONST_I .)
    GREATER         reduce using rule 100 (const -> CONST_I .)
    GREATER_EQ      reduce using rule 100 (const -> CONST_I .)
    LESS            reduce using rule 100 (const -> CONST_I .)
    LESS_EQ         reduce using rule 100 (const -> CONST_I .)
    OR              reduce using rule 100 (const -> CONST_I .)
    AND             reduce using rule 100 (const -> CONST_I .)
    SEMICOLON       reduce using rule 100 (const -> CONST_I .)
    COMMA           reduce using rule 100 (const -> CONST_I .)
    R_PARENS        reduce using rule 100 (const -> CONST_I .)
    R_SQUARE_BRACKET reduce using rule 100 (const -> CONST_I .)


state 143

    (101) const -> CONST_F .

    TIMES           reduce using rule 101 (const -> CONST_F .)
    DIVIDE          reduce using rule 101 (const -> CONST_F .)
    PLUS            reduce using rule 101 (const -> CONST_F .)
    MINUS           reduce using rule 101 (const -> CONST_F .)
    NOT_EQUAL       reduce using rule 101 (const -> CONST_F .)
    IS_EQUAL        reduce using rule 101 (const -> CONST_F .)
    GREATER         reduce using rule 101 (const -> CONST_F .)
    GREATER_EQ      reduce using rule 101 (const -> CONST_F .)
    LESS            reduce using rule 101 (const -> CONST_F .)
    LESS_EQ         reduce using rule 101 (const -> CONST_F .)
    OR              reduce using rule 101 (const -> CONST_F .)
    AND             reduce using rule 101 (const -> CONST_F .)
    SEMICOLON       reduce using rule 101 (const -> CONST_F .)
    COMMA           reduce using rule 101 (const -> CONST_F .)
    R_PARENS        reduce using rule 101 (const -> CONST_F .)
    R_SQUARE_BRACKET reduce using rule 101 (const -> CONST_F .)


state 144

    (102) const -> CONST_STRING .

    TIMES           reduce using rule 102 (const -> CONST_STRING .)
    DIVIDE          reduce using rule 102 (const -> CONST_STRING .)
    PLUS            reduce using rule 102 (const -> CONST_STRING .)
    MINUS           reduce using rule 102 (const -> CONST_STRING .)
    NOT_EQUAL       reduce using rule 102 (const -> CONST_STRING .)
    IS_EQUAL        reduce using rule 102 (const -> CONST_STRING .)
    GREATER         reduce using rule 102 (const -> CONST_STRING .)
    GREATER_EQ      reduce using rule 102 (const -> CONST_STRING .)
    LESS            reduce using rule 102 (const -> CONST_STRING .)
    LESS_EQ         reduce using rule 102 (const -> CONST_STRING .)
    OR              reduce using rule 102 (const -> CONST_STRING .)
    AND             reduce using rule 102 (const -> CONST_STRING .)
    SEMICOLON       reduce using rule 102 (const -> CONST_STRING .)
    COMMA           reduce using rule 102 (const -> CONST_STRING .)
    R_PARENS        reduce using rule 102 (const -> CONST_STRING .)
    R_SQUARE_BRACKET reduce using rule 102 (const -> CONST_STRING .)


state 145

    (103) const -> function_call .

    TIMES           reduce using rule 103 (const -> function_call .)
    DIVIDE          reduce using rule 103 (const -> function_call .)
    PLUS            reduce using rule 103 (const -> function_call .)
    MINUS           reduce using rule 103 (const -> function_call .)
    NOT_EQUAL       reduce using rule 103 (const -> function_call .)
    IS_EQUAL        reduce using rule 103 (const -> function_call .)
    GREATER         reduce using rule 103 (const -> function_call .)
    GREATER_EQ      reduce using rule 103 (const -> function_call .)
    LESS            reduce using rule 103 (const -> function_call .)
    LESS_EQ         reduce using rule 103 (const -> function_call .)
    OR              reduce using rule 103 (const -> function_call .)
    AND             reduce using rule 103 (const -> function_call .)
    SEMICOLON       reduce using rule 103 (const -> function_call .)
    COMMA           reduce using rule 103 (const -> function_call .)
    R_PARENS        reduce using rule 103 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 103 (const -> function_call .)


state 146

    (104) const -> array_access .

    TIMES           reduce using rule 104 (const -> array_access .)
    DIVIDE          reduce using rule 104 (const -> array_access .)
    PLUS            reduce using rule 104 (const -> array_access .)
    MINUS           reduce using rule 104 (const -> array_access .)
    NOT_EQUAL       reduce using rule 104 (const -> array_access .)
    IS_EQUAL        reduce using rule 104 (const -> array_access .)
    GREATER         reduce using rule 104 (const -> array_access .)
    GREATER_EQ      reduce using rule 104 (const -> array_access .)
    LESS            reduce using rule 104 (const -> array_access .)
    LESS_EQ         reduce using rule 104 (const -> array_access .)
    OR              reduce using rule 104 (const -> array_access .)
    AND             reduce using rule 104 (const -> array_access .)
    SEMICOLON       reduce using rule 104 (const -> array_access .)
    COMMA           reduce using rule 104 (const -> array_access .)
    R_PARENS        reduce using rule 104 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 104 (const -> array_access .)


state 147

    (48) if -> IF L_PARENS expression R_PARENS . block elif else
    (70) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 169

    block                          shift and go to state 168

state 148

    (53) while -> WHILE L_PARENS expression R_PARENS . block
    (70) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 169

    block                          shift and go to state 170

state 149

    (54) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 54 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 150

    (55) print_aux -> CONST_STRING print_aux_2 .

    R_PARENS        reduce using rule 55 (print_aux -> CONST_STRING print_aux_2 .)


state 151

    (58) print_aux_2 -> COMMA . ID print_aux_2
    (59) print_aux_2 -> COMMA . CONST_STRING print_aux_2

    ID              shift and go to state 171
    CONST_STRING    shift and go to state 172


state 152

    (60) print_aux_2 -> empty .

    R_PARENS        reduce using rule 60 (print_aux_2 -> empty .)


state 153

    (56) print_aux -> ID print_aux_2 .

    R_PARENS        reduce using rule 56 (print_aux -> ID print_aux_2 .)


state 154

    (25) var_aux_2 -> COMMA ID . var_aux var_aux_2
    (23) var_aux -> . array_dim
    (24) var_aux -> . empty
    (39) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (40) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (106) empty -> .

    L_SQUARE_BRACKET shift and go to state 68
    COMMA           reduce using rule 106 (empty -> .)
    INT             reduce using rule 106 (empty -> .)
    FLOAT           reduce using rule 106 (empty -> .)
    STRING          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)

    var_aux                        shift and go to state 173
    array_dim                      shift and go to state 66
    empty                          shift and go to state 67

state 155

    (39) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (40) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 174
    COMMA           reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    INT             reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    FLOAT           reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    STRING          reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    ID              reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    RETURN          reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    IF              reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    WHILE           reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    PRINT           reduce using rule 40 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 156

    (18) function_params_aux_2 -> COMMA function_params .

    R_PARENS        reduce using rule 18 (function_params_aux_2 -> COMMA function_params .)


state 157

    (64) read -> READ ID .

    SEMICOLON       reduce using rule 64 (read -> READ ID .)


state 158

    (68) params_pass_aux_2 -> COMMA expression . params_pass_aux_2
    (68) params_pass_aux_2 -> . COMMA expression params_pass_aux_2
    (69) params_pass_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 129
    R_PARENS        reduce using rule 106 (empty -> .)

    params_pass_aux_2              shift and go to state 175
    empty                          shift and go to state 130

state 159

    (37) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 176
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 160

    (62) expression_aux -> AND exp expression_aux .

    SEMICOLON       reduce using rule 62 (expression_aux -> AND exp expression_aux .)
    COMMA           reduce using rule 62 (expression_aux -> AND exp expression_aux .)
    R_PARENS        reduce using rule 62 (expression_aux -> AND exp expression_aux .)
    R_SQUARE_BRACKET reduce using rule 62 (expression_aux -> AND exp expression_aux .)


state 161

    (72) exp_aux -> OR xp exp_aux .

    AND             reduce using rule 72 (exp_aux -> OR xp exp_aux .)
    SEMICOLON       reduce using rule 72 (exp_aux -> OR xp exp_aux .)
    COMMA           reduce using rule 72 (exp_aux -> OR xp exp_aux .)
    R_PARENS        reduce using rule 72 (exp_aux -> OR xp exp_aux .)
    R_SQUARE_BRACKET reduce using rule 72 (exp_aux -> OR xp exp_aux .)


state 162

    (78) x_aux -> PLUS term x_aux .

    NOT_EQUAL       reduce using rule 78 (x_aux -> PLUS term x_aux .)
    IS_EQUAL        reduce using rule 78 (x_aux -> PLUS term x_aux .)
    GREATER         reduce using rule 78 (x_aux -> PLUS term x_aux .)
    GREATER_EQ      reduce using rule 78 (x_aux -> PLUS term x_aux .)
    LESS            reduce using rule 78 (x_aux -> PLUS term x_aux .)
    LESS_EQ         reduce using rule 78 (x_aux -> PLUS term x_aux .)
    OR              reduce using rule 78 (x_aux -> PLUS term x_aux .)
    AND             reduce using rule 78 (x_aux -> PLUS term x_aux .)
    SEMICOLON       reduce using rule 78 (x_aux -> PLUS term x_aux .)
    COMMA           reduce using rule 78 (x_aux -> PLUS term x_aux .)
    R_PARENS        reduce using rule 78 (x_aux -> PLUS term x_aux .)
    R_SQUARE_BRACKET reduce using rule 78 (x_aux -> PLUS term x_aux .)


state 163

    (79) x_aux -> MINUS term x_aux .

    NOT_EQUAL       reduce using rule 79 (x_aux -> MINUS term x_aux .)
    IS_EQUAL        reduce using rule 79 (x_aux -> MINUS term x_aux .)
    GREATER         reduce using rule 79 (x_aux -> MINUS term x_aux .)
    GREATER_EQ      reduce using rule 79 (x_aux -> MINUS term x_aux .)
    LESS            reduce using rule 79 (x_aux -> MINUS term x_aux .)
    LESS_EQ         reduce using rule 79 (x_aux -> MINUS term x_aux .)
    OR              reduce using rule 79 (x_aux -> MINUS term x_aux .)
    AND             reduce using rule 79 (x_aux -> MINUS term x_aux .)
    SEMICOLON       reduce using rule 79 (x_aux -> MINUS term x_aux .)
    COMMA           reduce using rule 79 (x_aux -> MINUS term x_aux .)
    R_PARENS        reduce using rule 79 (x_aux -> MINUS term x_aux .)
    R_SQUARE_BRACKET reduce using rule 79 (x_aux -> MINUS term x_aux .)


state 164

    (88) term_aux -> TIMES factor term_aux .

    PLUS            reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    MINUS           reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    NOT_EQUAL       reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    IS_EQUAL        reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    GREATER         reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    GREATER_EQ      reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    LESS            reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    LESS_EQ         reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    OR              reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    AND             reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    SEMICOLON       reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    COMMA           reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    R_PARENS        reduce using rule 88 (term_aux -> TIMES factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 88 (term_aux -> TIMES factor term_aux .)


state 165

    (89) term_aux -> DIVIDE factor term_aux .

    PLUS            reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    MINUS           reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    NOT_EQUAL       reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    IS_EQUAL        reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    GREATER         reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    GREATER_EQ      reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    LESS            reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    LESS_EQ         reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    OR              reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    AND             reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    SEMICOLON       reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    COMMA           reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    R_PARENS        reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 89 (term_aux -> DIVIDE factor term_aux .)


state 166

    (94) factor_aux_2 -> L_PARENS expression R_PARENS .

    TIMES           reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    IS_EQUAL        reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    SEMICOLON       reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 94 (factor_aux_2 -> L_PARENS expression R_PARENS .)


state 167

    (105) array_access -> ID array_index .

    TIMES           reduce using rule 105 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 105 (array_access -> ID array_index .)
    PLUS            reduce using rule 105 (array_access -> ID array_index .)
    MINUS           reduce using rule 105 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 105 (array_access -> ID array_index .)
    IS_EQUAL        reduce using rule 105 (array_access -> ID array_index .)
    GREATER         reduce using rule 105 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 105 (array_access -> ID array_index .)
    LESS            reduce using rule 105 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 105 (array_access -> ID array_index .)
    OR              reduce using rule 105 (array_access -> ID array_index .)
    AND             reduce using rule 105 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 105 (array_access -> ID array_index .)
    COMMA           reduce using rule 105 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 105 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 105 (array_access -> ID array_index .)


state 168

    (48) if -> IF L_PARENS expression R_PARENS block . elif else
    (49) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (50) elif -> . empty
    (106) empty -> .

    ELIF            shift and go to state 178
    ELSE            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)

    elif                           shift and go to state 177
    empty                          shift and go to state 179

state 169

    (70) block -> L_KEY_BRACKET . statement R_KEY_BRACKET
    (27) statement -> . statement_aux SEMICOLON
    (28) statement_aux -> . assignment
    (29) statement_aux -> . function_call
    (30) statement_aux -> . return
    (31) statement_aux -> . if
    (32) statement_aux -> . while
    (33) statement_aux -> . print
    (41) assignment -> . ID assignment_aux EQUALS assignment_aux_2
    (46) function_call -> . ID params_pass
    (47) return -> . RETURN expression
    (48) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) while -> . WHILE L_PARENS expression R_PARENS block
    (54) print -> . PRINT L_PARENS print_aux R_PARENS

    ID              shift and go to state 35
    RETURN          shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    PRINT           shift and go to state 39

    statement                      shift and go to state 180
    statement_aux                  shift and go to state 28
    assignment                     shift and go to state 29
    function_call                  shift and go to state 30
    return                         shift and go to state 31
    if                             shift and go to state 32
    while                          shift and go to state 33
    print                          shift and go to state 34

state 170

    (53) while -> WHILE L_PARENS expression R_PARENS block .

    SEMICOLON       reduce using rule 53 (while -> WHILE L_PARENS expression R_PARENS block .)


state 171

    (58) print_aux_2 -> COMMA ID . print_aux_2
    (58) print_aux_2 -> . COMMA ID print_aux_2
    (59) print_aux_2 -> . COMMA CONST_STRING print_aux_2
    (60) print_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 151
    R_PARENS        reduce using rule 106 (empty -> .)

    print_aux_2                    shift and go to state 181
    empty                          shift and go to state 152

state 172

    (59) print_aux_2 -> COMMA CONST_STRING . print_aux_2
    (58) print_aux_2 -> . COMMA ID print_aux_2
    (59) print_aux_2 -> . COMMA CONST_STRING print_aux_2
    (60) print_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 151
    R_PARENS        reduce using rule 106 (empty -> .)

    print_aux_2                    shift and go to state 182
    empty                          shift and go to state 152

state 173

    (25) var_aux_2 -> COMMA ID var_aux . var_aux_2
    (25) var_aux_2 -> . COMMA ID var_aux var_aux_2
    (26) var_aux_2 -> . empty
    (106) empty -> .

    COMMA           shift and go to state 114
    INT             reduce using rule 106 (empty -> .)
    FLOAT           reduce using rule 106 (empty -> .)
    STRING          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)

    var_aux_2                      shift and go to state 183
    empty                          shift and go to state 115

state 174

    (39) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 184


state 175

    (68) params_pass_aux_2 -> COMMA expression params_pass_aux_2 .

    R_PARENS        reduce using rule 68 (params_pass_aux_2 -> COMMA expression params_pass_aux_2 .)


state 176

    (37) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 185


state 177

    (48) if -> IF L_PARENS expression R_PARENS block elif . else
    (51) else -> . ELSE block
    (52) else -> . empty
    (106) empty -> .

    ELSE            shift and go to state 187
    SEMICOLON       reduce using rule 106 (empty -> .)

    else                           shift and go to state 186
    empty                          shift and go to state 188

state 178

    (49) elif -> ELIF . L_PARENS expression R_PARENS block elif

    L_PARENS        shift and go to state 189


state 179

    (50) elif -> empty .

    ELSE            reduce using rule 50 (elif -> empty .)
    SEMICOLON       reduce using rule 50 (elif -> empty .)


state 180

    (70) block -> L_KEY_BRACKET statement . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 190


state 181

    (58) print_aux_2 -> COMMA ID print_aux_2 .

    R_PARENS        reduce using rule 58 (print_aux_2 -> COMMA ID print_aux_2 .)


state 182

    (59) print_aux_2 -> COMMA CONST_STRING print_aux_2 .

    R_PARENS        reduce using rule 59 (print_aux_2 -> COMMA CONST_STRING print_aux_2 .)


state 183

    (25) var_aux_2 -> COMMA ID var_aux var_aux_2 .

    INT             reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    FLOAT           reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    STRING          reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    ID              reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    RETURN          reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    IF              reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    WHILE           reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)
    PRINT           reduce using rule 25 (var_aux_2 -> COMMA ID var_aux var_aux_2 .)


state 184

    (39) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 191


state 185

    (37) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    EQUALS          reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    IS_EQUAL        reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 37 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 186

    (48) if -> IF L_PARENS expression R_PARENS block elif else .

    SEMICOLON       reduce using rule 48 (if -> IF L_PARENS expression R_PARENS block elif else .)


state 187

    (51) else -> ELSE . block
    (70) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 169

    block                          shift and go to state 192

state 188

    (52) else -> empty .

    SEMICOLON       reduce using rule 52 (else -> empty .)


state 189

    (49) elif -> ELIF L_PARENS . expression R_PARENS block elif
    (61) expression -> . exp expression_aux
    (71) exp -> . xp exp_aux
    (74) xp -> . x xp_aux
    (77) x -> . term x_aux
    (87) term -> . factor term_aux
    (91) factor -> . factor_aux factor_aux_2
    (92) factor_aux -> . NOT
    (93) factor_aux -> . empty
    (106) empty -> .

    NOT             shift and go to state 60
    L_PARENS        reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    CONST_I         reduce using rule 106 (empty -> .)
    CONST_F         reduce using rule 106 (empty -> .)
    CONST_STRING    reduce using rule 106 (empty -> .)

    expression                     shift and go to state 193
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 59
    empty                          shift and go to state 61

state 190

    (70) block -> L_KEY_BRACKET statement R_KEY_BRACKET .

    ELIF            reduce using rule 70 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    ELSE            reduce using rule 70 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    SEMICOLON       reduce using rule 70 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)


state 191

    (39) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    COMMA           reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    INT             reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    FLOAT           reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    STRING          reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    ID              reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    RETURN          reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    IF              reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    WHILE           reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    PRINT           reduce using rule 39 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 192

    (51) else -> ELSE block .

    SEMICOLON       reduce using rule 51 (else -> ELSE block .)


state 193

    (49) elif -> ELIF L_PARENS expression . R_PARENS block elif

    R_PARENS        shift and go to state 194


state 194

    (49) elif -> ELIF L_PARENS expression R_PARENS . block elif
    (70) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 169

    block                          shift and go to state 195

state 195

    (49) elif -> ELIF L_PARENS expression R_PARENS block . elif
    (49) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (50) elif -> . empty
    (106) empty -> .

    ELIF            shift and go to state 178
    ELSE            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)

    elif                           shift and go to state 196
    empty                          shift and go to state 179

state 196

    (49) elif -> ELIF L_PARENS expression R_PARENS block elif .

    ELSE            reduce using rule 49 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    SEMICOLON       reduce using rule 49 (elif -> ELIF L_PARENS expression R_PARENS block elif .)

