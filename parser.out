Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> vars functions main
Rule 2     program -> vars main
Rule 3     program -> functions main
Rule 4     program -> main
Rule 5     functions -> functions function
Rule 6     functions -> function
Rule 7     function -> function_header function_body n_end_function
Rule 8     main -> FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
Rule 9     function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
Rule 10    function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
Rule 11    function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET
Rule 12    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 13    vars -> var vars
Rule 14    vars -> var
Rule 15    statements -> statement statements
Rule 16    statements -> statement
Rule 17    function_params -> type ID n_add_param array_index COMMA function_params
Rule 18    function_params -> type ID n_add_param array_index
Rule 19    function_params -> type ID n_add_param COMMA function_params
Rule 20    function_params -> type ID n_add_param
Rule 21    function_type -> INT n_add_function_type
Rule 22    function_type -> FLOAT n_add_function_type
Rule 23    function_type -> STRING n_add_function_type
Rule 24    function_type -> VOID n_add_function_type
Rule 25    var -> type_aux var_aux n_reset_is_global SEMICOLON
Rule 26    type_aux -> GLOBAL n_is_global type
Rule 27    type_aux -> type
Rule 28    var_aux -> ID n_add_var_arr array_dim COMMA var_aux
Rule 29    var_aux -> ID n_add_var_arr array_dim
Rule 30    var_aux -> ID n_add_var COMMA var_aux
Rule 31    var_aux -> ID n_add_var
Rule 32    statement -> statement_aux SEMICOLON
Rule 33    statement -> statement_aux_2
Rule 34    statement_aux -> assignment
Rule 35    statement_aux -> function_call
Rule 36    statement_aux -> return
Rule 37    statement_aux -> print
Rule 38    statement_aux -> read
Rule 39    statement_aux_2 -> if
Rule 40    statement_aux_2 -> while
Rule 41    type -> INT n_record_last_type
Rule 42    type -> FLOAT n_record_last_type
Rule 43    type -> STRING n_record_last_type
Rule 44    array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done
Rule 45    array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET n_array_dim_done
Rule 46    array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2
Rule 47    array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET
Rule 48    array_dim_aux -> n_create_dim_node CONST_I n_array_dim_sup
Rule 49    array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup
Rule 50    assignment -> ID n_start_assignment ASSIGN expression
Rule 51    assignment -> array_access ASSIGN expression
Rule 52    function_call -> ID n_calling_func params_pass n_validate_function_call
Rule 53    return -> RETURN expression n_return
Rule 54    if -> IF if_condition
Rule 55    if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if
Rule 56    if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if
Rule 57    if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if
Rule 58    while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
Rule 59    print -> PRINT L_PARENS print_aux R_PARENS n_end_print
Rule 60    print -> PRINT L_PARENS R_PARENS
Rule 61    print_aux -> expression n_print COMMA print_aux
Rule 62    print_aux -> expression n_print
Rule 63    expression -> exp n_eval_exp AND n_add_operator expression
Rule 64    expression -> exp n_eval_exp
Rule 65    read -> READ L_PARENS ID n_register_read R_PARENS
Rule 66    params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS
Rule 67    params_pass -> L_PARENS expression n_validate_param R_PARENS
Rule 68    params_pass -> L_PARENS R_PARENS
Rule 69    params_pass_aux -> COMMA expression n_validate_param params_pass_aux
Rule 70    params_pass_aux -> COMMA expression n_validate_param
Rule 71    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 72    exp -> xp n_eval_xp OR n_add_operator exp
Rule 73    exp -> xp n_eval_xp
Rule 74    xp -> x n_eval_x NOT_EQUAL n_add_operator xp
Rule 75    xp -> x n_eval_x EQUALS n_add_operator xp
Rule 76    xp -> x n_eval_x GREATER n_add_operator xp
Rule 77    xp -> x n_eval_x GREATER_EQ n_add_operator xp
Rule 78    xp -> x n_eval_x LESS n_add_operator xp
Rule 79    xp -> x n_eval_x LESS_EQ n_add_operator xp
Rule 80    xp -> x n_eval_x
Rule 81    x -> term n_eval_term PLUS n_add_operator x
Rule 82    x -> term n_eval_term MINUS n_add_operator x
Rule 83    x -> term n_eval_term
Rule 84    term -> factor n_eval_factor TIMES n_add_operator term
Rule 85    term -> factor n_eval_factor DIVIDE n_add_operator term
Rule 86    term -> factor n_eval_factor
Rule 87    factor -> not factor_aux
Rule 88    factor -> factor_aux
Rule 89    factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
Rule 90    factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
Rule 91    factor_aux -> sign const
Rule 92    factor_aux -> const
Rule 93    not -> NOT n_register_sign
Rule 94    sign -> PLUS n_register_sign
Rule 95    sign -> MINUS n_register_sign
Rule 96    const -> ID n_add_operand
Rule 97    const -> CONST_F n_add_operand
Rule 98    const -> CONST_I n_add_operand
Rule 99    const -> CONST_STRING n_add_operand
Rule 100   const -> function_call
Rule 101   const -> array_access
Rule 102   array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom
Rule 103   array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux
Rule 104   array_index_aux -> array_index
Rule 105   array_index_aux -> n_get_array_dir
Rule 106   n_start_main -> <empty>
Rule 107   n_add_function_name -> <empty>
Rule 108   n_add_function_type -> <empty>
Rule 109   n_end_function -> <empty>
Rule 110   n_end_main -> <empty>
Rule 111   n_add_var -> <empty>
Rule 112   n_add_var_arr -> <empty>
Rule 113   n_add_param -> <empty>
Rule 114   n_record_last_type -> <empty>
Rule 115   n_eval_exp -> <empty>
Rule 116   n_eval_xp -> <empty>
Rule 117   n_eval_x -> <empty>
Rule 118   n_eval_factor -> <empty>
Rule 119   n_eval_term -> <empty>
Rule 120   n_end_condition -> <empty>
Rule 121   n_start_else -> <empty>
Rule 122   n_end_if -> <empty>
Rule 123   n_start_while -> <empty>
Rule 124   n_end_while -> <empty>
Rule 125   n_register_sign -> <empty>
Rule 126   n_is_global -> <empty>
Rule 127   n_reset_is_global -> <empty>
Rule 128   n_add_operand -> <empty>
Rule 129   n_add_operator -> <empty>
Rule 130   n_pop_fake_bottom -> <empty>
Rule 131   n_start_assignment -> <empty>
Rule 132   n_create_dim_node -> <empty>
Rule 133   n_array_dim_done -> <empty>
Rule 134   n_array_dim_inf -> <empty>
Rule 135   n_array_dim_sup -> <empty>
Rule 136   n_get_array_dir -> <empty>
Rule 137   n_ver_index -> <empty>
Rule 138   n_print -> <empty>
Rule 139   n_end_print -> <empty>
Rule 140   n_return -> <empty>
Rule 141   n_calling_func -> <empty>
Rule 142   n_validate_param -> <empty>
Rule 143   n_validate_function_call -> <empty>
Rule 144   n_register_read -> <empty>
Rule 145   n_validate_is_array -> <empty>

Terminals, with rules where they appear

AND                  : 63
ASSIGN               : 50 51
COLON                : 9 10
COMMA                : 17 19 28 30 61 69 70
CONST_F              : 97
CONST_I              : 48 49 49 98
CONST_STRING         : 99
DIVIDE               : 85
DOT                  : 49 49
ELIF                 : 55
ELSE                 : 56
EQUALS               : 75
FLOAT                : 22 42
FUNCTION             : 8 9 10
GLOBAL               : 26
GREATER              : 76
GREATER_EQ           : 77
ID                   : 9 10 17 18 19 20 28 29 30 31 50 52 65 96 102
IF                   : 54
INT                  : 21 41
LESS                 : 78
LESS_EQ              : 79
L_KEY_BRACKET        : 11 12 71
L_PARENS             : 8 9 10 55 56 57 58 59 60 65 66 67 68 89 90
L_SQUARE_BRACKET     : 44 45 46 47 103
MAIN                 : 8
MINUS                : 82 95
NOT                  : 93
NOT_EQUAL            : 74
OR                   : 72
PLUS                 : 81 94
PRINT                : 59 60
READ                 : 65
RETURN               : 53
R_KEY_BRACKET        : 11 12 71
R_PARENS             : 8 9 10 55 56 57 58 59 60 65 66 67 68 89 90
R_SQUARE_BRACKET     : 44 45 46 47 103
SEMICOLON            : 25 32
STRING               : 23 43
TIMES                : 84
VOID                 : 24
WHILE                : 58
error                : 

Nonterminals, with rules where they appear

array_access         : 51 101
array_dim            : 28 29
array_dim_2          : 44 46
array_dim_aux        : 44 45 46 47
array_index          : 17 18 102 104
array_index_aux      : 103
assignment           : 34
block                : 55 56 56 57 58
const                : 91 92
exp                  : 63 64 72
expression           : 50 51 53 55 56 57 58 61 62 63 66 67 69 70 89 90 103
factor               : 84 85 86
factor_aux           : 87 88
function             : 5 6
function_body        : 7 8
function_call        : 35 100
function_header      : 7
function_params      : 9 17 19
function_type        : 9 10
functions            : 1 3 5
if                   : 39
if_condition         : 54 55
main                 : 1 2 3 4
n_add_function_name  : 9 10
n_add_function_type  : 21 22 23 24
n_add_operand        : 96 97 98 99 102
n_add_operator       : 63 72 74 75 76 77 78 79 81 82 84 85 89 90
n_add_param          : 17 18 19 20
n_add_var            : 30 31
n_add_var_arr        : 28 29
n_array_dim_done     : 44 45
n_array_dim_inf      : 49
n_array_dim_sup      : 48 49
n_calling_func       : 52
n_create_dim_node    : 48 49
n_end_condition      : 55 56 57 58
n_end_function       : 7
n_end_if             : 55 56 57
n_end_main           : 8
n_end_print          : 59
n_end_while          : 58
n_eval_exp           : 63 64
n_eval_factor        : 84 85 86
n_eval_term          : 81 82 83
n_eval_x             : 74 75 76 77 78 79 80
n_eval_xp            : 72 73
n_get_array_dir      : 105
n_is_global          : 26
n_pop_fake_bottom    : 89 90 102
n_print              : 61 62
n_record_last_type   : 41 42 43
n_register_read      : 65
n_register_sign      : 93 94 95
n_reset_is_global    : 25
n_return             : 53
n_start_assignment   : 50
n_start_else         : 55 56
n_start_main         : 8
n_start_while        : 58
n_validate_function_call : 52
n_validate_is_array  : 102
n_validate_param     : 66 67 69 70
n_ver_index          : 103
not                  : 87
params_pass          : 52
params_pass_aux      : 66 69
print                : 37
print_aux            : 59 61
program              : 0
read                 : 38
return               : 36
sign                 : 89 91
statement            : 15 16
statement_aux        : 32
statement_aux_2      : 33
statements           : 11 12 15 71
term                 : 81 82 83 84 85
type                 : 17 18 19 20 26 27
type_aux             : 25
var                  : 13 14
var_aux              : 25 28 30
vars                 : 1 2 11 13
while                : 40
x                    : 74 75 76 77 78 79 80 81 82
xp                   : 72 73 74 75 76 77 78 79

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . vars functions main
    (2) program -> . vars main
    (3) program -> . functions main
    (4) program -> . main
    (13) vars -> . var vars
    (14) vars -> . var
    (5) functions -> . functions function
    (6) functions -> . function
    (8) main -> . FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
    (25) var -> . type_aux var_aux n_reset_is_global SEMICOLON
    (7) function -> . function_header function_body n_end_function
    (26) type_aux -> . GLOBAL n_is_global type
    (27) type_aux -> . type
    (9) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    FUNCTION        shift and go to state 7
    GLOBAL          shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    program                        shift and go to state 1
    vars                           shift and go to state 2
    functions                      shift and go to state 3
    main                           shift and go to state 4
    var                            shift and go to state 5
    function                       shift and go to state 6
    type_aux                       shift and go to state 8
    function_header                shift and go to state 9
    type                           shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> vars . functions main
    (2) program -> vars . main
    (5) functions -> . functions function
    (6) functions -> . function
    (8) main -> . FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
    (7) function -> . function_header function_body n_end_function
    (9) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 7

    functions                      shift and go to state 15
    main                           shift and go to state 16
    function                       shift and go to state 6
    function_header                shift and go to state 9

state 3

    (3) program -> functions . main
    (5) functions -> functions . function
    (8) main -> . FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
    (7) function -> . function_header function_body n_end_function
    (9) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 7

    main                           shift and go to state 17
    function                       shift and go to state 18
    function_header                shift and go to state 9

state 4

    (4) program -> main .

    $end            reduce using rule 4 (program -> main .)


state 5

    (13) vars -> var . vars
    (14) vars -> var .
    (13) vars -> . var vars
    (14) vars -> . var
    (25) var -> . type_aux var_aux n_reset_is_global SEMICOLON
    (26) type_aux -> . GLOBAL n_is_global type
    (27) type_aux -> . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    FUNCTION        reduce using rule 14 (vars -> var .)
    ID              reduce using rule 14 (vars -> var .)
    RETURN          reduce using rule 14 (vars -> var .)
    PRINT           reduce using rule 14 (vars -> var .)
    READ            reduce using rule 14 (vars -> var .)
    IF              reduce using rule 14 (vars -> var .)
    WHILE           reduce using rule 14 (vars -> var .)
    GLOBAL          shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    var                            shift and go to state 5
    vars                           shift and go to state 19
    type_aux                       shift and go to state 8
    type                           shift and go to state 11

state 6

    (6) functions -> function .

    FUNCTION        reduce using rule 6 (functions -> function .)


state 7

    (8) main -> FUNCTION . MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
    (9) function_header -> FUNCTION . ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> FUNCTION . ID n_add_function_name L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 20
    ID              shift and go to state 21


state 8

    (25) var -> type_aux . var_aux n_reset_is_global SEMICOLON
    (28) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (29) var_aux -> . ID n_add_var_arr array_dim
    (30) var_aux -> . ID n_add_var COMMA var_aux
    (31) var_aux -> . ID n_add_var

    ID              shift and go to state 23

    var_aux                        shift and go to state 22

state 9

    (7) function -> function_header . function_body n_end_function
    (11) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (12) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 25

    function_body                  shift and go to state 24

state 10

    (26) type_aux -> GLOBAL . n_is_global type
    (126) n_is_global -> .

    INT             reduce using rule 126 (n_is_global -> .)
    FLOAT           reduce using rule 126 (n_is_global -> .)
    STRING          reduce using rule 126 (n_is_global -> .)

    n_is_global                    shift and go to state 26

state 11

    (27) type_aux -> type .

    ID              reduce using rule 27 (type_aux -> type .)


state 12

    (41) type -> INT . n_record_last_type
    (114) n_record_last_type -> .

    ID              reduce using rule 114 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 27

state 13

    (42) type -> FLOAT . n_record_last_type
    (114) n_record_last_type -> .

    ID              reduce using rule 114 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 28

state 14

    (43) type -> STRING . n_record_last_type
    (114) n_record_last_type -> .

    ID              reduce using rule 114 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 29

state 15

    (1) program -> vars functions . main
    (5) functions -> functions . function
    (8) main -> . FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main
    (7) function -> . function_header function_body n_end_function
    (9) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 7

    main                           shift and go to state 30
    function                       shift and go to state 18
    function_header                shift and go to state 9

state 16

    (2) program -> vars main .

    $end            reduce using rule 2 (program -> vars main .)


state 17

    (3) program -> functions main .

    $end            reduce using rule 3 (program -> functions main .)


state 18

    (5) functions -> functions function .

    FUNCTION        reduce using rule 5 (functions -> functions function .)


state 19

    (13) vars -> var vars .

    FUNCTION        reduce using rule 13 (vars -> var vars .)
    ID              reduce using rule 13 (vars -> var vars .)
    RETURN          reduce using rule 13 (vars -> var vars .)
    PRINT           reduce using rule 13 (vars -> var vars .)
    READ            reduce using rule 13 (vars -> var vars .)
    IF              reduce using rule 13 (vars -> var vars .)
    WHILE           reduce using rule 13 (vars -> var vars .)


state 20

    (8) main -> FUNCTION MAIN . L_PARENS R_PARENS n_start_main function_body n_end_main

    L_PARENS        shift and go to state 31


state 21

    (9) function_header -> FUNCTION ID . n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> FUNCTION ID . n_add_function_name L_PARENS R_PARENS COLON function_type
    (107) n_add_function_name -> .

    L_PARENS        reduce using rule 107 (n_add_function_name -> .)

    n_add_function_name            shift and go to state 32

state 22

    (25) var -> type_aux var_aux . n_reset_is_global SEMICOLON
    (127) n_reset_is_global -> .

    SEMICOLON       reduce using rule 127 (n_reset_is_global -> .)

    n_reset_is_global              shift and go to state 33

state 23

    (28) var_aux -> ID . n_add_var_arr array_dim COMMA var_aux
    (29) var_aux -> ID . n_add_var_arr array_dim
    (30) var_aux -> ID . n_add_var COMMA var_aux
    (31) var_aux -> ID . n_add_var
    (112) n_add_var_arr -> .
    (111) n_add_var -> .

    L_SQUARE_BRACKET reduce using rule 112 (n_add_var_arr -> .)
    COMMA           reduce using rule 111 (n_add_var -> .)
    SEMICOLON       reduce using rule 111 (n_add_var -> .)

    n_add_var_arr                  shift and go to state 34
    n_add_var                      shift and go to state 35

state 24

    (7) function -> function_header function_body . n_end_function
    (109) n_end_function -> .

    FUNCTION        reduce using rule 109 (n_end_function -> .)

    n_end_function                 shift and go to state 36

state 25

    (11) function_body -> L_KEY_BRACKET . vars statements R_KEY_BRACKET
    (12) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) vars -> . var vars
    (14) vars -> . var
    (15) statements -> . statement statements
    (16) statements -> . statement
    (25) var -> . type_aux var_aux n_reset_is_global SEMICOLON
    (32) statement -> . statement_aux SEMICOLON
    (33) statement -> . statement_aux_2
    (26) type_aux -> . GLOBAL n_is_global type
    (27) type_aux -> . type
    (34) statement_aux -> . assignment
    (35) statement_aux -> . function_call
    (36) statement_aux -> . return
    (37) statement_aux -> . print
    (38) statement_aux -> . read
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type
    (50) assignment -> . ID n_start_assignment ASSIGN expression
    (51) assignment -> . array_access ASSIGN expression
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (53) return -> . RETURN expression n_return
    (59) print -> . PRINT L_PARENS print_aux R_PARENS n_end_print
    (60) print -> . PRINT L_PARENS R_PARENS
    (65) read -> . READ L_PARENS ID n_register_read R_PARENS
    (54) if -> . IF if_condition
    (58) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    GLOBAL          shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 49
    RETURN          shift and go to state 51
    PRINT           shift and go to state 52
    READ            shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 55

    vars                           shift and go to state 37
    statements                     shift and go to state 38
    var                            shift and go to state 5
    statement                      shift and go to state 39
    type_aux                       shift and go to state 8
    statement_aux                  shift and go to state 40
    statement_aux_2                shift and go to state 41
    type                           shift and go to state 11
    assignment                     shift and go to state 42
    function_call                  shift and go to state 43
    return                         shift and go to state 44
    print                          shift and go to state 45
    read                           shift and go to state 46
    if                             shift and go to state 47
    while                          shift and go to state 48
    array_access                   shift and go to state 50

state 26

    (26) type_aux -> GLOBAL n_is_global . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 56

state 27

    (41) type -> INT n_record_last_type .

    ID              reduce using rule 41 (type -> INT n_record_last_type .)


state 28

    (42) type -> FLOAT n_record_last_type .

    ID              reduce using rule 42 (type -> FLOAT n_record_last_type .)


state 29

    (43) type -> STRING n_record_last_type .

    ID              reduce using rule 43 (type -> STRING n_record_last_type .)


state 30

    (1) program -> vars functions main .

    $end            reduce using rule 1 (program -> vars functions main .)


state 31

    (8) main -> FUNCTION MAIN L_PARENS . R_PARENS n_start_main function_body n_end_main

    R_PARENS        shift and go to state 57


state 32

    (9) function_header -> FUNCTION ID n_add_function_name . L_PARENS function_params R_PARENS COLON function_type
    (10) function_header -> FUNCTION ID n_add_function_name . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 58


state 33

    (25) var -> type_aux var_aux n_reset_is_global . SEMICOLON

    SEMICOLON       shift and go to state 59


state 34

    (28) var_aux -> ID n_add_var_arr . array_dim COMMA var_aux
    (29) var_aux -> ID n_add_var_arr . array_dim
    (44) array_dim -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done
    (45) array_dim -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET n_array_dim_done

    L_SQUARE_BRACKET shift and go to state 61

    array_dim                      shift and go to state 60

state 35

    (30) var_aux -> ID n_add_var . COMMA var_aux
    (31) var_aux -> ID n_add_var .

    COMMA           shift and go to state 62
    SEMICOLON       reduce using rule 31 (var_aux -> ID n_add_var .)


state 36

    (7) function -> function_header function_body n_end_function .

    FUNCTION        reduce using rule 7 (function -> function_header function_body n_end_function .)


state 37

    (11) function_body -> L_KEY_BRACKET vars . statements R_KEY_BRACKET
    (15) statements -> . statement statements
    (16) statements -> . statement
    (32) statement -> . statement_aux SEMICOLON
    (33) statement -> . statement_aux_2
    (34) statement_aux -> . assignment
    (35) statement_aux -> . function_call
    (36) statement_aux -> . return
    (37) statement_aux -> . print
    (38) statement_aux -> . read
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (50) assignment -> . ID n_start_assignment ASSIGN expression
    (51) assignment -> . array_access ASSIGN expression
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (53) return -> . RETURN expression n_return
    (59) print -> . PRINT L_PARENS print_aux R_PARENS n_end_print
    (60) print -> . PRINT L_PARENS R_PARENS
    (65) read -> . READ L_PARENS ID n_register_read R_PARENS
    (54) if -> . IF if_condition
    (58) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    ID              shift and go to state 49
    RETURN          shift and go to state 51
    PRINT           shift and go to state 52
    READ            shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 55

    statements                     shift and go to state 63
    statement                      shift and go to state 39
    statement_aux                  shift and go to state 40
    statement_aux_2                shift and go to state 41
    assignment                     shift and go to state 42
    function_call                  shift and go to state 43
    return                         shift and go to state 44
    print                          shift and go to state 45
    read                           shift and go to state 46
    if                             shift and go to state 47
    while                          shift and go to state 48
    array_access                   shift and go to state 50

state 38

    (12) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 64


state 39

    (15) statements -> statement . statements
    (16) statements -> statement .
    (15) statements -> . statement statements
    (16) statements -> . statement
    (32) statement -> . statement_aux SEMICOLON
    (33) statement -> . statement_aux_2
    (34) statement_aux -> . assignment
    (35) statement_aux -> . function_call
    (36) statement_aux -> . return
    (37) statement_aux -> . print
    (38) statement_aux -> . read
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (50) assignment -> . ID n_start_assignment ASSIGN expression
    (51) assignment -> . array_access ASSIGN expression
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (53) return -> . RETURN expression n_return
    (59) print -> . PRINT L_PARENS print_aux R_PARENS n_end_print
    (60) print -> . PRINT L_PARENS R_PARENS
    (65) read -> . READ L_PARENS ID n_register_read R_PARENS
    (54) if -> . IF if_condition
    (58) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    R_KEY_BRACKET   reduce using rule 16 (statements -> statement .)
    ID              shift and go to state 49
    RETURN          shift and go to state 51
    PRINT           shift and go to state 52
    READ            shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 55

    statement                      shift and go to state 39
    statements                     shift and go to state 65
    statement_aux                  shift and go to state 40
    statement_aux_2                shift and go to state 41
    assignment                     shift and go to state 42
    function_call                  shift and go to state 43
    return                         shift and go to state 44
    print                          shift and go to state 45
    read                           shift and go to state 46
    if                             shift and go to state 47
    while                          shift and go to state 48
    array_access                   shift and go to state 50

state 40

    (32) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 66


state 41

    (33) statement -> statement_aux_2 .

    ID              reduce using rule 33 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 33 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 33 (statement -> statement_aux_2 .)
    READ            reduce using rule 33 (statement -> statement_aux_2 .)
    IF              reduce using rule 33 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 33 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 33 (statement -> statement_aux_2 .)


state 42

    (34) statement_aux -> assignment .

    SEMICOLON       reduce using rule 34 (statement_aux -> assignment .)


state 43

    (35) statement_aux -> function_call .

    SEMICOLON       reduce using rule 35 (statement_aux -> function_call .)


state 44

    (36) statement_aux -> return .

    SEMICOLON       reduce using rule 36 (statement_aux -> return .)


state 45

    (37) statement_aux -> print .

    SEMICOLON       reduce using rule 37 (statement_aux -> print .)


state 46

    (38) statement_aux -> read .

    SEMICOLON       reduce using rule 38 (statement_aux -> read .)


state 47

    (39) statement_aux_2 -> if .

    ID              reduce using rule 39 (statement_aux_2 -> if .)
    RETURN          reduce using rule 39 (statement_aux_2 -> if .)
    PRINT           reduce using rule 39 (statement_aux_2 -> if .)
    READ            reduce using rule 39 (statement_aux_2 -> if .)
    IF              reduce using rule 39 (statement_aux_2 -> if .)
    WHILE           reduce using rule 39 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 39 (statement_aux_2 -> if .)


state 48

    (40) statement_aux_2 -> while .

    ID              reduce using rule 40 (statement_aux_2 -> while .)
    RETURN          reduce using rule 40 (statement_aux_2 -> while .)
    PRINT           reduce using rule 40 (statement_aux_2 -> while .)
    READ            reduce using rule 40 (statement_aux_2 -> while .)
    IF              reduce using rule 40 (statement_aux_2 -> while .)
    WHILE           reduce using rule 40 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 40 (statement_aux_2 -> while .)


state 49

    (50) assignment -> ID . n_start_assignment ASSIGN expression
    (52) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (102) array_access -> ID . n_add_operand n_validate_is_array array_index n_pop_fake_bottom
    (131) n_start_assignment -> .
    (141) n_calling_func -> .
    (128) n_add_operand -> .

    ASSIGN          reduce using rule 131 (n_start_assignment -> .)
    L_PARENS        reduce using rule 141 (n_calling_func -> .)
    L_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)

    n_start_assignment             shift and go to state 67
    n_calling_func                 shift and go to state 68
    n_add_operand                  shift and go to state 69

state 50

    (51) assignment -> array_access . ASSIGN expression

    ASSIGN          shift and go to state 70


state 51

    (53) return -> RETURN . expression n_return
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 71
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 52

    (59) print -> PRINT . L_PARENS print_aux R_PARENS n_end_print
    (60) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 91


state 53

    (65) read -> READ . L_PARENS ID n_register_read R_PARENS

    L_PARENS        shift and go to state 92


state 54

    (54) if -> IF . if_condition
    (55) if_condition -> . L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> . L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if
    (57) if_condition -> . L_PARENS expression R_PARENS n_end_condition block n_end_if

    L_PARENS        shift and go to state 94

    if_condition                   shift and go to state 93

state 55

    (58) while -> WHILE . n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (123) n_start_while -> .

    L_PARENS        reduce using rule 123 (n_start_while -> .)

    n_start_while                  shift and go to state 95

state 56

    (26) type_aux -> GLOBAL n_is_global type .

    ID              reduce using rule 26 (type_aux -> GLOBAL n_is_global type .)


state 57

    (8) main -> FUNCTION MAIN L_PARENS R_PARENS . n_start_main function_body n_end_main
    (106) n_start_main -> .

    L_KEY_BRACKET   reduce using rule 106 (n_start_main -> .)

    n_start_main                   shift and go to state 96

state 58

    (9) function_header -> FUNCTION ID n_add_function_name L_PARENS . function_params R_PARENS COLON function_type
    (10) function_header -> FUNCTION ID n_add_function_name L_PARENS . R_PARENS COLON function_type
    (17) function_params -> . type ID n_add_param array_index COMMA function_params
    (18) function_params -> . type ID n_add_param array_index
    (19) function_params -> . type ID n_add_param COMMA function_params
    (20) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    R_PARENS        shift and go to state 98
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    function_params                shift and go to state 97
    type                           shift and go to state 99

state 59

    (25) var -> type_aux var_aux n_reset_is_global SEMICOLON .

    GLOBAL          reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    INT             reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    FLOAT           reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    STRING          reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    FUNCTION        reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    ID              reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    RETURN          reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    PRINT           reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    READ            reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    IF              reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)
    WHILE           reduce using rule 25 (var -> type_aux var_aux n_reset_is_global SEMICOLON .)


state 60

    (28) var_aux -> ID n_add_var_arr array_dim . COMMA var_aux
    (29) var_aux -> ID n_add_var_arr array_dim .

    COMMA           shift and go to state 100
    SEMICOLON       reduce using rule 29 (var_aux -> ID n_add_var_arr array_dim .)


state 61

    (44) array_dim -> L_SQUARE_BRACKET . array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done
    (45) array_dim -> L_SQUARE_BRACKET . array_dim_aux R_SQUARE_BRACKET n_array_dim_done
    (48) array_dim_aux -> . n_create_dim_node CONST_I n_array_dim_sup
    (49) array_dim_aux -> . n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup
    (132) n_create_dim_node -> .

    CONST_I         reduce using rule 132 (n_create_dim_node -> .)

    array_dim_aux                  shift and go to state 101
    n_create_dim_node              shift and go to state 102

state 62

    (30) var_aux -> ID n_add_var COMMA . var_aux
    (28) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (29) var_aux -> . ID n_add_var_arr array_dim
    (30) var_aux -> . ID n_add_var COMMA var_aux
    (31) var_aux -> . ID n_add_var

    ID              shift and go to state 23

    var_aux                        shift and go to state 103

state 63

    (11) function_body -> L_KEY_BRACKET vars statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 104


state 64

    (12) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 12 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 12 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 65

    (15) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 15 (statements -> statement statements .)


state 66

    (32) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    READ            reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 32 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 32 (statement -> statement_aux SEMICOLON .)


state 67

    (50) assignment -> ID n_start_assignment . ASSIGN expression

    ASSIGN          shift and go to state 105


state 68

    (52) function_call -> ID n_calling_func . params_pass n_validate_function_call
    (66) params_pass -> . L_PARENS expression n_validate_param params_pass_aux R_PARENS
    (67) params_pass -> . L_PARENS expression n_validate_param R_PARENS
    (68) params_pass -> . L_PARENS R_PARENS

    L_PARENS        shift and go to state 107

    params_pass                    shift and go to state 106

state 69

    (102) array_access -> ID n_add_operand . n_validate_is_array array_index n_pop_fake_bottom
    (145) n_validate_is_array -> .

    L_SQUARE_BRACKET reduce using rule 145 (n_validate_is_array -> .)

    n_validate_is_array            shift and go to state 108

state 70

    (51) assignment -> array_access ASSIGN . expression
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    array_access                   shift and go to state 90
    expression                     shift and go to state 109
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89

state 71

    (53) return -> RETURN expression . n_return
    (140) n_return -> .

    SEMICOLON       reduce using rule 140 (n_return -> .)

    n_return                       shift and go to state 110

state 72

    (63) expression -> exp . n_eval_exp AND n_add_operator expression
    (64) expression -> exp . n_eval_exp
    (115) n_eval_exp -> .

    AND             reduce using rule 115 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 115 (n_eval_exp -> .)
    COMMA           reduce using rule 115 (n_eval_exp -> .)
    R_PARENS        reduce using rule 115 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 115 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 111

state 73

    (72) exp -> xp . n_eval_xp OR n_add_operator exp
    (73) exp -> xp . n_eval_xp
    (116) n_eval_xp -> .

    OR              reduce using rule 116 (n_eval_xp -> .)
    AND             reduce using rule 116 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 116 (n_eval_xp -> .)
    COMMA           reduce using rule 116 (n_eval_xp -> .)
    R_PARENS        reduce using rule 116 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 112

state 74

    (74) xp -> x . n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> x . n_eval_x EQUALS n_add_operator xp
    (76) xp -> x . n_eval_x GREATER n_add_operator xp
    (77) xp -> x . n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> x . n_eval_x LESS n_add_operator xp
    (79) xp -> x . n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> x . n_eval_x
    (117) n_eval_x -> .

    NOT_EQUAL       reduce using rule 117 (n_eval_x -> .)
    EQUALS          reduce using rule 117 (n_eval_x -> .)
    GREATER         reduce using rule 117 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 117 (n_eval_x -> .)
    LESS            reduce using rule 117 (n_eval_x -> .)
    LESS_EQ         reduce using rule 117 (n_eval_x -> .)
    OR              reduce using rule 117 (n_eval_x -> .)
    AND             reduce using rule 117 (n_eval_x -> .)
    SEMICOLON       reduce using rule 117 (n_eval_x -> .)
    COMMA           reduce using rule 117 (n_eval_x -> .)
    R_PARENS        reduce using rule 117 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 117 (n_eval_x -> .)

    n_eval_x                       shift and go to state 113

state 75

    (81) x -> term . n_eval_term PLUS n_add_operator x
    (82) x -> term . n_eval_term MINUS n_add_operator x
    (83) x -> term . n_eval_term
    (119) n_eval_term -> .

    PLUS            reduce using rule 119 (n_eval_term -> .)
    MINUS           reduce using rule 119 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 119 (n_eval_term -> .)
    EQUALS          reduce using rule 119 (n_eval_term -> .)
    GREATER         reduce using rule 119 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 119 (n_eval_term -> .)
    LESS            reduce using rule 119 (n_eval_term -> .)
    LESS_EQ         reduce using rule 119 (n_eval_term -> .)
    OR              reduce using rule 119 (n_eval_term -> .)
    AND             reduce using rule 119 (n_eval_term -> .)
    SEMICOLON       reduce using rule 119 (n_eval_term -> .)
    COMMA           reduce using rule 119 (n_eval_term -> .)
    R_PARENS        reduce using rule 119 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 119 (n_eval_term -> .)

    n_eval_term                    shift and go to state 114

state 76

    (94) sign -> PLUS . n_register_sign
    (125) n_register_sign -> .

    L_PARENS        reduce using rule 125 (n_register_sign -> .)
    ID              reduce using rule 125 (n_register_sign -> .)
    CONST_F         reduce using rule 125 (n_register_sign -> .)
    CONST_I         reduce using rule 125 (n_register_sign -> .)
    CONST_STRING    reduce using rule 125 (n_register_sign -> .)

    n_register_sign                shift and go to state 115

state 77

    (95) sign -> MINUS . n_register_sign
    (125) n_register_sign -> .

    L_PARENS        reduce using rule 125 (n_register_sign -> .)
    ID              reduce using rule 125 (n_register_sign -> .)
    CONST_F         reduce using rule 125 (n_register_sign -> .)
    CONST_I         reduce using rule 125 (n_register_sign -> .)
    CONST_STRING    reduce using rule 125 (n_register_sign -> .)

    n_register_sign                shift and go to state 116

state 78

    (84) term -> factor . n_eval_factor TIMES n_add_operator term
    (85) term -> factor . n_eval_factor DIVIDE n_add_operator term
    (86) term -> factor . n_eval_factor
    (118) n_eval_factor -> .

    TIMES           reduce using rule 118 (n_eval_factor -> .)
    DIVIDE          reduce using rule 118 (n_eval_factor -> .)
    PLUS            reduce using rule 118 (n_eval_factor -> .)
    MINUS           reduce using rule 118 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 118 (n_eval_factor -> .)
    EQUALS          reduce using rule 118 (n_eval_factor -> .)
    GREATER         reduce using rule 118 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 118 (n_eval_factor -> .)
    LESS            reduce using rule 118 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 118 (n_eval_factor -> .)
    OR              reduce using rule 118 (n_eval_factor -> .)
    AND             reduce using rule 118 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 118 (n_eval_factor -> .)
    COMMA           reduce using rule 118 (n_eval_factor -> .)
    R_PARENS        reduce using rule 118 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 118 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 117

state 79

    (87) factor -> not . factor_aux
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    factor_aux                     shift and go to state 118
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 80

    (88) factor -> factor_aux .

    TIMES           reduce using rule 88 (factor -> factor_aux .)
    DIVIDE          reduce using rule 88 (factor -> factor_aux .)
    PLUS            reduce using rule 88 (factor -> factor_aux .)
    MINUS           reduce using rule 88 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 88 (factor -> factor_aux .)
    EQUALS          reduce using rule 88 (factor -> factor_aux .)
    GREATER         reduce using rule 88 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 88 (factor -> factor_aux .)
    LESS            reduce using rule 88 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 88 (factor -> factor_aux .)
    OR              reduce using rule 88 (factor -> factor_aux .)
    AND             reduce using rule 88 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 88 (factor -> factor_aux .)
    COMMA           reduce using rule 88 (factor -> factor_aux .)
    R_PARENS        reduce using rule 88 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 88 (factor -> factor_aux .)


state 81

    (93) not -> NOT . n_register_sign
    (125) n_register_sign -> .

    L_PARENS        reduce using rule 125 (n_register_sign -> .)
    PLUS            reduce using rule 125 (n_register_sign -> .)
    MINUS           reduce using rule 125 (n_register_sign -> .)
    ID              reduce using rule 125 (n_register_sign -> .)
    CONST_F         reduce using rule 125 (n_register_sign -> .)
    CONST_I         reduce using rule 125 (n_register_sign -> .)
    CONST_STRING    reduce using rule 125 (n_register_sign -> .)

    n_register_sign                shift and go to state 119

state 82

    (89) factor_aux -> sign . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> sign . const
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    L_PARENS        shift and go to state 120
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    const                          shift and go to state 121
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 83

    (90) factor_aux -> L_PARENS . n_add_operator expression n_pop_fake_bottom R_PARENS
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 122

state 84

    (92) factor_aux -> const .

    TIMES           reduce using rule 92 (factor_aux -> const .)
    DIVIDE          reduce using rule 92 (factor_aux -> const .)
    PLUS            reduce using rule 92 (factor_aux -> const .)
    MINUS           reduce using rule 92 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 92 (factor_aux -> const .)
    EQUALS          reduce using rule 92 (factor_aux -> const .)
    GREATER         reduce using rule 92 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 92 (factor_aux -> const .)
    LESS            reduce using rule 92 (factor_aux -> const .)
    LESS_EQ         reduce using rule 92 (factor_aux -> const .)
    OR              reduce using rule 92 (factor_aux -> const .)
    AND             reduce using rule 92 (factor_aux -> const .)
    SEMICOLON       reduce using rule 92 (factor_aux -> const .)
    COMMA           reduce using rule 92 (factor_aux -> const .)
    R_PARENS        reduce using rule 92 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 92 (factor_aux -> const .)


state 85

    (96) const -> ID . n_add_operand
    (52) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (102) array_access -> ID . n_add_operand n_validate_is_array array_index n_pop_fake_bottom
    (128) n_add_operand -> .
    (141) n_calling_func -> .

    L_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)
    TIMES           reduce using rule 128 (n_add_operand -> .)
    DIVIDE          reduce using rule 128 (n_add_operand -> .)
    PLUS            reduce using rule 128 (n_add_operand -> .)
    MINUS           reduce using rule 128 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 128 (n_add_operand -> .)
    EQUALS          reduce using rule 128 (n_add_operand -> .)
    GREATER         reduce using rule 128 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 128 (n_add_operand -> .)
    LESS            reduce using rule 128 (n_add_operand -> .)
    LESS_EQ         reduce using rule 128 (n_add_operand -> .)
    OR              reduce using rule 128 (n_add_operand -> .)
    AND             reduce using rule 128 (n_add_operand -> .)
    SEMICOLON       reduce using rule 128 (n_add_operand -> .)
    COMMA           reduce using rule 128 (n_add_operand -> .)
    R_PARENS        reduce using rule 128 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)
    L_PARENS        reduce using rule 141 (n_calling_func -> .)

    n_add_operand                  shift and go to state 123
    n_calling_func                 shift and go to state 68

state 86

    (97) const -> CONST_F . n_add_operand
    (128) n_add_operand -> .

    TIMES           reduce using rule 128 (n_add_operand -> .)
    DIVIDE          reduce using rule 128 (n_add_operand -> .)
    PLUS            reduce using rule 128 (n_add_operand -> .)
    MINUS           reduce using rule 128 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 128 (n_add_operand -> .)
    EQUALS          reduce using rule 128 (n_add_operand -> .)
    GREATER         reduce using rule 128 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 128 (n_add_operand -> .)
    LESS            reduce using rule 128 (n_add_operand -> .)
    LESS_EQ         reduce using rule 128 (n_add_operand -> .)
    OR              reduce using rule 128 (n_add_operand -> .)
    AND             reduce using rule 128 (n_add_operand -> .)
    SEMICOLON       reduce using rule 128 (n_add_operand -> .)
    COMMA           reduce using rule 128 (n_add_operand -> .)
    R_PARENS        reduce using rule 128 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)

    n_add_operand                  shift and go to state 124

state 87

    (98) const -> CONST_I . n_add_operand
    (128) n_add_operand -> .

    TIMES           reduce using rule 128 (n_add_operand -> .)
    DIVIDE          reduce using rule 128 (n_add_operand -> .)
    PLUS            reduce using rule 128 (n_add_operand -> .)
    MINUS           reduce using rule 128 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 128 (n_add_operand -> .)
    EQUALS          reduce using rule 128 (n_add_operand -> .)
    GREATER         reduce using rule 128 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 128 (n_add_operand -> .)
    LESS            reduce using rule 128 (n_add_operand -> .)
    LESS_EQ         reduce using rule 128 (n_add_operand -> .)
    OR              reduce using rule 128 (n_add_operand -> .)
    AND             reduce using rule 128 (n_add_operand -> .)
    SEMICOLON       reduce using rule 128 (n_add_operand -> .)
    COMMA           reduce using rule 128 (n_add_operand -> .)
    R_PARENS        reduce using rule 128 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)

    n_add_operand                  shift and go to state 125

state 88

    (99) const -> CONST_STRING . n_add_operand
    (128) n_add_operand -> .

    TIMES           reduce using rule 128 (n_add_operand -> .)
    DIVIDE          reduce using rule 128 (n_add_operand -> .)
    PLUS            reduce using rule 128 (n_add_operand -> .)
    MINUS           reduce using rule 128 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 128 (n_add_operand -> .)
    EQUALS          reduce using rule 128 (n_add_operand -> .)
    GREATER         reduce using rule 128 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 128 (n_add_operand -> .)
    LESS            reduce using rule 128 (n_add_operand -> .)
    LESS_EQ         reduce using rule 128 (n_add_operand -> .)
    OR              reduce using rule 128 (n_add_operand -> .)
    AND             reduce using rule 128 (n_add_operand -> .)
    SEMICOLON       reduce using rule 128 (n_add_operand -> .)
    COMMA           reduce using rule 128 (n_add_operand -> .)
    R_PARENS        reduce using rule 128 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 128 (n_add_operand -> .)

    n_add_operand                  shift and go to state 126

state 89

    (100) const -> function_call .

    TIMES           reduce using rule 100 (const -> function_call .)
    DIVIDE          reduce using rule 100 (const -> function_call .)
    PLUS            reduce using rule 100 (const -> function_call .)
    MINUS           reduce using rule 100 (const -> function_call .)
    NOT_EQUAL       reduce using rule 100 (const -> function_call .)
    EQUALS          reduce using rule 100 (const -> function_call .)
    GREATER         reduce using rule 100 (const -> function_call .)
    GREATER_EQ      reduce using rule 100 (const -> function_call .)
    LESS            reduce using rule 100 (const -> function_call .)
    LESS_EQ         reduce using rule 100 (const -> function_call .)
    OR              reduce using rule 100 (const -> function_call .)
    AND             reduce using rule 100 (const -> function_call .)
    SEMICOLON       reduce using rule 100 (const -> function_call .)
    COMMA           reduce using rule 100 (const -> function_call .)
    R_PARENS        reduce using rule 100 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 100 (const -> function_call .)


state 90

    (101) const -> array_access .

    TIMES           reduce using rule 101 (const -> array_access .)
    DIVIDE          reduce using rule 101 (const -> array_access .)
    PLUS            reduce using rule 101 (const -> array_access .)
    MINUS           reduce using rule 101 (const -> array_access .)
    NOT_EQUAL       reduce using rule 101 (const -> array_access .)
    EQUALS          reduce using rule 101 (const -> array_access .)
    GREATER         reduce using rule 101 (const -> array_access .)
    GREATER_EQ      reduce using rule 101 (const -> array_access .)
    LESS            reduce using rule 101 (const -> array_access .)
    LESS_EQ         reduce using rule 101 (const -> array_access .)
    OR              reduce using rule 101 (const -> array_access .)
    AND             reduce using rule 101 (const -> array_access .)
    SEMICOLON       reduce using rule 101 (const -> array_access .)
    COMMA           reduce using rule 101 (const -> array_access .)
    R_PARENS        reduce using rule 101 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 101 (const -> array_access .)


state 91

    (59) print -> PRINT L_PARENS . print_aux R_PARENS n_end_print
    (60) print -> PRINT L_PARENS . R_PARENS
    (61) print_aux -> . expression n_print COMMA print_aux
    (62) print_aux -> . expression n_print
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    R_PARENS        shift and go to state 128
    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    print_aux                      shift and go to state 127
    expression                     shift and go to state 129
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 92

    (65) read -> READ L_PARENS . ID n_register_read R_PARENS

    ID              shift and go to state 130


state 93

    (54) if -> IF if_condition .

    ID              reduce using rule 54 (if -> IF if_condition .)
    RETURN          reduce using rule 54 (if -> IF if_condition .)
    PRINT           reduce using rule 54 (if -> IF if_condition .)
    READ            reduce using rule 54 (if -> IF if_condition .)
    IF              reduce using rule 54 (if -> IF if_condition .)
    WHILE           reduce using rule 54 (if -> IF if_condition .)
    R_KEY_BRACKET   reduce using rule 54 (if -> IF if_condition .)


state 94

    (55) if_condition -> L_PARENS . expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> L_PARENS . expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if
    (57) if_condition -> L_PARENS . expression R_PARENS n_end_condition block n_end_if
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 131
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 95

    (58) while -> WHILE n_start_while . L_PARENS expression R_PARENS n_end_condition block n_end_while

    L_PARENS        shift and go to state 132


state 96

    (8) main -> FUNCTION MAIN L_PARENS R_PARENS n_start_main . function_body n_end_main
    (11) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (12) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 25

    function_body                  shift and go to state 133

state 97

    (9) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 134


state 98

    (10) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 135


state 99

    (17) function_params -> type . ID n_add_param array_index COMMA function_params
    (18) function_params -> type . ID n_add_param array_index
    (19) function_params -> type . ID n_add_param COMMA function_params
    (20) function_params -> type . ID n_add_param

    ID              shift and go to state 136


state 100

    (28) var_aux -> ID n_add_var_arr array_dim COMMA . var_aux
    (28) var_aux -> . ID n_add_var_arr array_dim COMMA var_aux
    (29) var_aux -> . ID n_add_var_arr array_dim
    (30) var_aux -> . ID n_add_var COMMA var_aux
    (31) var_aux -> . ID n_add_var

    ID              shift and go to state 23

    var_aux                        shift and go to state 137

state 101

    (44) array_dim -> L_SQUARE_BRACKET array_dim_aux . R_SQUARE_BRACKET array_dim_2 n_array_dim_done
    (45) array_dim -> L_SQUARE_BRACKET array_dim_aux . R_SQUARE_BRACKET n_array_dim_done

    R_SQUARE_BRACKET shift and go to state 138


state 102

    (48) array_dim_aux -> n_create_dim_node . CONST_I n_array_dim_sup
    (49) array_dim_aux -> n_create_dim_node . CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup

    CONST_I         shift and go to state 139


state 103

    (30) var_aux -> ID n_add_var COMMA var_aux .

    SEMICOLON       reduce using rule 30 (var_aux -> ID n_add_var COMMA var_aux .)


state 104

    (11) function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 11 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)
    $end            reduce using rule 11 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)


state 105

    (50) assignment -> ID n_start_assignment ASSIGN . expression
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 140
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 106

    (52) function_call -> ID n_calling_func params_pass . n_validate_function_call
    (143) n_validate_function_call -> .

    SEMICOLON       reduce using rule 143 (n_validate_function_call -> .)
    TIMES           reduce using rule 143 (n_validate_function_call -> .)
    DIVIDE          reduce using rule 143 (n_validate_function_call -> .)
    PLUS            reduce using rule 143 (n_validate_function_call -> .)
    MINUS           reduce using rule 143 (n_validate_function_call -> .)
    NOT_EQUAL       reduce using rule 143 (n_validate_function_call -> .)
    EQUALS          reduce using rule 143 (n_validate_function_call -> .)
    GREATER         reduce using rule 143 (n_validate_function_call -> .)
    GREATER_EQ      reduce using rule 143 (n_validate_function_call -> .)
    LESS            reduce using rule 143 (n_validate_function_call -> .)
    LESS_EQ         reduce using rule 143 (n_validate_function_call -> .)
    OR              reduce using rule 143 (n_validate_function_call -> .)
    AND             reduce using rule 143 (n_validate_function_call -> .)
    COMMA           reduce using rule 143 (n_validate_function_call -> .)
    R_PARENS        reduce using rule 143 (n_validate_function_call -> .)
    R_SQUARE_BRACKET reduce using rule 143 (n_validate_function_call -> .)

    n_validate_function_call       shift and go to state 141

state 107

    (66) params_pass -> L_PARENS . expression n_validate_param params_pass_aux R_PARENS
    (67) params_pass -> L_PARENS . expression n_validate_param R_PARENS
    (68) params_pass -> L_PARENS . R_PARENS
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    R_PARENS        shift and go to state 143
    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 142
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 108

    (102) array_access -> ID n_add_operand n_validate_is_array . array_index n_pop_fake_bottom
    (103) array_index -> . L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux

    L_SQUARE_BRACKET shift and go to state 145

    array_index                    shift and go to state 144

state 109

    (51) assignment -> array_access ASSIGN expression .

    SEMICOLON       reduce using rule 51 (assignment -> array_access ASSIGN expression .)


state 110

    (53) return -> RETURN expression n_return .

    SEMICOLON       reduce using rule 53 (return -> RETURN expression n_return .)


state 111

    (63) expression -> exp n_eval_exp . AND n_add_operator expression
    (64) expression -> exp n_eval_exp .

    AND             shift and go to state 146
    SEMICOLON       reduce using rule 64 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 64 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 64 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 64 (expression -> exp n_eval_exp .)


state 112

    (72) exp -> xp n_eval_xp . OR n_add_operator exp
    (73) exp -> xp n_eval_xp .

    OR              shift and go to state 147
    AND             reduce using rule 73 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 73 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 73 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 73 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 73 (exp -> xp n_eval_xp .)


state 113

    (74) xp -> x n_eval_x . NOT_EQUAL n_add_operator xp
    (75) xp -> x n_eval_x . EQUALS n_add_operator xp
    (76) xp -> x n_eval_x . GREATER n_add_operator xp
    (77) xp -> x n_eval_x . GREATER_EQ n_add_operator xp
    (78) xp -> x n_eval_x . LESS n_add_operator xp
    (79) xp -> x n_eval_x . LESS_EQ n_add_operator xp
    (80) xp -> x n_eval_x .

    NOT_EQUAL       shift and go to state 148
    EQUALS          shift and go to state 149
    GREATER         shift and go to state 150
    GREATER_EQ      shift and go to state 151
    LESS            shift and go to state 152
    LESS_EQ         shift and go to state 153
    OR              reduce using rule 80 (xp -> x n_eval_x .)
    AND             reduce using rule 80 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 80 (xp -> x n_eval_x .)
    COMMA           reduce using rule 80 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 80 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 80 (xp -> x n_eval_x .)


state 114

    (81) x -> term n_eval_term . PLUS n_add_operator x
    (82) x -> term n_eval_term . MINUS n_add_operator x
    (83) x -> term n_eval_term .

    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    NOT_EQUAL       reduce using rule 83 (x -> term n_eval_term .)
    EQUALS          reduce using rule 83 (x -> term n_eval_term .)
    GREATER         reduce using rule 83 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 83 (x -> term n_eval_term .)
    LESS            reduce using rule 83 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 83 (x -> term n_eval_term .)
    OR              reduce using rule 83 (x -> term n_eval_term .)
    AND             reduce using rule 83 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 83 (x -> term n_eval_term .)
    COMMA           reduce using rule 83 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 83 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 83 (x -> term n_eval_term .)


state 115

    (94) sign -> PLUS n_register_sign .

    L_PARENS        reduce using rule 94 (sign -> PLUS n_register_sign .)
    ID              reduce using rule 94 (sign -> PLUS n_register_sign .)
    CONST_F         reduce using rule 94 (sign -> PLUS n_register_sign .)
    CONST_I         reduce using rule 94 (sign -> PLUS n_register_sign .)
    CONST_STRING    reduce using rule 94 (sign -> PLUS n_register_sign .)


state 116

    (95) sign -> MINUS n_register_sign .

    L_PARENS        reduce using rule 95 (sign -> MINUS n_register_sign .)
    ID              reduce using rule 95 (sign -> MINUS n_register_sign .)
    CONST_F         reduce using rule 95 (sign -> MINUS n_register_sign .)
    CONST_I         reduce using rule 95 (sign -> MINUS n_register_sign .)
    CONST_STRING    reduce using rule 95 (sign -> MINUS n_register_sign .)


state 117

    (84) term -> factor n_eval_factor . TIMES n_add_operator term
    (85) term -> factor n_eval_factor . DIVIDE n_add_operator term
    (86) term -> factor n_eval_factor .

    TIMES           shift and go to state 156
    DIVIDE          shift and go to state 157
    PLUS            reduce using rule 86 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 86 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 86 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 86 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 86 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 86 (term -> factor n_eval_factor .)
    LESS            reduce using rule 86 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 86 (term -> factor n_eval_factor .)
    OR              reduce using rule 86 (term -> factor n_eval_factor .)
    AND             reduce using rule 86 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 86 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 86 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 86 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 86 (term -> factor n_eval_factor .)


state 118

    (87) factor -> not factor_aux .

    TIMES           reduce using rule 87 (factor -> not factor_aux .)
    DIVIDE          reduce using rule 87 (factor -> not factor_aux .)
    PLUS            reduce using rule 87 (factor -> not factor_aux .)
    MINUS           reduce using rule 87 (factor -> not factor_aux .)
    NOT_EQUAL       reduce using rule 87 (factor -> not factor_aux .)
    EQUALS          reduce using rule 87 (factor -> not factor_aux .)
    GREATER         reduce using rule 87 (factor -> not factor_aux .)
    GREATER_EQ      reduce using rule 87 (factor -> not factor_aux .)
    LESS            reduce using rule 87 (factor -> not factor_aux .)
    LESS_EQ         reduce using rule 87 (factor -> not factor_aux .)
    OR              reduce using rule 87 (factor -> not factor_aux .)
    AND             reduce using rule 87 (factor -> not factor_aux .)
    SEMICOLON       reduce using rule 87 (factor -> not factor_aux .)
    COMMA           reduce using rule 87 (factor -> not factor_aux .)
    R_PARENS        reduce using rule 87 (factor -> not factor_aux .)
    R_SQUARE_BRACKET reduce using rule 87 (factor -> not factor_aux .)


state 119

    (93) not -> NOT n_register_sign .

    L_PARENS        reduce using rule 93 (not -> NOT n_register_sign .)
    PLUS            reduce using rule 93 (not -> NOT n_register_sign .)
    MINUS           reduce using rule 93 (not -> NOT n_register_sign .)
    ID              reduce using rule 93 (not -> NOT n_register_sign .)
    CONST_F         reduce using rule 93 (not -> NOT n_register_sign .)
    CONST_I         reduce using rule 93 (not -> NOT n_register_sign .)
    CONST_STRING    reduce using rule 93 (not -> NOT n_register_sign .)


state 120

    (89) factor_aux -> sign L_PARENS . n_add_operator expression n_pop_fake_bottom R_PARENS
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 158

state 121

    (91) factor_aux -> sign const .

    TIMES           reduce using rule 91 (factor_aux -> sign const .)
    DIVIDE          reduce using rule 91 (factor_aux -> sign const .)
    PLUS            reduce using rule 91 (factor_aux -> sign const .)
    MINUS           reduce using rule 91 (factor_aux -> sign const .)
    NOT_EQUAL       reduce using rule 91 (factor_aux -> sign const .)
    EQUALS          reduce using rule 91 (factor_aux -> sign const .)
    GREATER         reduce using rule 91 (factor_aux -> sign const .)
    GREATER_EQ      reduce using rule 91 (factor_aux -> sign const .)
    LESS            reduce using rule 91 (factor_aux -> sign const .)
    LESS_EQ         reduce using rule 91 (factor_aux -> sign const .)
    OR              reduce using rule 91 (factor_aux -> sign const .)
    AND             reduce using rule 91 (factor_aux -> sign const .)
    SEMICOLON       reduce using rule 91 (factor_aux -> sign const .)
    COMMA           reduce using rule 91 (factor_aux -> sign const .)
    R_PARENS        reduce using rule 91 (factor_aux -> sign const .)
    R_SQUARE_BRACKET reduce using rule 91 (factor_aux -> sign const .)


state 122

    (90) factor_aux -> L_PARENS n_add_operator . expression n_pop_fake_bottom R_PARENS
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 159
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 123

    (96) const -> ID n_add_operand .
    (102) array_access -> ID n_add_operand . n_validate_is_array array_index n_pop_fake_bottom
    (145) n_validate_is_array -> .

    TIMES           reduce using rule 96 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 96 (const -> ID n_add_operand .)
    PLUS            reduce using rule 96 (const -> ID n_add_operand .)
    MINUS           reduce using rule 96 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 96 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 96 (const -> ID n_add_operand .)
    GREATER         reduce using rule 96 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 96 (const -> ID n_add_operand .)
    LESS            reduce using rule 96 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 96 (const -> ID n_add_operand .)
    OR              reduce using rule 96 (const -> ID n_add_operand .)
    AND             reduce using rule 96 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 96 (const -> ID n_add_operand .)
    COMMA           reduce using rule 96 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 96 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 96 (const -> ID n_add_operand .)
    L_SQUARE_BRACKET reduce using rule 145 (n_validate_is_array -> .)

    n_validate_is_array            shift and go to state 108

state 124

    (97) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 97 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 97 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 97 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 97 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 97 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 97 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 97 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 97 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 97 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 97 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 97 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 97 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 97 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 97 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 97 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 97 (const -> CONST_F n_add_operand .)


state 125

    (98) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 98 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 98 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 98 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 98 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 98 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 98 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 98 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 98 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 98 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 98 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 98 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 98 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 98 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 98 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 98 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 98 (const -> CONST_I n_add_operand .)


state 126

    (99) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 99 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 99 (const -> CONST_STRING n_add_operand .)


state 127

    (59) print -> PRINT L_PARENS print_aux . R_PARENS n_end_print

    R_PARENS        shift and go to state 160


state 128

    (60) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 60 (print -> PRINT L_PARENS R_PARENS .)


state 129

    (61) print_aux -> expression . n_print COMMA print_aux
    (62) print_aux -> expression . n_print
    (138) n_print -> .

    COMMA           reduce using rule 138 (n_print -> .)
    R_PARENS        reduce using rule 138 (n_print -> .)

    n_print                        shift and go to state 161

state 130

    (65) read -> READ L_PARENS ID . n_register_read R_PARENS
    (144) n_register_read -> .

    R_PARENS        reduce using rule 144 (n_register_read -> .)

    n_register_read                shift and go to state 162

state 131

    (55) if_condition -> L_PARENS expression . R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> L_PARENS expression . R_PARENS n_end_condition block ELSE n_start_else block n_end_if
    (57) if_condition -> L_PARENS expression . R_PARENS n_end_condition block n_end_if

    R_PARENS        shift and go to state 163


state 132

    (58) while -> WHILE n_start_while L_PARENS . expression R_PARENS n_end_condition block n_end_while
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 164
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 133

    (8) main -> FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body . n_end_main
    (110) n_end_main -> .

    $end            reduce using rule 110 (n_end_main -> .)

    n_end_main                     shift and go to state 165

state 134

    (9) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 166


state 135

    (10) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON . function_type
    (21) function_type -> . INT n_add_function_type
    (22) function_type -> . FLOAT n_add_function_type
    (23) function_type -> . STRING n_add_function_type
    (24) function_type -> . VOID n_add_function_type

    INT             shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 170
    VOID            shift and go to state 171

    function_type                  shift and go to state 167

state 136

    (17) function_params -> type ID . n_add_param array_index COMMA function_params
    (18) function_params -> type ID . n_add_param array_index
    (19) function_params -> type ID . n_add_param COMMA function_params
    (20) function_params -> type ID . n_add_param
    (113) n_add_param -> .

    COMMA           reduce using rule 113 (n_add_param -> .)
    L_SQUARE_BRACKET reduce using rule 113 (n_add_param -> .)
    R_PARENS        reduce using rule 113 (n_add_param -> .)

    n_add_param                    shift and go to state 172

state 137

    (28) var_aux -> ID n_add_var_arr array_dim COMMA var_aux .

    SEMICOLON       reduce using rule 28 (var_aux -> ID n_add_var_arr array_dim COMMA var_aux .)


state 138

    (44) array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET . array_dim_2 n_array_dim_done
    (45) array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET . n_array_dim_done
    (46) array_dim_2 -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2
    (47) array_dim_2 -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET
    (133) n_array_dim_done -> .

    L_SQUARE_BRACKET shift and go to state 173
    COMMA           reduce using rule 133 (n_array_dim_done -> .)
    SEMICOLON       reduce using rule 133 (n_array_dim_done -> .)

    array_dim_2                    shift and go to state 174
    n_array_dim_done               shift and go to state 175

state 139

    (48) array_dim_aux -> n_create_dim_node CONST_I . n_array_dim_sup
    (49) array_dim_aux -> n_create_dim_node CONST_I . n_array_dim_inf DOT DOT CONST_I n_array_dim_sup
    (135) n_array_dim_sup -> .
    (134) n_array_dim_inf -> .

    R_SQUARE_BRACKET reduce using rule 135 (n_array_dim_sup -> .)
    DOT             reduce using rule 134 (n_array_dim_inf -> .)

    n_array_dim_sup                shift and go to state 176
    n_array_dim_inf                shift and go to state 177

state 140

    (50) assignment -> ID n_start_assignment ASSIGN expression .

    SEMICOLON       reduce using rule 50 (assignment -> ID n_start_assignment ASSIGN expression .)


state 141

    (52) function_call -> ID n_calling_func params_pass n_validate_function_call .

    SEMICOLON       reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    TIMES           reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    DIVIDE          reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    PLUS            reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    MINUS           reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    NOT_EQUAL       reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    EQUALS          reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER         reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER_EQ      reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS            reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS_EQ         reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    OR              reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    AND             reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    COMMA           reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_PARENS        reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_SQUARE_BRACKET reduce using rule 52 (function_call -> ID n_calling_func params_pass n_validate_function_call .)


state 142

    (66) params_pass -> L_PARENS expression . n_validate_param params_pass_aux R_PARENS
    (67) params_pass -> L_PARENS expression . n_validate_param R_PARENS
    (142) n_validate_param -> .

    R_PARENS        reduce using rule 142 (n_validate_param -> .)
    COMMA           reduce using rule 142 (n_validate_param -> .)

    n_validate_param               shift and go to state 178

state 143

    (68) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 68 (params_pass -> L_PARENS R_PARENS .)


state 144

    (102) array_access -> ID n_add_operand n_validate_is_array array_index . n_pop_fake_bottom
    (130) n_pop_fake_bottom -> .

    ASSIGN          reduce using rule 130 (n_pop_fake_bottom -> .)
    TIMES           reduce using rule 130 (n_pop_fake_bottom -> .)
    DIVIDE          reduce using rule 130 (n_pop_fake_bottom -> .)
    PLUS            reduce using rule 130 (n_pop_fake_bottom -> .)
    MINUS           reduce using rule 130 (n_pop_fake_bottom -> .)
    NOT_EQUAL       reduce using rule 130 (n_pop_fake_bottom -> .)
    EQUALS          reduce using rule 130 (n_pop_fake_bottom -> .)
    GREATER         reduce using rule 130 (n_pop_fake_bottom -> .)
    GREATER_EQ      reduce using rule 130 (n_pop_fake_bottom -> .)
    LESS            reduce using rule 130 (n_pop_fake_bottom -> .)
    LESS_EQ         reduce using rule 130 (n_pop_fake_bottom -> .)
    OR              reduce using rule 130 (n_pop_fake_bottom -> .)
    AND             reduce using rule 130 (n_pop_fake_bottom -> .)
    SEMICOLON       reduce using rule 130 (n_pop_fake_bottom -> .)
    COMMA           reduce using rule 130 (n_pop_fake_bottom -> .)
    R_PARENS        reduce using rule 130 (n_pop_fake_bottom -> .)
    R_SQUARE_BRACKET reduce using rule 130 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 179

state 145

    (103) array_index -> L_SQUARE_BRACKET . expression n_ver_index R_SQUARE_BRACKET array_index_aux
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 180
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 146

    (63) expression -> exp n_eval_exp AND . n_add_operator expression
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 181

state 147

    (72) exp -> xp n_eval_xp OR . n_add_operator exp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 182

state 148

    (74) xp -> x n_eval_x NOT_EQUAL . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 183

state 149

    (75) xp -> x n_eval_x EQUALS . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 184

state 150

    (76) xp -> x n_eval_x GREATER . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 185

state 151

    (77) xp -> x n_eval_x GREATER_EQ . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 186

state 152

    (78) xp -> x n_eval_x LESS . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 187

state 153

    (79) xp -> x n_eval_x LESS_EQ . n_add_operator xp
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 188

state 154

    (81) x -> term n_eval_term PLUS . n_add_operator x
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 189

state 155

    (82) x -> term n_eval_term MINUS . n_add_operator x
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 190

state 156

    (84) term -> factor n_eval_factor TIMES . n_add_operator term
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 191

state 157

    (85) term -> factor n_eval_factor DIVIDE . n_add_operator term
    (129) n_add_operator -> .

    NOT             reduce using rule 129 (n_add_operator -> .)
    L_PARENS        reduce using rule 129 (n_add_operator -> .)
    PLUS            reduce using rule 129 (n_add_operator -> .)
    MINUS           reduce using rule 129 (n_add_operator -> .)
    ID              reduce using rule 129 (n_add_operator -> .)
    CONST_F         reduce using rule 129 (n_add_operator -> .)
    CONST_I         reduce using rule 129 (n_add_operator -> .)
    CONST_STRING    reduce using rule 129 (n_add_operator -> .)

    n_add_operator                 shift and go to state 192

state 158

    (89) factor_aux -> sign L_PARENS n_add_operator . expression n_pop_fake_bottom R_PARENS
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    sign                           shift and go to state 82
    expression                     shift and go to state 193
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 159

    (90) factor_aux -> L_PARENS n_add_operator expression . n_pop_fake_bottom R_PARENS
    (130) n_pop_fake_bottom -> .

    R_PARENS        reduce using rule 130 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 194

state 160

    (59) print -> PRINT L_PARENS print_aux R_PARENS . n_end_print
    (139) n_end_print -> .

    SEMICOLON       reduce using rule 139 (n_end_print -> .)

    n_end_print                    shift and go to state 195

state 161

    (61) print_aux -> expression n_print . COMMA print_aux
    (62) print_aux -> expression n_print .

    COMMA           shift and go to state 196
    R_PARENS        reduce using rule 62 (print_aux -> expression n_print .)


state 162

    (65) read -> READ L_PARENS ID n_register_read . R_PARENS

    R_PARENS        shift and go to state 197


state 163

    (55) if_condition -> L_PARENS expression R_PARENS . n_end_condition block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> L_PARENS expression R_PARENS . n_end_condition block ELSE n_start_else block n_end_if
    (57) if_condition -> L_PARENS expression R_PARENS . n_end_condition block n_end_if
    (120) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 120 (n_end_condition -> .)

    n_end_condition                shift and go to state 198

state 164

    (58) while -> WHILE n_start_while L_PARENS expression . R_PARENS n_end_condition block n_end_while

    R_PARENS        shift and go to state 199


state 165

    (8) main -> FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main .

    $end            reduce using rule 8 (main -> FUNCTION MAIN L_PARENS R_PARENS n_start_main function_body n_end_main .)


state 166

    (9) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON . function_type
    (21) function_type -> . INT n_add_function_type
    (22) function_type -> . FLOAT n_add_function_type
    (23) function_type -> . STRING n_add_function_type
    (24) function_type -> . VOID n_add_function_type

    INT             shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 170
    VOID            shift and go to state 171

    function_type                  shift and go to state 200

state 167

    (10) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 10 (function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .)


state 168

    (21) function_type -> INT . n_add_function_type
    (108) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 108 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 201

state 169

    (22) function_type -> FLOAT . n_add_function_type
    (108) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 108 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 202

state 170

    (23) function_type -> STRING . n_add_function_type
    (108) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 108 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 203

state 171

    (24) function_type -> VOID . n_add_function_type
    (108) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 108 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 204

state 172

    (17) function_params -> type ID n_add_param . array_index COMMA function_params
    (18) function_params -> type ID n_add_param . array_index
    (19) function_params -> type ID n_add_param . COMMA function_params
    (20) function_params -> type ID n_add_param .
    (103) array_index -> . L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux

    COMMA           shift and go to state 206
    R_PARENS        reduce using rule 20 (function_params -> type ID n_add_param .)
    L_SQUARE_BRACKET shift and go to state 145

    array_index                    shift and go to state 205

state 173

    (46) array_dim_2 -> L_SQUARE_BRACKET . array_dim_aux R_SQUARE_BRACKET array_dim_2
    (47) array_dim_2 -> L_SQUARE_BRACKET . array_dim_aux R_SQUARE_BRACKET
    (48) array_dim_aux -> . n_create_dim_node CONST_I n_array_dim_sup
    (49) array_dim_aux -> . n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup
    (132) n_create_dim_node -> .

    CONST_I         reduce using rule 132 (n_create_dim_node -> .)

    array_dim_aux                  shift and go to state 207
    n_create_dim_node              shift and go to state 102

state 174

    (44) array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 . n_array_dim_done
    (133) n_array_dim_done -> .

    COMMA           reduce using rule 133 (n_array_dim_done -> .)
    SEMICOLON       reduce using rule 133 (n_array_dim_done -> .)

    n_array_dim_done               shift and go to state 208

state 175

    (45) array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET n_array_dim_done .

    COMMA           reduce using rule 45 (array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET n_array_dim_done .)
    SEMICOLON       reduce using rule 45 (array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET n_array_dim_done .)


state 176

    (48) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_sup .

    R_SQUARE_BRACKET reduce using rule 48 (array_dim_aux -> n_create_dim_node CONST_I n_array_dim_sup .)


state 177

    (49) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf . DOT DOT CONST_I n_array_dim_sup

    DOT             shift and go to state 209


state 178

    (66) params_pass -> L_PARENS expression n_validate_param . params_pass_aux R_PARENS
    (67) params_pass -> L_PARENS expression n_validate_param . R_PARENS
    (69) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (70) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        shift and go to state 211
    COMMA           shift and go to state 212

    params_pass_aux                shift and go to state 210

state 179

    (102) array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .

    ASSIGN          reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    TIMES           reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    DIVIDE          reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    PLUS            reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    MINUS           reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    NOT_EQUAL       reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    EQUALS          reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    GREATER         reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    GREATER_EQ      reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    LESS            reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    LESS_EQ         reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    OR              reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    AND             reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    SEMICOLON       reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    COMMA           reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    R_PARENS        reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)
    R_SQUARE_BRACKET reduce using rule 102 (array_access -> ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom .)


state 180

    (103) array_index -> L_SQUARE_BRACKET expression . n_ver_index R_SQUARE_BRACKET array_index_aux
    (137) n_ver_index -> .

    R_SQUARE_BRACKET reduce using rule 137 (n_ver_index -> .)

    n_ver_index                    shift and go to state 213

state 181

    (63) expression -> exp n_eval_exp AND n_add_operator . expression
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    exp                            shift and go to state 72
    expression                     shift and go to state 214
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 182

    (72) exp -> xp n_eval_xp OR n_add_operator . exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    xp                             shift and go to state 73
    exp                            shift and go to state 215
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 183

    (74) xp -> x n_eval_x NOT_EQUAL n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 216
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 184

    (75) xp -> x n_eval_x EQUALS n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 217
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 185

    (76) xp -> x n_eval_x GREATER n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 218
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 186

    (77) xp -> x n_eval_x GREATER_EQ n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 219
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 187

    (78) xp -> x n_eval_x LESS n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 220
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 188

    (79) xp -> x n_eval_x LESS_EQ n_add_operator . xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    x                              shift and go to state 74
    xp                             shift and go to state 221
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 189

    (81) x -> term n_eval_term PLUS n_add_operator . x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    term                           shift and go to state 75
    x                              shift and go to state 222
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 190

    (82) x -> term n_eval_term MINUS n_add_operator . x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    term                           shift and go to state 75
    x                              shift and go to state 223
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 191

    (84) term -> factor n_eval_factor TIMES n_add_operator . term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    factor                         shift and go to state 78
    term                           shift and go to state 224
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 192

    (85) term -> factor n_eval_factor DIVIDE n_add_operator . term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    factor                         shift and go to state 78
    term                           shift and go to state 225
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 193

    (89) factor_aux -> sign L_PARENS n_add_operator expression . n_pop_fake_bottom R_PARENS
    (130) n_pop_fake_bottom -> .

    R_PARENS        reduce using rule 130 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 226

state 194

    (90) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom . R_PARENS

    R_PARENS        shift and go to state 227


state 195

    (59) print -> PRINT L_PARENS print_aux R_PARENS n_end_print .

    SEMICOLON       reduce using rule 59 (print -> PRINT L_PARENS print_aux R_PARENS n_end_print .)


state 196

    (61) print_aux -> expression n_print COMMA . print_aux
    (61) print_aux -> . expression n_print COMMA print_aux
    (62) print_aux -> . expression n_print
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 129
    print_aux                      shift and go to state 228
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 197

    (65) read -> READ L_PARENS ID n_register_read R_PARENS .

    SEMICOLON       reduce using rule 65 (read -> READ L_PARENS ID n_register_read R_PARENS .)


state 198

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition . block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition . block ELSE n_start_else block n_end_if
    (57) if_condition -> L_PARENS expression R_PARENS n_end_condition . block n_end_if
    (71) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 230

    block                          shift and go to state 229

state 199

    (58) while -> WHILE n_start_while L_PARENS expression R_PARENS . n_end_condition block n_end_while
    (120) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 120 (n_end_condition -> .)

    n_end_condition                shift and go to state 231

state 200

    (9) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 9 (function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .)


state 201

    (21) function_type -> INT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> INT n_add_function_type .)


state 202

    (22) function_type -> FLOAT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 22 (function_type -> FLOAT n_add_function_type .)


state 203

    (23) function_type -> STRING n_add_function_type .

    L_KEY_BRACKET   reduce using rule 23 (function_type -> STRING n_add_function_type .)


state 204

    (24) function_type -> VOID n_add_function_type .

    L_KEY_BRACKET   reduce using rule 24 (function_type -> VOID n_add_function_type .)


state 205

    (17) function_params -> type ID n_add_param array_index . COMMA function_params
    (18) function_params -> type ID n_add_param array_index .

    COMMA           shift and go to state 232
    R_PARENS        reduce using rule 18 (function_params -> type ID n_add_param array_index .)


state 206

    (19) function_params -> type ID n_add_param COMMA . function_params
    (17) function_params -> . type ID n_add_param array_index COMMA function_params
    (18) function_params -> . type ID n_add_param array_index
    (19) function_params -> . type ID n_add_param COMMA function_params
    (20) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 99
    function_params                shift and go to state 233

state 207

    (46) array_dim_2 -> L_SQUARE_BRACKET array_dim_aux . R_SQUARE_BRACKET array_dim_2
    (47) array_dim_2 -> L_SQUARE_BRACKET array_dim_aux . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 234


state 208

    (44) array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done .

    COMMA           reduce using rule 44 (array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done .)
    SEMICOLON       reduce using rule 44 (array_dim -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 n_array_dim_done .)


state 209

    (49) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT . DOT CONST_I n_array_dim_sup

    DOT             shift and go to state 235


state 210

    (66) params_pass -> L_PARENS expression n_validate_param params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 236


state 211

    (67) params_pass -> L_PARENS expression n_validate_param R_PARENS .

    SEMICOLON       reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    TIMES           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    DIVIDE          reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    PLUS            reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    MINUS           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    NOT_EQUAL       reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    EQUALS          reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER         reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER_EQ      reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS            reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS_EQ         reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    OR              reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    AND             reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    COMMA           reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_PARENS        reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 67 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)


state 212

    (69) params_pass_aux -> COMMA . expression n_validate_param params_pass_aux
    (70) params_pass_aux -> COMMA . expression n_validate_param
    (63) expression -> . exp n_eval_exp AND n_add_operator expression
    (64) expression -> . exp n_eval_exp
    (72) exp -> . xp n_eval_xp OR n_add_operator exp
    (73) exp -> . xp n_eval_xp
    (74) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (75) xp -> . x n_eval_x EQUALS n_add_operator xp
    (76) xp -> . x n_eval_x GREATER n_add_operator xp
    (77) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (78) xp -> . x n_eval_x LESS n_add_operator xp
    (79) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term PLUS n_add_operator x
    (82) x -> . term n_eval_term MINUS n_add_operator x
    (83) x -> . term n_eval_term
    (84) term -> . factor n_eval_factor TIMES n_add_operator term
    (85) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (86) term -> . factor n_eval_factor
    (87) factor -> . not factor_aux
    (88) factor -> . factor_aux
    (93) not -> . NOT n_register_sign
    (89) factor_aux -> . sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (90) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (91) factor_aux -> . sign const
    (92) factor_aux -> . const
    (94) sign -> . PLUS n_register_sign
    (95) sign -> . MINUS n_register_sign
    (96) const -> . ID n_add_operand
    (97) const -> . CONST_F n_add_operand
    (98) const -> . CONST_I n_add_operand
    (99) const -> . CONST_STRING n_add_operand
    (100) const -> . function_call
    (101) const -> . array_access
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    NOT             shift and go to state 81
    L_PARENS        shift and go to state 83
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    ID              shift and go to state 85
    CONST_F         shift and go to state 86
    CONST_I         shift and go to state 87
    CONST_STRING    shift and go to state 88

    expression                     shift and go to state 237
    exp                            shift and go to state 72
    xp                             shift and go to state 73
    x                              shift and go to state 74
    term                           shift and go to state 75
    factor                         shift and go to state 78
    not                            shift and go to state 79
    factor_aux                     shift and go to state 80
    sign                           shift and go to state 82
    const                          shift and go to state 84
    function_call                  shift and go to state 89
    array_access                   shift and go to state 90

state 213

    (103) array_index -> L_SQUARE_BRACKET expression n_ver_index . R_SQUARE_BRACKET array_index_aux

    R_SQUARE_BRACKET shift and go to state 238


state 214

    (63) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 63 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 63 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 63 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 63 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 215

    (72) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 72 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 72 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 72 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 72 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 72 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 216

    (74) xp -> x n_eval_x NOT_EQUAL n_add_operator xp .

    OR              reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    AND             reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    SEMICOLON       reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    COMMA           reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_PARENS        reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 74 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)


state 217

    (75) xp -> x n_eval_x EQUALS n_add_operator xp .

    OR              reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    AND             reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    SEMICOLON       reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    COMMA           reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_PARENS        reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 75 (xp -> x n_eval_x EQUALS n_add_operator xp .)


state 218

    (76) xp -> x n_eval_x GREATER n_add_operator xp .

    OR              reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)
    AND             reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)
    SEMICOLON       reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)
    COMMA           reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_PARENS        reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 76 (xp -> x n_eval_x GREATER n_add_operator xp .)


state 219

    (77) xp -> x n_eval_x GREATER_EQ n_add_operator xp .

    OR              reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    AND             reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    COMMA           reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 77 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)


state 220

    (78) xp -> x n_eval_x LESS n_add_operator xp .

    OR              reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)
    AND             reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)
    SEMICOLON       reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)
    COMMA           reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_PARENS        reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 78 (xp -> x n_eval_x LESS n_add_operator xp .)


state 221

    (79) xp -> x n_eval_x LESS_EQ n_add_operator xp .

    OR              reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    AND             reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    COMMA           reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 79 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)


state 222

    (81) x -> term n_eval_term PLUS n_add_operator x .

    NOT_EQUAL       reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    EQUALS          reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER         reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER_EQ      reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS            reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS_EQ         reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    OR              reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    AND             reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    SEMICOLON       reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    COMMA           reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    R_PARENS        reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 81 (x -> term n_eval_term PLUS n_add_operator x .)


state 223

    (82) x -> term n_eval_term MINUS n_add_operator x .

    NOT_EQUAL       reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    EQUALS          reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER         reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER_EQ      reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS            reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS_EQ         reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    OR              reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    AND             reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    SEMICOLON       reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    COMMA           reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    R_PARENS        reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 82 (x -> term n_eval_term MINUS n_add_operator x .)


state 224

    (84) term -> factor n_eval_factor TIMES n_add_operator term .

    PLUS            reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    MINUS           reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    NOT_EQUAL       reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    EQUALS          reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER         reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER_EQ      reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS            reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS_EQ         reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    OR              reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    AND             reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    SEMICOLON       reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    COMMA           reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_PARENS        reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 84 (term -> factor n_eval_factor TIMES n_add_operator term .)


state 225

    (85) term -> factor n_eval_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    NOT_EQUAL       reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    EQUALS          reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER         reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER_EQ      reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS            reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS_EQ         reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    COMMA           reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_PARENS        reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 85 (term -> factor n_eval_factor DIVIDE n_add_operator term .)


state 226

    (89) factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom . R_PARENS

    R_PARENS        shift and go to state 239


state 227

    (90) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .

    TIMES           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    DIVIDE          reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    PLUS            reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    MINUS           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    NOT_EQUAL       reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    EQUALS          reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER         reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER_EQ      reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS            reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS_EQ         reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    OR              reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    AND             reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    SEMICOLON       reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    COMMA           reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_PARENS        reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 90 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)


state 228

    (61) print_aux -> expression n_print COMMA print_aux .

    R_PARENS        reduce using rule 61 (print_aux -> expression n_print COMMA print_aux .)


state 229

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition block . ELIF n_start_else if_condition n_end_if
    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition block . ELSE n_start_else block n_end_if
    (57) if_condition -> L_PARENS expression R_PARENS n_end_condition block . n_end_if
    (122) n_end_if -> .

    ELIF            shift and go to state 240
    ELSE            shift and go to state 242
    ID              reduce using rule 122 (n_end_if -> .)
    RETURN          reduce using rule 122 (n_end_if -> .)
    PRINT           reduce using rule 122 (n_end_if -> .)
    READ            reduce using rule 122 (n_end_if -> .)
    IF              reduce using rule 122 (n_end_if -> .)
    WHILE           reduce using rule 122 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 122 (n_end_if -> .)

    n_end_if                       shift and go to state 241

state 230

    (71) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (15) statements -> . statement statements
    (16) statements -> . statement
    (32) statement -> . statement_aux SEMICOLON
    (33) statement -> . statement_aux_2
    (34) statement_aux -> . assignment
    (35) statement_aux -> . function_call
    (36) statement_aux -> . return
    (37) statement_aux -> . print
    (38) statement_aux -> . read
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (50) assignment -> . ID n_start_assignment ASSIGN expression
    (51) assignment -> . array_access ASSIGN expression
    (52) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (53) return -> . RETURN expression n_return
    (59) print -> . PRINT L_PARENS print_aux R_PARENS n_end_print
    (60) print -> . PRINT L_PARENS R_PARENS
    (65) read -> . READ L_PARENS ID n_register_read R_PARENS
    (54) if -> . IF if_condition
    (58) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (102) array_access -> . ID n_add_operand n_validate_is_array array_index n_pop_fake_bottom

    ID              shift and go to state 49
    RETURN          shift and go to state 51
    PRINT           shift and go to state 52
    READ            shift and go to state 53
    IF              shift and go to state 54
    WHILE           shift and go to state 55

    statements                     shift and go to state 243
    statement                      shift and go to state 39
    statement_aux                  shift and go to state 40
    statement_aux_2                shift and go to state 41
    assignment                     shift and go to state 42
    function_call                  shift and go to state 43
    return                         shift and go to state 44
    print                          shift and go to state 45
    read                           shift and go to state 46
    if                             shift and go to state 47
    while                          shift and go to state 48
    array_access                   shift and go to state 50

state 231

    (58) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition . block n_end_while
    (71) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 230

    block                          shift and go to state 244

state 232

    (17) function_params -> type ID n_add_param array_index COMMA . function_params
    (17) function_params -> . type ID n_add_param array_index COMMA function_params
    (18) function_params -> . type ID n_add_param array_index
    (19) function_params -> . type ID n_add_param COMMA function_params
    (20) function_params -> . type ID n_add_param
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14

    type                           shift and go to state 99
    function_params                shift and go to state 245

state 233

    (19) function_params -> type ID n_add_param COMMA function_params .

    R_PARENS        reduce using rule 19 (function_params -> type ID n_add_param COMMA function_params .)


state 234

    (46) array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET . array_dim_2
    (47) array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET .
    (46) array_dim_2 -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2
    (47) array_dim_2 -> . L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET

    COMMA           reduce using rule 47 (array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 47 (array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET .)
    L_SQUARE_BRACKET shift and go to state 173

    array_dim_2                    shift and go to state 246

state 235

    (49) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT DOT . CONST_I n_array_dim_sup

    CONST_I         shift and go to state 247


state 236

    (66) params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    TIMES           reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    PLUS            reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    MINUS           reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER         reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS            reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    OR              reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    AND             reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    COMMA           reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 66 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)


state 237

    (69) params_pass_aux -> COMMA expression . n_validate_param params_pass_aux
    (70) params_pass_aux -> COMMA expression . n_validate_param
    (142) n_validate_param -> .

    COMMA           reduce using rule 142 (n_validate_param -> .)
    R_PARENS        reduce using rule 142 (n_validate_param -> .)

    n_validate_param               shift and go to state 248

state 238

    (103) array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET . array_index_aux
    (104) array_index_aux -> . array_index
    (105) array_index_aux -> . n_get_array_dir
    (103) array_index -> . L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux
    (136) n_get_array_dir -> .

    L_SQUARE_BRACKET shift and go to state 145
    ASSIGN          reduce using rule 136 (n_get_array_dir -> .)
    TIMES           reduce using rule 136 (n_get_array_dir -> .)
    DIVIDE          reduce using rule 136 (n_get_array_dir -> .)
    PLUS            reduce using rule 136 (n_get_array_dir -> .)
    MINUS           reduce using rule 136 (n_get_array_dir -> .)
    NOT_EQUAL       reduce using rule 136 (n_get_array_dir -> .)
    EQUALS          reduce using rule 136 (n_get_array_dir -> .)
    GREATER         reduce using rule 136 (n_get_array_dir -> .)
    GREATER_EQ      reduce using rule 136 (n_get_array_dir -> .)
    LESS            reduce using rule 136 (n_get_array_dir -> .)
    LESS_EQ         reduce using rule 136 (n_get_array_dir -> .)
    OR              reduce using rule 136 (n_get_array_dir -> .)
    AND             reduce using rule 136 (n_get_array_dir -> .)
    SEMICOLON       reduce using rule 136 (n_get_array_dir -> .)
    COMMA           reduce using rule 136 (n_get_array_dir -> .)
    R_PARENS        reduce using rule 136 (n_get_array_dir -> .)
    R_SQUARE_BRACKET reduce using rule 136 (n_get_array_dir -> .)

    array_index_aux                shift and go to state 249
    array_index                    shift and go to state 250
    n_get_array_dir                shift and go to state 251

state 239

    (89) factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .

    TIMES           reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    DIVIDE          reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    PLUS            reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    MINUS           reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    NOT_EQUAL       reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    EQUALS          reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER         reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER_EQ      reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS            reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS_EQ         reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    OR              reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    AND             reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    SEMICOLON       reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    COMMA           reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_PARENS        reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 89 (factor_aux -> sign L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)


state 240

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF . n_start_else if_condition n_end_if
    (121) n_start_else -> .

    L_PARENS        reduce using rule 121 (n_start_else -> .)

    n_start_else                   shift and go to state 252

state 241

    (57) if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .

    ID              reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    RETURN          reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    PRINT           reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    READ            reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    IF              reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    WHILE           reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    R_KEY_BRACKET   reduce using rule 57 (if_condition -> L_PARENS expression R_PARENS n_end_condition block n_end_if .)


state 242

    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE . n_start_else block n_end_if
    (121) n_start_else -> .

    L_KEY_BRACKET   reduce using rule 121 (n_start_else -> .)

    n_start_else                   shift and go to state 253

state 243

    (71) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 254


state 244

    (58) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block . n_end_while
    (124) n_end_while -> .

    ID              reduce using rule 124 (n_end_while -> .)
    RETURN          reduce using rule 124 (n_end_while -> .)
    PRINT           reduce using rule 124 (n_end_while -> .)
    READ            reduce using rule 124 (n_end_while -> .)
    IF              reduce using rule 124 (n_end_while -> .)
    WHILE           reduce using rule 124 (n_end_while -> .)
    R_KEY_BRACKET   reduce using rule 124 (n_end_while -> .)

    n_end_while                    shift and go to state 255

state 245

    (17) function_params -> type ID n_add_param array_index COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID n_add_param array_index COMMA function_params .)


state 246

    (46) array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 .

    COMMA           reduce using rule 46 (array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 .)
    SEMICOLON       reduce using rule 46 (array_dim_2 -> L_SQUARE_BRACKET array_dim_aux R_SQUARE_BRACKET array_dim_2 .)


state 247

    (49) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I . n_array_dim_sup
    (135) n_array_dim_sup -> .

    R_SQUARE_BRACKET reduce using rule 135 (n_array_dim_sup -> .)

    n_array_dim_sup                shift and go to state 256

state 248

    (69) params_pass_aux -> COMMA expression n_validate_param . params_pass_aux
    (70) params_pass_aux -> COMMA expression n_validate_param .
    (69) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (70) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        reduce using rule 70 (params_pass_aux -> COMMA expression n_validate_param .)
    COMMA           shift and go to state 212

    params_pass_aux                shift and go to state 257

state 249

    (103) array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .

    ASSIGN          reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    TIMES           reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    DIVIDE          reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    PLUS            reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    MINUS           reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    NOT_EQUAL       reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    EQUALS          reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    GREATER         reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    GREATER_EQ      reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    LESS            reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    LESS_EQ         reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    OR              reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    AND             reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    SEMICOLON       reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    COMMA           reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    R_PARENS        reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)
    R_SQUARE_BRACKET reduce using rule 103 (array_index -> L_SQUARE_BRACKET expression n_ver_index R_SQUARE_BRACKET array_index_aux .)


state 250

    (104) array_index_aux -> array_index .

    ASSIGN          reduce using rule 104 (array_index_aux -> array_index .)
    TIMES           reduce using rule 104 (array_index_aux -> array_index .)
    DIVIDE          reduce using rule 104 (array_index_aux -> array_index .)
    PLUS            reduce using rule 104 (array_index_aux -> array_index .)
    MINUS           reduce using rule 104 (array_index_aux -> array_index .)
    NOT_EQUAL       reduce using rule 104 (array_index_aux -> array_index .)
    EQUALS          reduce using rule 104 (array_index_aux -> array_index .)
    GREATER         reduce using rule 104 (array_index_aux -> array_index .)
    GREATER_EQ      reduce using rule 104 (array_index_aux -> array_index .)
    LESS            reduce using rule 104 (array_index_aux -> array_index .)
    LESS_EQ         reduce using rule 104 (array_index_aux -> array_index .)
    OR              reduce using rule 104 (array_index_aux -> array_index .)
    AND             reduce using rule 104 (array_index_aux -> array_index .)
    SEMICOLON       reduce using rule 104 (array_index_aux -> array_index .)
    COMMA           reduce using rule 104 (array_index_aux -> array_index .)
    R_PARENS        reduce using rule 104 (array_index_aux -> array_index .)
    R_SQUARE_BRACKET reduce using rule 104 (array_index_aux -> array_index .)


state 251

    (105) array_index_aux -> n_get_array_dir .

    ASSIGN          reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    TIMES           reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    DIVIDE          reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    PLUS            reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    MINUS           reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    NOT_EQUAL       reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    EQUALS          reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    GREATER         reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    GREATER_EQ      reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    LESS            reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    LESS_EQ         reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    OR              reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    AND             reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    SEMICOLON       reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    COMMA           reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    R_PARENS        reduce using rule 105 (array_index_aux -> n_get_array_dir .)
    R_SQUARE_BRACKET reduce using rule 105 (array_index_aux -> n_get_array_dir .)


state 252

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else . if_condition n_end_if
    (55) if_condition -> . L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if
    (56) if_condition -> . L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if
    (57) if_condition -> . L_PARENS expression R_PARENS n_end_condition block n_end_if

    L_PARENS        shift and go to state 94

    if_condition                   shift and go to state 258

state 253

    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else . block n_end_if
    (71) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 230

    block                          shift and go to state 259

state 254

    (71) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    READ            reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 71 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 255

    (58) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .

    ID              reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    RETURN          reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    PRINT           reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    READ            reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    IF              reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    WHILE           reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    R_KEY_BRACKET   reduce using rule 58 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)


state 256

    (49) array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup .

    R_SQUARE_BRACKET reduce using rule 49 (array_dim_aux -> n_create_dim_node CONST_I n_array_dim_inf DOT DOT CONST_I n_array_dim_sup .)


state 257

    (69) params_pass_aux -> COMMA expression n_validate_param params_pass_aux .

    R_PARENS        reduce using rule 69 (params_pass_aux -> COMMA expression n_validate_param params_pass_aux .)


state 258

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition . n_end_if
    (122) n_end_if -> .

    ID              reduce using rule 122 (n_end_if -> .)
    RETURN          reduce using rule 122 (n_end_if -> .)
    PRINT           reduce using rule 122 (n_end_if -> .)
    READ            reduce using rule 122 (n_end_if -> .)
    IF              reduce using rule 122 (n_end_if -> .)
    WHILE           reduce using rule 122 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 122 (n_end_if -> .)

    n_end_if                       shift and go to state 260

state 259

    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block . n_end_if
    (122) n_end_if -> .

    ID              reduce using rule 122 (n_end_if -> .)
    RETURN          reduce using rule 122 (n_end_if -> .)
    PRINT           reduce using rule 122 (n_end_if -> .)
    READ            reduce using rule 122 (n_end_if -> .)
    IF              reduce using rule 122 (n_end_if -> .)
    WHILE           reduce using rule 122 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 122 (n_end_if -> .)

    n_end_if                       shift and go to state 261

state 260

    (55) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .

    ID              reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    RETURN          reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    PRINT           reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    READ            reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    IF              reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    WHILE           reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)
    R_KEY_BRACKET   reduce using rule 55 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELIF n_start_else if_condition n_end_if .)


state 261

    (56) if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .

    ID              reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    RETURN          reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    PRINT           reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    READ            reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    IF              reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    WHILE           reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)
    R_KEY_BRACKET   reduce using rule 56 (if_condition -> L_PARENS expression R_PARENS n_end_condition block ELSE n_start_else block n_end_if .)

