Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body n_end_function
Rule 6     main -> FUNCTION MAIN n_start_main function_body n_end_main
Rule 7     function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 11    vars -> var n_increment_local_var_count vars
Rule 12    vars -> var n_increment_local_var_count
Rule 13    statements -> statement statements
Rule 14    statements -> statement
Rule 15    function_params -> type ID n_add_param array_index COMMA function_params
Rule 16    function_params -> type ID n_add_param array_index
Rule 17    function_params -> type ID n_add_param COMMA function_params
Rule 18    function_params -> type ID n_add_param
Rule 19    function_type -> INT n_add_function_type
Rule 20    function_type -> FLOAT n_add_function_type
Rule 21    function_type -> STRING n_add_function_type
Rule 22    function_type -> VOID n_add_function_type
Rule 23    var -> type_aux ID n_add_var array_dim var_aux SEMICOLON
Rule 24    var -> type_aux ID n_add_var array_dim SEMICOLON
Rule 25    var -> type_aux ID n_add_var var_aux SEMICOLON
Rule 26    var -> type_aux ID n_add_var SEMICOLON
Rule 27    type_aux -> GLOBAL type
Rule 28    type_aux -> type
Rule 29    var_aux -> COMMA ID n_add_var array_dim var_aux
Rule 30    var_aux -> COMMA ID n_add_var array_dim
Rule 31    var_aux -> COMMA ID n_add_var var_aux
Rule 32    var_aux -> COMMA ID n_add_var
Rule 33    statement -> statement_aux SEMICOLON
Rule 34    statement -> statement_aux_2
Rule 35    statement_aux -> assignment
Rule 36    statement_aux -> function_call
Rule 37    statement_aux -> return
Rule 38    statement_aux -> print
Rule 39    statement_aux -> read
Rule 40    statement_aux_2 -> if
Rule 41    statement_aux_2 -> while
Rule 42    type -> INT n_record_last_type
Rule 43    type -> FLOAT n_record_last_type
Rule 44    type -> STRING n_record_last_type
Rule 45    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 46    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 47    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 48    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 49    assignment -> ID n_start_assignment array_index ASSIGN expression
Rule 50    assignment -> ID n_start_assignment array_index ASSIGN read
Rule 51    assignment -> ID n_start_assignment ASSIGN expression
Rule 52    assignment -> ID n_start_assignment ASSIGN read
Rule 53    function_call -> ID n_calling_func params_pass n_validate_function_call
Rule 54    return -> RETURN expression n_return
Rule 55    if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
Rule 56    if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
Rule 57    if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
Rule 58    if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if
Rule 59    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
Rule 60    elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
Rule 61    else -> ELSE n_start_else block
Rule 62    while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
Rule 63    print -> PRINT L_PARENS print_aux R_PARENS
Rule 64    print -> PRINT L_PARENS R_PARENS
Rule 65    print_aux -> expression n_print COMMA print_aux
Rule 66    print_aux -> expression n_print
Rule 67    expression -> exp n_eval_exp AND n_add_operator expression
Rule 68    expression -> exp n_eval_exp
Rule 69    read -> READ L_PARENS ID n_register_read R_PARENS
Rule 70    params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS
Rule 71    params_pass -> L_PARENS expression n_validate_param R_PARENS
Rule 72    params_pass -> L_PARENS R_PARENS
Rule 73    params_pass_aux -> COMMA expression n_validate_param params_pass_aux
Rule 74    params_pass_aux -> COMMA expression n_validate_param
Rule 75    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 76    exp -> xp n_eval_xp OR n_add_operator exp
Rule 77    exp -> xp n_eval_xp
Rule 78    xp -> x n_eval_x NOT_EQUAL n_add_operator xp
Rule 79    xp -> x n_eval_x EQUALS n_add_operator xp
Rule 80    xp -> x n_eval_x GREATER n_add_operator xp
Rule 81    xp -> x n_eval_x GREATER_EQ n_add_operator xp
Rule 82    xp -> x n_eval_x LESS n_add_operator xp
Rule 83    xp -> x n_eval_x LESS_EQ n_add_operator xp
Rule 84    xp -> x n_eval_x
Rule 85    x -> term n_eval_term PLUS n_add_operator x
Rule 86    x -> term n_eval_term MINUS n_add_operator x
Rule 87    x -> term n_eval_term
Rule 88    term -> factor n_eval_factor TIMES n_add_operator term
Rule 89    term -> factor n_eval_factor DIVIDE n_add_operator term
Rule 90    term -> factor n_eval_factor
Rule 91    factor -> NOT factor_aux
Rule 92    factor -> factor_aux
Rule 93    factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
Rule 94    factor_aux -> PLUS const
Rule 95    factor_aux -> MINUS const
Rule 96    factor_aux -> const
Rule 97    const -> ID n_add_operand
Rule 98    const -> CONST_F n_add_operand
Rule 99    const -> CONST_I n_add_operand
Rule 100   const -> CONST_STRING n_add_operand
Rule 101   const -> function_call
Rule 102   const -> array_access
Rule 103   array_access -> ID array_index
Rule 104   n_start_main -> <empty>
Rule 105   n_add_function_name -> <empty>
Rule 106   n_add_function_type -> <empty>
Rule 107   n_end_function -> <empty>
Rule 108   n_end_main -> <empty>
Rule 109   n_add_var -> <empty>
Rule 110   n_add_param -> <empty>
Rule 111   n_record_last_type -> <empty>
Rule 112   n_eval_exp -> <empty>
Rule 113   n_eval_xp -> <empty>
Rule 114   n_eval_x -> <empty>
Rule 115   n_eval_factor -> <empty>
Rule 116   n_eval_term -> <empty>
Rule 117   n_end_condition -> <empty>
Rule 118   n_start_else -> <empty>
Rule 119   n_end_if -> <empty>
Rule 120   n_start_while -> <empty>
Rule 121   n_end_while -> <empty>
Rule 122   n_add_operand -> <empty>
Rule 123   n_add_operator -> <empty>
Rule 124   n_pop_fake_bottom -> <empty>
Rule 125   n_start_assignment -> <empty>
Rule 126   n_print -> <empty>
Rule 127   n_increment_local_var_count -> <empty>
Rule 128   n_return -> <empty>
Rule 129   n_calling_func -> <empty>
Rule 130   n_validate_param -> <empty>
Rule 131   n_validate_function_call -> <empty>
Rule 132   n_register_read -> <empty>

Terminals, with rules where they appear

AND                  : 67
ASSIGN               : 49 50 51 52
COLON                : 7 8
COMMA                : 15 17 29 30 31 32 65 73 74
CONST_F              : 98
CONST_I              : 47 47 48 99
CONST_STRING         : 100
DIVIDE               : 89
DOT                  : 
ELIF                 : 59 60
ELSE                 : 61
EQUALS               : 79
FLOAT                : 20 43
FUNCTION             : 6 7 8
GLOBAL               : 27
GREATER              : 80
GREATER_EQ           : 81
ID                   : 7 8 15 16 17 18 23 24 25 26 29 30 31 32 49 50 51 52 53 69 97 103
IF                   : 55 56 57 58
INT                  : 19 42
LESS                 : 82
LESS_EQ              : 83
L_KEY_BRACKET        : 9 10 75
L_PARENS             : 7 8 55 56 57 58 59 60 62 63 64 69 70 71 72 93
L_SQUARE_BRACKET     : 45 45 46 47 47 48
MAIN                 : 6
MINUS                : 86 95
NOT                  : 91
NOT_EQUAL            : 78
OR                   : 76
PLUS                 : 85 94
PRINT                : 63 64
READ                 : 69
RETURN               : 54
R_KEY_BRACKET        : 9 10 75
R_PARENS             : 7 8 55 56 57 58 59 60 62 63 64 69 70 71 72 93
R_SQUARE_BRACKET     : 45 45 46 47 47 48
SEMICOLON            : 23 24 25 26 33
STRING               : 21 44
TIMES                : 88
VOID                 : 22
WHILE                : 62
error                : 

Nonterminals, with rules where they appear

array_access         : 102
array_dim            : 23 24 29 30
array_index          : 15 16 49 50 103
assignment           : 35
block                : 55 56 57 58 59 60 61 62
const                : 94 95 96
elif                 : 55 56 59
else                 : 55 57
exp                  : 67 68 76
expression           : 45 45 46 49 51 54 55 56 57 58 59 60 62 65 66 67 70 71 73 74 93
factor               : 88 89 90
factor_aux           : 91 92
function             : 3 4
function_body        : 5 6
function_call        : 36 101
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 40
main                 : 1 2
n_add_function_name  : 7 8
n_add_function_type  : 19 20 21 22
n_add_operand        : 97 98 99 100
n_add_operator       : 67 76 78 79 80 81 82 83 85 86 88 89 93
n_add_param          : 15 16 17 18
n_add_var            : 23 24 25 26 29 30 31 32
n_calling_func       : 53
n_end_condition      : 55 56 57 58 59 60 62
n_end_function       : 5
n_end_if             : 55 56 57 58
n_end_main           : 6
n_end_while          : 62
n_eval_exp           : 67 68
n_eval_factor        : 88 89 90
n_eval_term          : 85 86 87
n_eval_x             : 78 79 80 81 82 83 84
n_eval_xp            : 76 77
n_increment_local_var_count : 11 12
n_pop_fake_bottom    : 93
n_print              : 65 66
n_record_last_type   : 42 43 44
n_register_read      : 69
n_return             : 54
n_start_assignment   : 49 50 51 52
n_start_else         : 59 60 61
n_start_main         : 6
n_start_while        : 62
n_validate_function_call : 53
n_validate_param     : 70 71 73 74
params_pass          : 53
params_pass_aux      : 70 73
print                : 38
print_aux            : 63 65
program              : 0
program_aux          : 1 3
read                 : 39 50 52
return               : 37
statement            : 13 14
statement_aux        : 33
statement_aux_2      : 34
statements           : 9 10 13 75
term                 : 85 86 87 88 89
type                 : 15 16 17 18 27 28
type_aux             : 23 24 25 26
var                  : 11 12
var_aux              : 23 25 29 31
vars                 : 9 11
while                : 41
x                    : 78 79 80 81 82 83 84 85 86
xp                   : 76 77 78 79 80 81 82 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_main
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN n_start_main function_body n_end_main
    (7) function_header -> FUNCTION . ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID n_add_function_name L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body n_end_function
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . n_start_main function_body n_end_main
    (104) n_start_main -> .

    L_KEY_BRACKET   reduce using rule 104 (n_start_main -> .)

    n_start_main                   shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . n_add_function_name L_PARENS R_PARENS COLON function_type
    (105) n_add_function_name -> .

    L_PARENS        reduce using rule 105 (n_add_function_name -> .)

    n_add_function_name            shift and go to state 14

state 11

    (5) function -> function_header function_body . n_end_function
    (107) n_end_function -> .

    FUNCTION        reduce using rule 107 (n_end_function -> .)

    n_end_function                 shift and go to state 15

state 12

    (9) function_body -> L_KEY_BRACKET . vars statements R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (13) statements -> . statement statements
    (14) statements -> . statement
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux -> . read
    (40) statement_aux_2 -> . if
    (41) statement_aux_2 -> . while
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type
    (49) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (50) assignment -> . ID n_start_assignment array_index ASSIGN read
    (51) assignment -> . ID n_start_assignment ASSIGN expression
    (52) assignment -> . ID n_start_assignment ASSIGN read
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (54) return -> . RETURN expression n_return
    (63) print -> . PRINT L_PARENS print_aux R_PARENS
    (64) print -> . PRINT L_PARENS R_PARENS
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (58) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (62) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    GLOBAL          shift and go to state 24
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35
    ID              shift and go to state 21
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    vars                           shift and go to state 16
    statements                     shift and go to state 17
    var                            shift and go to state 18
    statement                      shift and go to state 19
    type_aux                       shift and go to state 20
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    type                           shift and go to state 25
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    read                           shift and go to state 30
    if                             shift and go to state 31
    while                          shift and go to state 32

state 13

    (6) main -> FUNCTION MAIN n_start_main . function_body n_end_main
    (9) function_body -> . L_KEY_BRACKET vars statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 41

state 14

    (7) function_header -> FUNCTION ID n_add_function_name . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 42


state 15

    (5) function -> function_header function_body n_end_function .

    FUNCTION        reduce using rule 5 (function -> function_header function_body n_end_function .)


state 16

    (9) function_body -> L_KEY_BRACKET vars . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux -> . read
    (40) statement_aux_2 -> . if
    (41) statement_aux_2 -> . while
    (49) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (50) assignment -> . ID n_start_assignment array_index ASSIGN read
    (51) assignment -> . ID n_start_assignment ASSIGN expression
    (52) assignment -> . ID n_start_assignment ASSIGN read
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (54) return -> . RETURN expression n_return
    (63) print -> . PRINT L_PARENS print_aux R_PARENS
    (64) print -> . PRINT L_PARENS R_PARENS
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (58) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (62) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 21
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statements                     shift and go to state 43
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    read                           shift and go to state 30
    if                             shift and go to state 31
    while                          shift and go to state 32

state 17

    (10) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 44


state 18

    (11) vars -> var . n_increment_local_var_count vars
    (12) vars -> var . n_increment_local_var_count
    (127) n_increment_local_var_count -> .

    GLOBAL          reduce using rule 127 (n_increment_local_var_count -> .)
    INT             reduce using rule 127 (n_increment_local_var_count -> .)
    FLOAT           reduce using rule 127 (n_increment_local_var_count -> .)
    STRING          reduce using rule 127 (n_increment_local_var_count -> .)
    ID              reduce using rule 127 (n_increment_local_var_count -> .)
    RETURN          reduce using rule 127 (n_increment_local_var_count -> .)
    PRINT           reduce using rule 127 (n_increment_local_var_count -> .)
    READ            reduce using rule 127 (n_increment_local_var_count -> .)
    IF              reduce using rule 127 (n_increment_local_var_count -> .)
    WHILE           reduce using rule 127 (n_increment_local_var_count -> .)

    n_increment_local_var_count    shift and go to state 45

state 19

    (13) statements -> statement . statements
    (14) statements -> statement .
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux -> . read
    (40) statement_aux_2 -> . if
    (41) statement_aux_2 -> . while
    (49) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (50) assignment -> . ID n_start_assignment array_index ASSIGN read
    (51) assignment -> . ID n_start_assignment ASSIGN expression
    (52) assignment -> . ID n_start_assignment ASSIGN read
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (54) return -> . RETURN expression n_return
    (63) print -> . PRINT L_PARENS print_aux R_PARENS
    (64) print -> . PRINT L_PARENS R_PARENS
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (58) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (62) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    R_KEY_BRACKET   reduce using rule 14 (statements -> statement .)
    ID              shift and go to state 21
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statement                      shift and go to state 19
    statements                     shift and go to state 46
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    read                           shift and go to state 30
    if                             shift and go to state 31
    while                          shift and go to state 32

state 20

    (23) var -> type_aux . ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux . ID n_add_var array_dim SEMICOLON
    (25) var -> type_aux . ID n_add_var var_aux SEMICOLON
    (26) var -> type_aux . ID n_add_var SEMICOLON

    ID              shift and go to state 47


state 21

    (49) assignment -> ID . n_start_assignment array_index ASSIGN expression
    (50) assignment -> ID . n_start_assignment array_index ASSIGN read
    (51) assignment -> ID . n_start_assignment ASSIGN expression
    (52) assignment -> ID . n_start_assignment ASSIGN read
    (53) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (125) n_start_assignment -> .
    (129) n_calling_func -> .

    ASSIGN          reduce using rule 125 (n_start_assignment -> .)
    L_SQUARE_BRACKET reduce using rule 125 (n_start_assignment -> .)
    L_PARENS        reduce using rule 129 (n_calling_func -> .)

    n_start_assignment             shift and go to state 48
    n_calling_func                 shift and go to state 49

state 22

    (33) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 50


state 23

    (34) statement -> statement_aux_2 .

    ID              reduce using rule 34 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 34 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 34 (statement -> statement_aux_2 .)
    READ            reduce using rule 34 (statement -> statement_aux_2 .)
    IF              reduce using rule 34 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 34 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 34 (statement -> statement_aux_2 .)


state 24

    (27) type_aux -> GLOBAL . type
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    type                           shift and go to state 51

state 25

    (28) type_aux -> type .

    ID              reduce using rule 28 (type_aux -> type .)


state 26

    (35) statement_aux -> assignment .

    SEMICOLON       reduce using rule 35 (statement_aux -> assignment .)


state 27

    (36) statement_aux -> function_call .

    SEMICOLON       reduce using rule 36 (statement_aux -> function_call .)


state 28

    (37) statement_aux -> return .

    SEMICOLON       reduce using rule 37 (statement_aux -> return .)


state 29

    (38) statement_aux -> print .

    SEMICOLON       reduce using rule 38 (statement_aux -> print .)


state 30

    (39) statement_aux -> read .

    SEMICOLON       reduce using rule 39 (statement_aux -> read .)


state 31

    (40) statement_aux_2 -> if .

    ID              reduce using rule 40 (statement_aux_2 -> if .)
    RETURN          reduce using rule 40 (statement_aux_2 -> if .)
    PRINT           reduce using rule 40 (statement_aux_2 -> if .)
    READ            reduce using rule 40 (statement_aux_2 -> if .)
    IF              reduce using rule 40 (statement_aux_2 -> if .)
    WHILE           reduce using rule 40 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 40 (statement_aux_2 -> if .)


state 32

    (41) statement_aux_2 -> while .

    ID              reduce using rule 41 (statement_aux_2 -> while .)
    RETURN          reduce using rule 41 (statement_aux_2 -> while .)
    PRINT           reduce using rule 41 (statement_aux_2 -> while .)
    READ            reduce using rule 41 (statement_aux_2 -> while .)
    IF              reduce using rule 41 (statement_aux_2 -> while .)
    WHILE           reduce using rule 41 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 41 (statement_aux_2 -> while .)


state 33

    (42) type -> INT . n_record_last_type
    (111) n_record_last_type -> .

    ID              reduce using rule 111 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 52

state 34

    (43) type -> FLOAT . n_record_last_type
    (111) n_record_last_type -> .

    ID              reduce using rule 111 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 53

state 35

    (44) type -> STRING . n_record_last_type
    (111) n_record_last_type -> .

    ID              reduce using rule 111 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 54

state 36

    (54) return -> RETURN . expression n_return
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 55
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 37

    (63) print -> PRINT . L_PARENS print_aux R_PARENS
    (64) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 73


state 38

    (69) read -> READ . L_PARENS ID n_register_read R_PARENS

    L_PARENS        shift and go to state 74


state 39

    (55) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> IF . L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> IF . L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (58) if -> IF . L_PARENS expression R_PARENS n_end_condition block n_end_if

    L_PARENS        shift and go to state 75


state 40

    (62) while -> WHILE . n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while
    (120) n_start_while -> .

    L_PARENS        reduce using rule 120 (n_start_while -> .)

    n_start_while                  shift and go to state 76

state 41

    (6) main -> FUNCTION MAIN n_start_main function_body . n_end_main
    (108) n_end_main -> .

    $end            reduce using rule 108 (n_end_main -> .)

    n_end_main                     shift and go to state 77

state 42

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type

    R_PARENS        shift and go to state 79
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    function_params                shift and go to state 78
    type                           shift and go to state 80

state 43

    (9) function_body -> L_KEY_BRACKET vars statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 81


state 44

    (10) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 45

    (11) vars -> var n_increment_local_var_count . vars
    (12) vars -> var n_increment_local_var_count .
    (11) vars -> . var n_increment_local_var_count vars
    (12) vars -> . var n_increment_local_var_count
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type

    ID              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    RETURN          reduce using rule 12 (vars -> var n_increment_local_var_count .)
    PRINT           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    READ            reduce using rule 12 (vars -> var n_increment_local_var_count .)
    IF              reduce using rule 12 (vars -> var n_increment_local_var_count .)
    WHILE           reduce using rule 12 (vars -> var n_increment_local_var_count .)
    GLOBAL          shift and go to state 24
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    var                            shift and go to state 18
    vars                           shift and go to state 82
    type_aux                       shift and go to state 20
    type                           shift and go to state 25

state 46

    (13) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 13 (statements -> statement statements .)


state 47

    (23) var -> type_aux ID . n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux ID . n_add_var array_dim SEMICOLON
    (25) var -> type_aux ID . n_add_var var_aux SEMICOLON
    (26) var -> type_aux ID . n_add_var SEMICOLON
    (109) n_add_var -> .

    SEMICOLON       reduce using rule 109 (n_add_var -> .)
    L_SQUARE_BRACKET reduce using rule 109 (n_add_var -> .)
    COMMA           reduce using rule 109 (n_add_var -> .)

    n_add_var                      shift and go to state 83

state 48

    (49) assignment -> ID n_start_assignment . array_index ASSIGN expression
    (50) assignment -> ID n_start_assignment . array_index ASSIGN read
    (51) assignment -> ID n_start_assignment . ASSIGN expression
    (52) assignment -> ID n_start_assignment . ASSIGN read
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    ASSIGN          shift and go to state 85
    L_SQUARE_BRACKET shift and go to state 86

    array_index                    shift and go to state 84

state 49

    (53) function_call -> ID n_calling_func . params_pass n_validate_function_call
    (70) params_pass -> . L_PARENS expression n_validate_param params_pass_aux R_PARENS
    (71) params_pass -> . L_PARENS expression n_validate_param R_PARENS
    (72) params_pass -> . L_PARENS R_PARENS

    L_PARENS        shift and go to state 88

    params_pass                    shift and go to state 87

state 50

    (33) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    READ            reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 33 (statement -> statement_aux SEMICOLON .)


state 51

    (27) type_aux -> GLOBAL type .

    ID              reduce using rule 27 (type_aux -> GLOBAL type .)


state 52

    (42) type -> INT n_record_last_type .

    ID              reduce using rule 42 (type -> INT n_record_last_type .)


state 53

    (43) type -> FLOAT n_record_last_type .

    ID              reduce using rule 43 (type -> FLOAT n_record_last_type .)


state 54

    (44) type -> STRING n_record_last_type .

    ID              reduce using rule 44 (type -> STRING n_record_last_type .)


state 55

    (54) return -> RETURN expression . n_return
    (128) n_return -> .

    SEMICOLON       reduce using rule 128 (n_return -> .)

    n_return                       shift and go to state 89

state 56

    (67) expression -> exp . n_eval_exp AND n_add_operator expression
    (68) expression -> exp . n_eval_exp
    (112) n_eval_exp -> .

    AND             reduce using rule 112 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 112 (n_eval_exp -> .)
    COMMA           reduce using rule 112 (n_eval_exp -> .)
    R_PARENS        reduce using rule 112 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 112 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 90

state 57

    (76) exp -> xp . n_eval_xp OR n_add_operator exp
    (77) exp -> xp . n_eval_xp
    (113) n_eval_xp -> .

    OR              reduce using rule 113 (n_eval_xp -> .)
    AND             reduce using rule 113 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 113 (n_eval_xp -> .)
    COMMA           reduce using rule 113 (n_eval_xp -> .)
    R_PARENS        reduce using rule 113 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 113 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 91

state 58

    (78) xp -> x . n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> x . n_eval_x EQUALS n_add_operator xp
    (80) xp -> x . n_eval_x GREATER n_add_operator xp
    (81) xp -> x . n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> x . n_eval_x LESS n_add_operator xp
    (83) xp -> x . n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> x . n_eval_x
    (114) n_eval_x -> .

    NOT_EQUAL       reduce using rule 114 (n_eval_x -> .)
    EQUALS          reduce using rule 114 (n_eval_x -> .)
    GREATER         reduce using rule 114 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 114 (n_eval_x -> .)
    LESS            reduce using rule 114 (n_eval_x -> .)
    LESS_EQ         reduce using rule 114 (n_eval_x -> .)
    OR              reduce using rule 114 (n_eval_x -> .)
    AND             reduce using rule 114 (n_eval_x -> .)
    SEMICOLON       reduce using rule 114 (n_eval_x -> .)
    COMMA           reduce using rule 114 (n_eval_x -> .)
    R_PARENS        reduce using rule 114 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 114 (n_eval_x -> .)

    n_eval_x                       shift and go to state 92

state 59

    (85) x -> term . n_eval_term PLUS n_add_operator x
    (86) x -> term . n_eval_term MINUS n_add_operator x
    (87) x -> term . n_eval_term
    (116) n_eval_term -> .

    PLUS            reduce using rule 116 (n_eval_term -> .)
    MINUS           reduce using rule 116 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 116 (n_eval_term -> .)
    EQUALS          reduce using rule 116 (n_eval_term -> .)
    GREATER         reduce using rule 116 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 116 (n_eval_term -> .)
    LESS            reduce using rule 116 (n_eval_term -> .)
    LESS_EQ         reduce using rule 116 (n_eval_term -> .)
    OR              reduce using rule 116 (n_eval_term -> .)
    AND             reduce using rule 116 (n_eval_term -> .)
    SEMICOLON       reduce using rule 116 (n_eval_term -> .)
    COMMA           reduce using rule 116 (n_eval_term -> .)
    R_PARENS        reduce using rule 116 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_eval_term -> .)

    n_eval_term                    shift and go to state 93

state 60

    (94) factor_aux -> PLUS . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    const                          shift and go to state 94
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 61

    (95) factor_aux -> MINUS . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    const                          shift and go to state 95
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 62

    (88) term -> factor . n_eval_factor TIMES n_add_operator term
    (89) term -> factor . n_eval_factor DIVIDE n_add_operator term
    (90) term -> factor . n_eval_factor
    (115) n_eval_factor -> .

    TIMES           reduce using rule 115 (n_eval_factor -> .)
    DIVIDE          reduce using rule 115 (n_eval_factor -> .)
    PLUS            reduce using rule 115 (n_eval_factor -> .)
    MINUS           reduce using rule 115 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 115 (n_eval_factor -> .)
    EQUALS          reduce using rule 115 (n_eval_factor -> .)
    GREATER         reduce using rule 115 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 115 (n_eval_factor -> .)
    LESS            reduce using rule 115 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 115 (n_eval_factor -> .)
    OR              reduce using rule 115 (n_eval_factor -> .)
    AND             reduce using rule 115 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 115 (n_eval_factor -> .)
    COMMA           reduce using rule 115 (n_eval_factor -> .)
    R_PARENS        reduce using rule 115 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 115 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 96

state 63

    (91) factor -> NOT . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    factor_aux                     shift and go to state 97
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 64

    (92) factor -> factor_aux .

    TIMES           reduce using rule 92 (factor -> factor_aux .)
    DIVIDE          reduce using rule 92 (factor -> factor_aux .)
    PLUS            reduce using rule 92 (factor -> factor_aux .)
    MINUS           reduce using rule 92 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 92 (factor -> factor_aux .)
    EQUALS          reduce using rule 92 (factor -> factor_aux .)
    GREATER         reduce using rule 92 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 92 (factor -> factor_aux .)
    LESS            reduce using rule 92 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 92 (factor -> factor_aux .)
    OR              reduce using rule 92 (factor -> factor_aux .)
    AND             reduce using rule 92 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 92 (factor -> factor_aux .)
    COMMA           reduce using rule 92 (factor -> factor_aux .)
    R_PARENS        reduce using rule 92 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 92 (factor -> factor_aux .)


state 65

    (93) factor_aux -> L_PARENS . n_add_operator expression n_pop_fake_bottom R_PARENS
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 98

state 66

    (96) factor_aux -> const .

    TIMES           reduce using rule 96 (factor_aux -> const .)
    DIVIDE          reduce using rule 96 (factor_aux -> const .)
    PLUS            reduce using rule 96 (factor_aux -> const .)
    MINUS           reduce using rule 96 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 96 (factor_aux -> const .)
    EQUALS          reduce using rule 96 (factor_aux -> const .)
    GREATER         reduce using rule 96 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 96 (factor_aux -> const .)
    LESS            reduce using rule 96 (factor_aux -> const .)
    LESS_EQ         reduce using rule 96 (factor_aux -> const .)
    OR              reduce using rule 96 (factor_aux -> const .)
    AND             reduce using rule 96 (factor_aux -> const .)
    SEMICOLON       reduce using rule 96 (factor_aux -> const .)
    COMMA           reduce using rule 96 (factor_aux -> const .)
    R_PARENS        reduce using rule 96 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 96 (factor_aux -> const .)


state 67

    (97) const -> ID . n_add_operand
    (53) function_call -> ID . n_calling_func params_pass n_validate_function_call
    (103) array_access -> ID . array_index
    (122) n_add_operand -> .
    (129) n_calling_func -> .
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 122 (n_add_operand -> .)
    DIVIDE          reduce using rule 122 (n_add_operand -> .)
    PLUS            reduce using rule 122 (n_add_operand -> .)
    MINUS           reduce using rule 122 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 122 (n_add_operand -> .)
    EQUALS          reduce using rule 122 (n_add_operand -> .)
    GREATER         reduce using rule 122 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 122 (n_add_operand -> .)
    LESS            reduce using rule 122 (n_add_operand -> .)
    LESS_EQ         reduce using rule 122 (n_add_operand -> .)
    OR              reduce using rule 122 (n_add_operand -> .)
    AND             reduce using rule 122 (n_add_operand -> .)
    SEMICOLON       reduce using rule 122 (n_add_operand -> .)
    COMMA           reduce using rule 122 (n_add_operand -> .)
    R_PARENS        reduce using rule 122 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 122 (n_add_operand -> .)
    L_PARENS        reduce using rule 129 (n_calling_func -> .)
    L_SQUARE_BRACKET shift and go to state 86

    n_add_operand                  shift and go to state 99
    n_calling_func                 shift and go to state 49
    array_index                    shift and go to state 100

state 68

    (98) const -> CONST_F . n_add_operand
    (122) n_add_operand -> .

    TIMES           reduce using rule 122 (n_add_operand -> .)
    DIVIDE          reduce using rule 122 (n_add_operand -> .)
    PLUS            reduce using rule 122 (n_add_operand -> .)
    MINUS           reduce using rule 122 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 122 (n_add_operand -> .)
    EQUALS          reduce using rule 122 (n_add_operand -> .)
    GREATER         reduce using rule 122 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 122 (n_add_operand -> .)
    LESS            reduce using rule 122 (n_add_operand -> .)
    LESS_EQ         reduce using rule 122 (n_add_operand -> .)
    OR              reduce using rule 122 (n_add_operand -> .)
    AND             reduce using rule 122 (n_add_operand -> .)
    SEMICOLON       reduce using rule 122 (n_add_operand -> .)
    COMMA           reduce using rule 122 (n_add_operand -> .)
    R_PARENS        reduce using rule 122 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 122 (n_add_operand -> .)

    n_add_operand                  shift and go to state 101

state 69

    (99) const -> CONST_I . n_add_operand
    (122) n_add_operand -> .

    TIMES           reduce using rule 122 (n_add_operand -> .)
    DIVIDE          reduce using rule 122 (n_add_operand -> .)
    PLUS            reduce using rule 122 (n_add_operand -> .)
    MINUS           reduce using rule 122 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 122 (n_add_operand -> .)
    EQUALS          reduce using rule 122 (n_add_operand -> .)
    GREATER         reduce using rule 122 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 122 (n_add_operand -> .)
    LESS            reduce using rule 122 (n_add_operand -> .)
    LESS_EQ         reduce using rule 122 (n_add_operand -> .)
    OR              reduce using rule 122 (n_add_operand -> .)
    AND             reduce using rule 122 (n_add_operand -> .)
    SEMICOLON       reduce using rule 122 (n_add_operand -> .)
    COMMA           reduce using rule 122 (n_add_operand -> .)
    R_PARENS        reduce using rule 122 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 122 (n_add_operand -> .)

    n_add_operand                  shift and go to state 102

state 70

    (100) const -> CONST_STRING . n_add_operand
    (122) n_add_operand -> .

    TIMES           reduce using rule 122 (n_add_operand -> .)
    DIVIDE          reduce using rule 122 (n_add_operand -> .)
    PLUS            reduce using rule 122 (n_add_operand -> .)
    MINUS           reduce using rule 122 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 122 (n_add_operand -> .)
    EQUALS          reduce using rule 122 (n_add_operand -> .)
    GREATER         reduce using rule 122 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 122 (n_add_operand -> .)
    LESS            reduce using rule 122 (n_add_operand -> .)
    LESS_EQ         reduce using rule 122 (n_add_operand -> .)
    OR              reduce using rule 122 (n_add_operand -> .)
    AND             reduce using rule 122 (n_add_operand -> .)
    SEMICOLON       reduce using rule 122 (n_add_operand -> .)
    COMMA           reduce using rule 122 (n_add_operand -> .)
    R_PARENS        reduce using rule 122 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 122 (n_add_operand -> .)

    n_add_operand                  shift and go to state 103

state 71

    (101) const -> function_call .

    TIMES           reduce using rule 101 (const -> function_call .)
    DIVIDE          reduce using rule 101 (const -> function_call .)
    PLUS            reduce using rule 101 (const -> function_call .)
    MINUS           reduce using rule 101 (const -> function_call .)
    NOT_EQUAL       reduce using rule 101 (const -> function_call .)
    EQUALS          reduce using rule 101 (const -> function_call .)
    GREATER         reduce using rule 101 (const -> function_call .)
    GREATER_EQ      reduce using rule 101 (const -> function_call .)
    LESS            reduce using rule 101 (const -> function_call .)
    LESS_EQ         reduce using rule 101 (const -> function_call .)
    OR              reduce using rule 101 (const -> function_call .)
    AND             reduce using rule 101 (const -> function_call .)
    SEMICOLON       reduce using rule 101 (const -> function_call .)
    COMMA           reduce using rule 101 (const -> function_call .)
    R_PARENS        reduce using rule 101 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 101 (const -> function_call .)


state 72

    (102) const -> array_access .

    TIMES           reduce using rule 102 (const -> array_access .)
    DIVIDE          reduce using rule 102 (const -> array_access .)
    PLUS            reduce using rule 102 (const -> array_access .)
    MINUS           reduce using rule 102 (const -> array_access .)
    NOT_EQUAL       reduce using rule 102 (const -> array_access .)
    EQUALS          reduce using rule 102 (const -> array_access .)
    GREATER         reduce using rule 102 (const -> array_access .)
    GREATER_EQ      reduce using rule 102 (const -> array_access .)
    LESS            reduce using rule 102 (const -> array_access .)
    LESS_EQ         reduce using rule 102 (const -> array_access .)
    OR              reduce using rule 102 (const -> array_access .)
    AND             reduce using rule 102 (const -> array_access .)
    SEMICOLON       reduce using rule 102 (const -> array_access .)
    COMMA           reduce using rule 102 (const -> array_access .)
    R_PARENS        reduce using rule 102 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 102 (const -> array_access .)


state 73

    (63) print -> PRINT L_PARENS . print_aux R_PARENS
    (64) print -> PRINT L_PARENS . R_PARENS
    (65) print_aux -> . expression n_print COMMA print_aux
    (66) print_aux -> . expression n_print
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    R_PARENS        shift and go to state 105
    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    print_aux                      shift and go to state 104
    expression                     shift and go to state 106
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 74

    (69) read -> READ L_PARENS . ID n_register_read R_PARENS

    ID              shift and go to state 107


state 75

    (55) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> IF L_PARENS . expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> IF L_PARENS . expression R_PARENS n_end_condition block else n_end_if
    (58) if -> IF L_PARENS . expression R_PARENS n_end_condition block n_end_if
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 108
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 76

    (62) while -> WHILE n_start_while . L_PARENS expression R_PARENS n_end_condition block n_end_while

    L_PARENS        shift and go to state 109


state 77

    (6) main -> FUNCTION MAIN n_start_main function_body n_end_main .

    $end            reduce using rule 6 (main -> FUNCTION MAIN n_start_main function_body n_end_main .)


state 78

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 110


state 79

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 111


state 80

    (15) function_params -> type . ID n_add_param array_index COMMA function_params
    (16) function_params -> type . ID n_add_param array_index
    (17) function_params -> type . ID n_add_param COMMA function_params
    (18) function_params -> type . ID n_add_param

    ID              shift and go to state 112


state 81

    (9) function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET vars statements R_KEY_BRACKET .)


state 82

    (11) vars -> var n_increment_local_var_count vars .

    ID              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    RETURN          reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    PRINT           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    READ            reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    IF              reduce using rule 11 (vars -> var n_increment_local_var_count vars .)
    WHILE           reduce using rule 11 (vars -> var n_increment_local_var_count vars .)


state 83

    (23) var -> type_aux ID n_add_var . array_dim var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var . array_dim SEMICOLON
    (25) var -> type_aux ID n_add_var . var_aux SEMICOLON
    (26) var -> type_aux ID n_add_var . SEMICOLON
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (48) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 115
    L_SQUARE_BRACKET shift and go to state 116
    COMMA           shift and go to state 117

    array_dim                      shift and go to state 113
    var_aux                        shift and go to state 114

state 84

    (49) assignment -> ID n_start_assignment array_index . ASSIGN expression
    (50) assignment -> ID n_start_assignment array_index . ASSIGN read

    ASSIGN          shift and go to state 118


state 85

    (51) assignment -> ID n_start_assignment ASSIGN . expression
    (52) assignment -> ID n_start_assignment ASSIGN . read
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    READ            shift and go to state 38
    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 119
    read                           shift and go to state 120
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 86

    (45) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 121
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 87

    (53) function_call -> ID n_calling_func params_pass . n_validate_function_call
    (131) n_validate_function_call -> .

    SEMICOLON       reduce using rule 131 (n_validate_function_call -> .)
    TIMES           reduce using rule 131 (n_validate_function_call -> .)
    DIVIDE          reduce using rule 131 (n_validate_function_call -> .)
    PLUS            reduce using rule 131 (n_validate_function_call -> .)
    MINUS           reduce using rule 131 (n_validate_function_call -> .)
    NOT_EQUAL       reduce using rule 131 (n_validate_function_call -> .)
    EQUALS          reduce using rule 131 (n_validate_function_call -> .)
    GREATER         reduce using rule 131 (n_validate_function_call -> .)
    GREATER_EQ      reduce using rule 131 (n_validate_function_call -> .)
    LESS            reduce using rule 131 (n_validate_function_call -> .)
    LESS_EQ         reduce using rule 131 (n_validate_function_call -> .)
    OR              reduce using rule 131 (n_validate_function_call -> .)
    AND             reduce using rule 131 (n_validate_function_call -> .)
    COMMA           reduce using rule 131 (n_validate_function_call -> .)
    R_PARENS        reduce using rule 131 (n_validate_function_call -> .)
    R_SQUARE_BRACKET reduce using rule 131 (n_validate_function_call -> .)

    n_validate_function_call       shift and go to state 122

state 88

    (70) params_pass -> L_PARENS . expression n_validate_param params_pass_aux R_PARENS
    (71) params_pass -> L_PARENS . expression n_validate_param R_PARENS
    (72) params_pass -> L_PARENS . R_PARENS
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    R_PARENS        shift and go to state 124
    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 123
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 89

    (54) return -> RETURN expression n_return .

    SEMICOLON       reduce using rule 54 (return -> RETURN expression n_return .)


state 90

    (67) expression -> exp n_eval_exp . AND n_add_operator expression
    (68) expression -> exp n_eval_exp .

    AND             shift and go to state 125
    SEMICOLON       reduce using rule 68 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 68 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 68 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 68 (expression -> exp n_eval_exp .)


state 91

    (76) exp -> xp n_eval_xp . OR n_add_operator exp
    (77) exp -> xp n_eval_xp .

    OR              shift and go to state 126
    AND             reduce using rule 77 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 77 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 77 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 77 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 77 (exp -> xp n_eval_xp .)


state 92

    (78) xp -> x n_eval_x . NOT_EQUAL n_add_operator xp
    (79) xp -> x n_eval_x . EQUALS n_add_operator xp
    (80) xp -> x n_eval_x . GREATER n_add_operator xp
    (81) xp -> x n_eval_x . GREATER_EQ n_add_operator xp
    (82) xp -> x n_eval_x . LESS n_add_operator xp
    (83) xp -> x n_eval_x . LESS_EQ n_add_operator xp
    (84) xp -> x n_eval_x .

    NOT_EQUAL       shift and go to state 127
    EQUALS          shift and go to state 128
    GREATER         shift and go to state 129
    GREATER_EQ      shift and go to state 130
    LESS            shift and go to state 131
    LESS_EQ         shift and go to state 132
    OR              reduce using rule 84 (xp -> x n_eval_x .)
    AND             reduce using rule 84 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 84 (xp -> x n_eval_x .)
    COMMA           reduce using rule 84 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 84 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 84 (xp -> x n_eval_x .)


state 93

    (85) x -> term n_eval_term . PLUS n_add_operator x
    (86) x -> term n_eval_term . MINUS n_add_operator x
    (87) x -> term n_eval_term .

    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    NOT_EQUAL       reduce using rule 87 (x -> term n_eval_term .)
    EQUALS          reduce using rule 87 (x -> term n_eval_term .)
    GREATER         reduce using rule 87 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 87 (x -> term n_eval_term .)
    LESS            reduce using rule 87 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 87 (x -> term n_eval_term .)
    OR              reduce using rule 87 (x -> term n_eval_term .)
    AND             reduce using rule 87 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 87 (x -> term n_eval_term .)
    COMMA           reduce using rule 87 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 87 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 87 (x -> term n_eval_term .)


state 94

    (94) factor_aux -> PLUS const .

    TIMES           reduce using rule 94 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 94 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 94 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 94 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 94 (factor_aux -> PLUS const .)
    EQUALS          reduce using rule 94 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 94 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 94 (factor_aux -> PLUS const .)
    LESS            reduce using rule 94 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 94 (factor_aux -> PLUS const .)
    OR              reduce using rule 94 (factor_aux -> PLUS const .)
    AND             reduce using rule 94 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 94 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 94 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 94 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 94 (factor_aux -> PLUS const .)


state 95

    (95) factor_aux -> MINUS const .

    TIMES           reduce using rule 95 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 95 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 95 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 95 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 95 (factor_aux -> MINUS const .)
    EQUALS          reduce using rule 95 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 95 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 95 (factor_aux -> MINUS const .)
    LESS            reduce using rule 95 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 95 (factor_aux -> MINUS const .)
    OR              reduce using rule 95 (factor_aux -> MINUS const .)
    AND             reduce using rule 95 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 95 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 95 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 95 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 95 (factor_aux -> MINUS const .)


state 96

    (88) term -> factor n_eval_factor . TIMES n_add_operator term
    (89) term -> factor n_eval_factor . DIVIDE n_add_operator term
    (90) term -> factor n_eval_factor .

    TIMES           shift and go to state 135
    DIVIDE          shift and go to state 136
    PLUS            reduce using rule 90 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 90 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 90 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 90 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 90 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 90 (term -> factor n_eval_factor .)
    LESS            reduce using rule 90 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 90 (term -> factor n_eval_factor .)
    OR              reduce using rule 90 (term -> factor n_eval_factor .)
    AND             reduce using rule 90 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 90 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 90 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 90 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 90 (term -> factor n_eval_factor .)


state 97

    (91) factor -> NOT factor_aux .

    TIMES           reduce using rule 91 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 91 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 91 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 91 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 91 (factor -> NOT factor_aux .)
    EQUALS          reduce using rule 91 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 91 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 91 (factor -> NOT factor_aux .)
    LESS            reduce using rule 91 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 91 (factor -> NOT factor_aux .)
    OR              reduce using rule 91 (factor -> NOT factor_aux .)
    AND             reduce using rule 91 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 91 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 91 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 91 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 91 (factor -> NOT factor_aux .)


state 98

    (93) factor_aux -> L_PARENS n_add_operator . expression n_pop_fake_bottom R_PARENS
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 137
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 99

    (97) const -> ID n_add_operand .

    TIMES           reduce using rule 97 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 97 (const -> ID n_add_operand .)
    PLUS            reduce using rule 97 (const -> ID n_add_operand .)
    MINUS           reduce using rule 97 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 97 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 97 (const -> ID n_add_operand .)
    GREATER         reduce using rule 97 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 97 (const -> ID n_add_operand .)
    LESS            reduce using rule 97 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 97 (const -> ID n_add_operand .)
    OR              reduce using rule 97 (const -> ID n_add_operand .)
    AND             reduce using rule 97 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 97 (const -> ID n_add_operand .)
    COMMA           reduce using rule 97 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 97 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 97 (const -> ID n_add_operand .)


state 100

    (103) array_access -> ID array_index .

    TIMES           reduce using rule 103 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 103 (array_access -> ID array_index .)
    PLUS            reduce using rule 103 (array_access -> ID array_index .)
    MINUS           reduce using rule 103 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 103 (array_access -> ID array_index .)
    EQUALS          reduce using rule 103 (array_access -> ID array_index .)
    GREATER         reduce using rule 103 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 103 (array_access -> ID array_index .)
    LESS            reduce using rule 103 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 103 (array_access -> ID array_index .)
    OR              reduce using rule 103 (array_access -> ID array_index .)
    AND             reduce using rule 103 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 103 (array_access -> ID array_index .)
    COMMA           reduce using rule 103 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 103 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 103 (array_access -> ID array_index .)


state 101

    (98) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 98 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 98 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 98 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 98 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 98 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 98 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 98 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 98 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 98 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 98 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 98 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 98 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 98 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 98 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 98 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 98 (const -> CONST_F n_add_operand .)


state 102

    (99) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 99 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 99 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 99 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 99 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 99 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 99 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 99 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 99 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 99 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 99 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 99 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 99 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 99 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 99 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 99 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 99 (const -> CONST_I n_add_operand .)


state 103

    (100) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 100 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 100 (const -> CONST_STRING n_add_operand .)


state 104

    (63) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 138


state 105

    (64) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 64 (print -> PRINT L_PARENS R_PARENS .)


state 106

    (65) print_aux -> expression . n_print COMMA print_aux
    (66) print_aux -> expression . n_print
    (126) n_print -> .

    COMMA           reduce using rule 126 (n_print -> .)
    R_PARENS        reduce using rule 126 (n_print -> .)

    n_print                        shift and go to state 139

state 107

    (69) read -> READ L_PARENS ID . n_register_read R_PARENS
    (132) n_register_read -> .

    R_PARENS        reduce using rule 132 (n_register_read -> .)

    n_register_read                shift and go to state 140

state 108

    (55) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif else n_end_if
    (56) if -> IF L_PARENS expression . R_PARENS n_end_condition block elif n_end_if
    (57) if -> IF L_PARENS expression . R_PARENS n_end_condition block else n_end_if
    (58) if -> IF L_PARENS expression . R_PARENS n_end_condition block n_end_if

    R_PARENS        shift and go to state 141


state 109

    (62) while -> WHILE n_start_while L_PARENS . expression R_PARENS n_end_condition block n_end_while
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 142
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 110

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 143


state 111

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 145
    FLOAT           shift and go to state 146
    STRING          shift and go to state 147
    VOID            shift and go to state 148

    function_type                  shift and go to state 144

state 112

    (15) function_params -> type ID . n_add_param array_index COMMA function_params
    (16) function_params -> type ID . n_add_param array_index
    (17) function_params -> type ID . n_add_param COMMA function_params
    (18) function_params -> type ID . n_add_param
    (110) n_add_param -> .

    COMMA           reduce using rule 110 (n_add_param -> .)
    L_SQUARE_BRACKET reduce using rule 110 (n_add_param -> .)
    R_PARENS        reduce using rule 110 (n_add_param -> .)

    n_add_param                    shift and go to state 149

state 113

    (23) var -> type_aux ID n_add_var array_dim . var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var array_dim . SEMICOLON
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 151
    COMMA           shift and go to state 117

    var_aux                        shift and go to state 150

state 114

    (25) var -> type_aux ID n_add_var var_aux . SEMICOLON

    SEMICOLON       shift and go to state 152


state 115

    (26) var -> type_aux ID n_add_var SEMICOLON .

    GLOBAL          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    INT             reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    FLOAT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    STRING          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    ID              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    RETURN          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    PRINT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    READ            reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    IF              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    WHILE           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)


state 116

    (47) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (48) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 153


state 117

    (29) var_aux -> COMMA . ID n_add_var array_dim var_aux
    (30) var_aux -> COMMA . ID n_add_var array_dim
    (31) var_aux -> COMMA . ID n_add_var var_aux
    (32) var_aux -> COMMA . ID n_add_var

    ID              shift and go to state 154


state 118

    (49) assignment -> ID n_start_assignment array_index ASSIGN . expression
    (50) assignment -> ID n_start_assignment array_index ASSIGN . read
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    READ            shift and go to state 38
    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 155
    read                           shift and go to state 156
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 119

    (51) assignment -> ID n_start_assignment ASSIGN expression .

    SEMICOLON       reduce using rule 51 (assignment -> ID n_start_assignment ASSIGN expression .)


state 120

    (52) assignment -> ID n_start_assignment ASSIGN read .

    SEMICOLON       reduce using rule 52 (assignment -> ID n_start_assignment ASSIGN read .)


state 121

    (45) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 157


state 122

    (53) function_call -> ID n_calling_func params_pass n_validate_function_call .

    SEMICOLON       reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    TIMES           reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    DIVIDE          reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    PLUS            reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    MINUS           reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    NOT_EQUAL       reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    EQUALS          reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER         reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    GREATER_EQ      reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS            reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    LESS_EQ         reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    OR              reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    AND             reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    COMMA           reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_PARENS        reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)
    R_SQUARE_BRACKET reduce using rule 53 (function_call -> ID n_calling_func params_pass n_validate_function_call .)


state 123

    (70) params_pass -> L_PARENS expression . n_validate_param params_pass_aux R_PARENS
    (71) params_pass -> L_PARENS expression . n_validate_param R_PARENS
    (130) n_validate_param -> .

    R_PARENS        reduce using rule 130 (n_validate_param -> .)
    COMMA           reduce using rule 130 (n_validate_param -> .)

    n_validate_param               shift and go to state 158

state 124

    (72) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 72 (params_pass -> L_PARENS R_PARENS .)


state 125

    (67) expression -> exp n_eval_exp AND . n_add_operator expression
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 159

state 126

    (76) exp -> xp n_eval_xp OR . n_add_operator exp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 160

state 127

    (78) xp -> x n_eval_x NOT_EQUAL . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 161

state 128

    (79) xp -> x n_eval_x EQUALS . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 162

state 129

    (80) xp -> x n_eval_x GREATER . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 163

state 130

    (81) xp -> x n_eval_x GREATER_EQ . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 164

state 131

    (82) xp -> x n_eval_x LESS . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 165

state 132

    (83) xp -> x n_eval_x LESS_EQ . n_add_operator xp
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 166

state 133

    (85) x -> term n_eval_term PLUS . n_add_operator x
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 167

state 134

    (86) x -> term n_eval_term MINUS . n_add_operator x
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 168

state 135

    (88) term -> factor n_eval_factor TIMES . n_add_operator term
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 169

state 136

    (89) term -> factor n_eval_factor DIVIDE . n_add_operator term
    (123) n_add_operator -> .

    NOT             reduce using rule 123 (n_add_operator -> .)
    L_PARENS        reduce using rule 123 (n_add_operator -> .)
    PLUS            reduce using rule 123 (n_add_operator -> .)
    MINUS           reduce using rule 123 (n_add_operator -> .)
    ID              reduce using rule 123 (n_add_operator -> .)
    CONST_F         reduce using rule 123 (n_add_operator -> .)
    CONST_I         reduce using rule 123 (n_add_operator -> .)
    CONST_STRING    reduce using rule 123 (n_add_operator -> .)

    n_add_operator                 shift and go to state 170

state 137

    (93) factor_aux -> L_PARENS n_add_operator expression . n_pop_fake_bottom R_PARENS
    (124) n_pop_fake_bottom -> .

    R_PARENS        reduce using rule 124 (n_pop_fake_bottom -> .)

    n_pop_fake_bottom              shift and go to state 171

state 138

    (63) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 63 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 139

    (65) print_aux -> expression n_print . COMMA print_aux
    (66) print_aux -> expression n_print .

    COMMA           shift and go to state 172
    R_PARENS        reduce using rule 66 (print_aux -> expression n_print .)


state 140

    (69) read -> READ L_PARENS ID n_register_read . R_PARENS

    R_PARENS        shift and go to state 173


state 141

    (55) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif else n_end_if
    (56) if -> IF L_PARENS expression R_PARENS . n_end_condition block elif n_end_if
    (57) if -> IF L_PARENS expression R_PARENS . n_end_condition block else n_end_if
    (58) if -> IF L_PARENS expression R_PARENS . n_end_condition block n_end_if
    (117) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 117 (n_end_condition -> .)

    n_end_condition                shift and go to state 174

state 142

    (62) while -> WHILE n_start_while L_PARENS expression . R_PARENS n_end_condition block n_end_while

    R_PARENS        shift and go to state 175


state 143

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 145
    FLOAT           shift and go to state 146
    STRING          shift and go to state 147
    VOID            shift and go to state 148

    function_type                  shift and go to state 176

state 144

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .)


state 145

    (19) function_type -> INT . n_add_function_type
    (106) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 106 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 177

state 146

    (20) function_type -> FLOAT . n_add_function_type
    (106) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 106 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 178

state 147

    (21) function_type -> STRING . n_add_function_type
    (106) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 106 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 179

state 148

    (22) function_type -> VOID . n_add_function_type
    (106) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 106 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 180

state 149

    (15) function_params -> type ID n_add_param . array_index COMMA function_params
    (16) function_params -> type ID n_add_param . array_index
    (17) function_params -> type ID n_add_param . COMMA function_params
    (18) function_params -> type ID n_add_param .
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 182
    R_PARENS        reduce using rule 18 (function_params -> type ID n_add_param .)
    L_SQUARE_BRACKET shift and go to state 86

    array_index                    shift and go to state 181

state 150

    (23) var -> type_aux ID n_add_var array_dim var_aux . SEMICOLON

    SEMICOLON       shift and go to state 183


state 151

    (24) var -> type_aux ID n_add_var array_dim SEMICOLON .

    GLOBAL          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    INT             reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    FLOAT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    STRING          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    ID              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    PRINT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    READ            reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    IF              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)


state 152

    (25) var -> type_aux ID n_add_var var_aux SEMICOLON .

    GLOBAL          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    INT             reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    FLOAT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    STRING          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    ID              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    RETURN          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    PRINT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    READ            reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    IF              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    WHILE           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)


state 153

    (47) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (48) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 184


state 154

    (29) var_aux -> COMMA ID . n_add_var array_dim var_aux
    (30) var_aux -> COMMA ID . n_add_var array_dim
    (31) var_aux -> COMMA ID . n_add_var var_aux
    (32) var_aux -> COMMA ID . n_add_var
    (109) n_add_var -> .

    L_SQUARE_BRACKET reduce using rule 109 (n_add_var -> .)
    COMMA           reduce using rule 109 (n_add_var -> .)
    SEMICOLON       reduce using rule 109 (n_add_var -> .)

    n_add_var                      shift and go to state 185

state 155

    (49) assignment -> ID n_start_assignment array_index ASSIGN expression .

    SEMICOLON       reduce using rule 49 (assignment -> ID n_start_assignment array_index ASSIGN expression .)


state 156

    (50) assignment -> ID n_start_assignment array_index ASSIGN read .

    SEMICOLON       reduce using rule 50 (assignment -> ID n_start_assignment array_index ASSIGN read .)


state 157

    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (46) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 186
    ASSIGN          reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 46 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 158

    (70) params_pass -> L_PARENS expression n_validate_param . params_pass_aux R_PARENS
    (71) params_pass -> L_PARENS expression n_validate_param . R_PARENS
    (73) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (74) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        shift and go to state 188
    COMMA           shift and go to state 189

    params_pass_aux                shift and go to state 187

state 159

    (67) expression -> exp n_eval_exp AND n_add_operator . expression
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    exp                            shift and go to state 56
    expression                     shift and go to state 190
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 160

    (76) exp -> xp n_eval_xp OR n_add_operator . exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    xp                             shift and go to state 57
    exp                            shift and go to state 191
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 161

    (78) xp -> x n_eval_x NOT_EQUAL n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 192
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 162

    (79) xp -> x n_eval_x EQUALS n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 193
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 163

    (80) xp -> x n_eval_x GREATER n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 194
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 164

    (81) xp -> x n_eval_x GREATER_EQ n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 195
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 165

    (82) xp -> x n_eval_x LESS n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 196
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 166

    (83) xp -> x n_eval_x LESS_EQ n_add_operator . xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    x                              shift and go to state 58
    xp                             shift and go to state 197
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 167

    (85) x -> term n_eval_term PLUS n_add_operator . x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    term                           shift and go to state 59
    x                              shift and go to state 198
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 168

    (86) x -> term n_eval_term MINUS n_add_operator . x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    term                           shift and go to state 59
    x                              shift and go to state 199
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 169

    (88) term -> factor n_eval_factor TIMES n_add_operator . term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    factor                         shift and go to state 62
    term                           shift and go to state 200
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 170

    (89) term -> factor n_eval_factor DIVIDE n_add_operator . term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    factor                         shift and go to state 62
    term                           shift and go to state 201
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 171

    (93) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom . R_PARENS

    R_PARENS        shift and go to state 202


state 172

    (65) print_aux -> expression n_print COMMA . print_aux
    (65) print_aux -> . expression n_print COMMA print_aux
    (66) print_aux -> . expression n_print
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 106
    print_aux                      shift and go to state 203
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 173

    (69) read -> READ L_PARENS ID n_register_read R_PARENS .

    SEMICOLON       reduce using rule 69 (read -> READ L_PARENS ID n_register_read R_PARENS .)


state 174

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif else n_end_if
    (56) if -> IF L_PARENS expression R_PARENS n_end_condition . block elif n_end_if
    (57) if -> IF L_PARENS expression R_PARENS n_end_condition . block else n_end_if
    (58) if -> IF L_PARENS expression R_PARENS n_end_condition . block n_end_if
    (75) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 205

    block                          shift and go to state 204

state 175

    (62) while -> WHILE n_start_while L_PARENS expression R_PARENS . n_end_condition block n_end_while
    (117) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 117 (n_end_condition -> .)

    n_end_condition                shift and go to state 206

state 176

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .)


state 177

    (19) function_type -> INT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> INT n_add_function_type .)


state 178

    (20) function_type -> FLOAT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> FLOAT n_add_function_type .)


state 179

    (21) function_type -> STRING n_add_function_type .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> STRING n_add_function_type .)


state 180

    (22) function_type -> VOID n_add_function_type .

    L_KEY_BRACKET   reduce using rule 22 (function_type -> VOID n_add_function_type .)


state 181

    (15) function_params -> type ID n_add_param array_index . COMMA function_params
    (16) function_params -> type ID n_add_param array_index .

    COMMA           shift and go to state 207
    R_PARENS        reduce using rule 16 (function_params -> type ID n_add_param array_index .)


state 182

    (17) function_params -> type ID n_add_param COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    type                           shift and go to state 80
    function_params                shift and go to state 208

state 183

    (23) var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .

    GLOBAL          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    INT             reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    READ            reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)


state 184

    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (48) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 209
    SEMICOLON       reduce using rule 48 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 48 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 185

    (29) var_aux -> COMMA ID n_add_var . array_dim var_aux
    (30) var_aux -> COMMA ID n_add_var . array_dim
    (31) var_aux -> COMMA ID n_add_var . var_aux
    (32) var_aux -> COMMA ID n_add_var .
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (48) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 32 (var_aux -> COMMA ID n_add_var .)
    L_SQUARE_BRACKET shift and go to state 116
    COMMA           shift and go to state 117

    array_dim                      shift and go to state 210
    var_aux                        shift and go to state 211

state 186

    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 212
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 187

    (70) params_pass -> L_PARENS expression n_validate_param params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 213


state 188

    (71) params_pass -> L_PARENS expression n_validate_param R_PARENS .

    SEMICOLON       reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    TIMES           reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    DIVIDE          reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    PLUS            reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    MINUS           reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    NOT_EQUAL       reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    EQUALS          reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER         reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    GREATER_EQ      reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS            reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    LESS_EQ         reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    OR              reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    AND             reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    COMMA           reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_PARENS        reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 71 (params_pass -> L_PARENS expression n_validate_param R_PARENS .)


state 189

    (73) params_pass_aux -> COMMA . expression n_validate_param params_pass_aux
    (74) params_pass_aux -> COMMA . expression n_validate_param
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 214
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 190

    (67) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 67 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 67 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 67 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 67 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 191

    (76) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 76 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 76 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 76 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 76 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 76 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 192

    (78) xp -> x n_eval_x NOT_EQUAL n_add_operator xp .

    OR              reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    AND             reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    SEMICOLON       reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    COMMA           reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_PARENS        reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 78 (xp -> x n_eval_x NOT_EQUAL n_add_operator xp .)


state 193

    (79) xp -> x n_eval_x EQUALS n_add_operator xp .

    OR              reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    AND             reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    SEMICOLON       reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    COMMA           reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_PARENS        reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 79 (xp -> x n_eval_x EQUALS n_add_operator xp .)


state 194

    (80) xp -> x n_eval_x GREATER n_add_operator xp .

    OR              reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)
    AND             reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)
    SEMICOLON       reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)
    COMMA           reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_PARENS        reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 80 (xp -> x n_eval_x GREATER n_add_operator xp .)


state 195

    (81) xp -> x n_eval_x GREATER_EQ n_add_operator xp .

    OR              reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    AND             reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    COMMA           reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 81 (xp -> x n_eval_x GREATER_EQ n_add_operator xp .)


state 196

    (82) xp -> x n_eval_x LESS n_add_operator xp .

    OR              reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)
    AND             reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)
    SEMICOLON       reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)
    COMMA           reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_PARENS        reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 82 (xp -> x n_eval_x LESS n_add_operator xp .)


state 197

    (83) xp -> x n_eval_x LESS_EQ n_add_operator xp .

    OR              reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    AND             reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    SEMICOLON       reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    COMMA           reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_PARENS        reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)
    R_SQUARE_BRACKET reduce using rule 83 (xp -> x n_eval_x LESS_EQ n_add_operator xp .)


state 198

    (85) x -> term n_eval_term PLUS n_add_operator x .

    NOT_EQUAL       reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    EQUALS          reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER         reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    GREATER_EQ      reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS            reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    LESS_EQ         reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    OR              reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    AND             reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    SEMICOLON       reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    COMMA           reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    R_PARENS        reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 85 (x -> term n_eval_term PLUS n_add_operator x .)


state 199

    (86) x -> term n_eval_term MINUS n_add_operator x .

    NOT_EQUAL       reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    EQUALS          reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER         reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    GREATER_EQ      reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS            reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    LESS_EQ         reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    OR              reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    AND             reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    SEMICOLON       reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    COMMA           reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    R_PARENS        reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 86 (x -> term n_eval_term MINUS n_add_operator x .)


state 200

    (88) term -> factor n_eval_factor TIMES n_add_operator term .

    PLUS            reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    MINUS           reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    NOT_EQUAL       reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    EQUALS          reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER         reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    GREATER_EQ      reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS            reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    LESS_EQ         reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    OR              reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    AND             reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    SEMICOLON       reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    COMMA           reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_PARENS        reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 88 (term -> factor n_eval_factor TIMES n_add_operator term .)


state 201

    (89) term -> factor n_eval_factor DIVIDE n_add_operator term .

    PLUS            reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    MINUS           reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    NOT_EQUAL       reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    EQUALS          reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER         reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    GREATER_EQ      reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS            reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    LESS_EQ         reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    OR              reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    AND             reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    SEMICOLON       reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    COMMA           reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_PARENS        reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 89 (term -> factor n_eval_factor DIVIDE n_add_operator term .)


state 202

    (93) factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .

    TIMES           reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    DIVIDE          reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    PLUS            reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    MINUS           reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    NOT_EQUAL       reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    EQUALS          reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER         reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    GREATER_EQ      reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS            reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    LESS_EQ         reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    OR              reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    AND             reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    SEMICOLON       reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    COMMA           reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_PARENS        reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 93 (factor_aux -> L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS .)


state 203

    (65) print_aux -> expression n_print COMMA print_aux .

    R_PARENS        reduce using rule 65 (print_aux -> expression n_print COMMA print_aux .)


state 204

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif else n_end_if
    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block . elif n_end_if
    (57) if -> IF L_PARENS expression R_PARENS n_end_condition block . else n_end_if
    (58) if -> IF L_PARENS expression R_PARENS n_end_condition block . n_end_if
    (59) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (60) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block
    (61) else -> . ELSE n_start_else block
    (119) n_end_if -> .

    ELIF            shift and go to state 218
    ELSE            shift and go to state 219
    ID              reduce using rule 119 (n_end_if -> .)
    RETURN          reduce using rule 119 (n_end_if -> .)
    PRINT           reduce using rule 119 (n_end_if -> .)
    READ            reduce using rule 119 (n_end_if -> .)
    IF              reduce using rule 119 (n_end_if -> .)
    WHILE           reduce using rule 119 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 119 (n_end_if -> .)

    elif                           shift and go to state 215
    else                           shift and go to state 216
    n_end_if                       shift and go to state 217

state 205

    (75) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux -> . read
    (40) statement_aux_2 -> . if
    (41) statement_aux_2 -> . while
    (49) assignment -> . ID n_start_assignment array_index ASSIGN expression
    (50) assignment -> . ID n_start_assignment array_index ASSIGN read
    (51) assignment -> . ID n_start_assignment ASSIGN expression
    (52) assignment -> . ID n_start_assignment ASSIGN read
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (54) return -> . RETURN expression n_return
    (63) print -> . PRINT L_PARENS print_aux R_PARENS
    (64) print -> . PRINT L_PARENS R_PARENS
    (69) read -> . READ L_PARENS ID n_register_read R_PARENS
    (55) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if
    (56) if -> . IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if
    (57) if -> . IF L_PARENS expression R_PARENS n_end_condition block else n_end_if
    (58) if -> . IF L_PARENS expression R_PARENS n_end_condition block n_end_if
    (62) while -> . WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while

    ID              shift and go to state 21
    RETURN          shift and go to state 36
    PRINT           shift and go to state 37
    READ            shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40

    statements                     shift and go to state 220
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    read                           shift and go to state 30
    if                             shift and go to state 31
    while                          shift and go to state 32

state 206

    (62) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition . block n_end_while
    (75) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 205

    block                          shift and go to state 221

state 207

    (15) function_params -> type ID n_add_param array_index COMMA . function_params
    (15) function_params -> . type ID n_add_param array_index COMMA function_params
    (16) function_params -> . type ID n_add_param array_index
    (17) function_params -> . type ID n_add_param COMMA function_params
    (18) function_params -> . type ID n_add_param
    (42) type -> . INT n_record_last_type
    (43) type -> . FLOAT n_record_last_type
    (44) type -> . STRING n_record_last_type

    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 35

    type                           shift and go to state 80
    function_params                shift and go to state 222

state 208

    (17) function_params -> type ID n_add_param COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID n_add_param COMMA function_params .)


state 209

    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 223


state 210

    (29) var_aux -> COMMA ID n_add_var array_dim . var_aux
    (30) var_aux -> COMMA ID n_add_var array_dim .
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 30 (var_aux -> COMMA ID n_add_var array_dim .)
    COMMA           shift and go to state 117

    var_aux                        shift and go to state 224

state 211

    (31) var_aux -> COMMA ID n_add_var var_aux .

    SEMICOLON       reduce using rule 31 (var_aux -> COMMA ID n_add_var var_aux .)


state 212

    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 225


state 213

    (70) params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    TIMES           reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    PLUS            reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    MINUS           reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER         reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS            reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    OR              reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    AND             reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    COMMA           reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 70 (params_pass -> L_PARENS expression n_validate_param params_pass_aux R_PARENS .)


state 214

    (73) params_pass_aux -> COMMA expression . n_validate_param params_pass_aux
    (74) params_pass_aux -> COMMA expression . n_validate_param
    (130) n_validate_param -> .

    COMMA           reduce using rule 130 (n_validate_param -> .)
    R_PARENS        reduce using rule 130 (n_validate_param -> .)

    n_validate_param               shift and go to state 226

state 215

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . else n_end_if
    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block elif . n_end_if
    (61) else -> . ELSE n_start_else block
    (119) n_end_if -> .

    ELSE            shift and go to state 219
    ID              reduce using rule 119 (n_end_if -> .)
    RETURN          reduce using rule 119 (n_end_if -> .)
    PRINT           reduce using rule 119 (n_end_if -> .)
    READ            reduce using rule 119 (n_end_if -> .)
    IF              reduce using rule 119 (n_end_if -> .)
    WHILE           reduce using rule 119 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 119 (n_end_if -> .)

    else                           shift and go to state 227
    n_end_if                       shift and go to state 228

state 216

    (57) if -> IF L_PARENS expression R_PARENS n_end_condition block else . n_end_if
    (119) n_end_if -> .

    ID              reduce using rule 119 (n_end_if -> .)
    RETURN          reduce using rule 119 (n_end_if -> .)
    PRINT           reduce using rule 119 (n_end_if -> .)
    READ            reduce using rule 119 (n_end_if -> .)
    IF              reduce using rule 119 (n_end_if -> .)
    WHILE           reduce using rule 119 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 119 (n_end_if -> .)

    n_end_if                       shift and go to state 229

state 217

    (58) if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .

    ID              reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    RETURN          reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    PRINT           reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    READ            reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    IF              reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    WHILE           reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)
    R_KEY_BRACKET   reduce using rule 58 (if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if .)


state 218

    (59) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (60) elif -> ELIF . n_start_else L_PARENS expression R_PARENS n_end_condition block
    (118) n_start_else -> .

    L_PARENS        reduce using rule 118 (n_start_else -> .)

    n_start_else                   shift and go to state 230

state 219

    (61) else -> ELSE . n_start_else block
    (118) n_start_else -> .

    L_KEY_BRACKET   reduce using rule 118 (n_start_else -> .)

    n_start_else                   shift and go to state 231

state 220

    (75) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 232


state 221

    (62) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block . n_end_while
    (121) n_end_while -> .

    ID              reduce using rule 121 (n_end_while -> .)
    RETURN          reduce using rule 121 (n_end_while -> .)
    PRINT           reduce using rule 121 (n_end_while -> .)
    READ            reduce using rule 121 (n_end_while -> .)
    IF              reduce using rule 121 (n_end_while -> .)
    WHILE           reduce using rule 121 (n_end_while -> .)
    R_KEY_BRACKET   reduce using rule 121 (n_end_while -> .)

    n_end_while                    shift and go to state 233

state 222

    (15) function_params -> type ID n_add_param array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID n_add_param array_index COMMA function_params .)


state 223

    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 234


state 224

    (29) var_aux -> COMMA ID n_add_var array_dim var_aux .

    SEMICOLON       reduce using rule 29 (var_aux -> COMMA ID n_add_var array_dim var_aux .)


state 225

    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    ASSIGN          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 226

    (73) params_pass_aux -> COMMA expression n_validate_param . params_pass_aux
    (74) params_pass_aux -> COMMA expression n_validate_param .
    (73) params_pass_aux -> . COMMA expression n_validate_param params_pass_aux
    (74) params_pass_aux -> . COMMA expression n_validate_param

    R_PARENS        reduce using rule 74 (params_pass_aux -> COMMA expression n_validate_param .)
    COMMA           shift and go to state 189

    params_pass_aux                shift and go to state 235

state 227

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else . n_end_if
    (119) n_end_if -> .

    ID              reduce using rule 119 (n_end_if -> .)
    RETURN          reduce using rule 119 (n_end_if -> .)
    PRINT           reduce using rule 119 (n_end_if -> .)
    READ            reduce using rule 119 (n_end_if -> .)
    IF              reduce using rule 119 (n_end_if -> .)
    WHILE           reduce using rule 119 (n_end_if -> .)
    R_KEY_BRACKET   reduce using rule 119 (n_end_if -> .)

    n_end_if                       shift and go to state 236

state 228

    (56) if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .

    ID              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    RETURN          reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    PRINT           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    READ            reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    IF              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    WHILE           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)
    R_KEY_BRACKET   reduce using rule 56 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if .)


state 229

    (57) if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .

    ID              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    RETURN          reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    PRINT           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    READ            reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    IF              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    WHILE           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)
    R_KEY_BRACKET   reduce using rule 57 (if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if .)


state 230

    (59) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block elif
    (60) elif -> ELIF n_start_else . L_PARENS expression R_PARENS n_end_condition block

    L_PARENS        shift and go to state 237


state 231

    (61) else -> ELSE n_start_else . block
    (75) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 205

    block                          shift and go to state 238

state 232

    (75) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    READ            reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 75 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 233

    (62) while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .

    ID              reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    RETURN          reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    PRINT           reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    READ            reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    IF              reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    WHILE           reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)
    R_KEY_BRACKET   reduce using rule 62 (while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while .)


state 234

    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 235

    (73) params_pass_aux -> COMMA expression n_validate_param params_pass_aux .

    R_PARENS        reduce using rule 73 (params_pass_aux -> COMMA expression n_validate_param params_pass_aux .)


state 236

    (55) if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .

    ID              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    RETURN          reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    PRINT           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    READ            reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    IF              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    WHILE           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)
    R_KEY_BRACKET   reduce using rule 55 (if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if .)


state 237

    (59) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block elif
    (60) elif -> ELIF n_start_else L_PARENS . expression R_PARENS n_end_condition block
    (67) expression -> . exp n_eval_exp AND n_add_operator expression
    (68) expression -> . exp n_eval_exp
    (76) exp -> . xp n_eval_xp OR n_add_operator exp
    (77) exp -> . xp n_eval_xp
    (78) xp -> . x n_eval_x NOT_EQUAL n_add_operator xp
    (79) xp -> . x n_eval_x EQUALS n_add_operator xp
    (80) xp -> . x n_eval_x GREATER n_add_operator xp
    (81) xp -> . x n_eval_x GREATER_EQ n_add_operator xp
    (82) xp -> . x n_eval_x LESS n_add_operator xp
    (83) xp -> . x n_eval_x LESS_EQ n_add_operator xp
    (84) xp -> . x n_eval_x
    (85) x -> . term n_eval_term PLUS n_add_operator x
    (86) x -> . term n_eval_term MINUS n_add_operator x
    (87) x -> . term n_eval_term
    (88) term -> . factor n_eval_factor TIMES n_add_operator term
    (89) term -> . factor n_eval_factor DIVIDE n_add_operator term
    (90) term -> . factor n_eval_factor
    (91) factor -> . NOT factor_aux
    (92) factor -> . factor_aux
    (93) factor_aux -> . L_PARENS n_add_operator expression n_pop_fake_bottom R_PARENS
    (94) factor_aux -> . PLUS const
    (95) factor_aux -> . MINUS const
    (96) factor_aux -> . const
    (97) const -> . ID n_add_operand
    (98) const -> . CONST_F n_add_operand
    (99) const -> . CONST_I n_add_operand
    (100) const -> . CONST_STRING n_add_operand
    (101) const -> . function_call
    (102) const -> . array_access
    (53) function_call -> . ID n_calling_func params_pass n_validate_function_call
    (103) array_access -> . ID array_index

    NOT             shift and go to state 63
    L_PARENS        shift and go to state 65
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    ID              shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_I         shift and go to state 69
    CONST_STRING    shift and go to state 70

    expression                     shift and go to state 239
    exp                            shift and go to state 56
    xp                             shift and go to state 57
    x                              shift and go to state 58
    term                           shift and go to state 59
    factor                         shift and go to state 62
    factor_aux                     shift and go to state 64
    const                          shift and go to state 66
    function_call                  shift and go to state 71
    array_access                   shift and go to state 72

state 238

    (61) else -> ELSE n_start_else block .

    ID              reduce using rule 61 (else -> ELSE n_start_else block .)
    RETURN          reduce using rule 61 (else -> ELSE n_start_else block .)
    PRINT           reduce using rule 61 (else -> ELSE n_start_else block .)
    READ            reduce using rule 61 (else -> ELSE n_start_else block .)
    IF              reduce using rule 61 (else -> ELSE n_start_else block .)
    WHILE           reduce using rule 61 (else -> ELSE n_start_else block .)
    R_KEY_BRACKET   reduce using rule 61 (else -> ELSE n_start_else block .)


state 239

    (59) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block elif
    (60) elif -> ELIF n_start_else L_PARENS expression . R_PARENS n_end_condition block

    R_PARENS        shift and go to state 240


state 240

    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block elif
    (60) elif -> ELIF n_start_else L_PARENS expression R_PARENS . n_end_condition block
    (117) n_end_condition -> .

    L_KEY_BRACKET   reduce using rule 117 (n_end_condition -> .)

    n_end_condition                shift and go to state 241

state 241

    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block elif
    (60) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition . block
    (75) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 205

    block                          shift and go to state 242

state 242

    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block . elif
    (60) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .
    (59) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif
    (60) elif -> . ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block

    ELSE            reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ID              reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    RETURN          reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    PRINT           reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    READ            reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    IF              reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    WHILE           reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    R_KEY_BRACKET   reduce using rule 60 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block .)
    ELIF            shift and go to state 218

    elif                           shift and go to state 243

state 243

    (59) elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .

    ELSE            reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    ID              reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    RETURN          reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    PRINT           reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    READ            reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    IF              reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    WHILE           reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)
    R_KEY_BRACKET   reduce using rule 59 (elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif .)

