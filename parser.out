Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body n_end_function
Rule 6     main -> FUNCTION MAIN n_start_main function_body n_end_function
Rule 7     function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 11    function_body_aux -> var function_body_aux
Rule 12    function_body_aux -> var
Rule 13    statements -> statement statements
Rule 14    statements -> statement
Rule 15    function_params -> type ID n_add_var array_index COMMA function_params
Rule 16    function_params -> type ID n_add_var array_index
Rule 17    function_params -> type ID n_add_var COMMA function_params
Rule 18    function_params -> type ID n_add_var
Rule 19    function_type -> INT n_add_function_type
Rule 20    function_type -> FLOAT n_add_function_type
Rule 21    function_type -> STRING n_add_function_type
Rule 22    function_type -> VOID n_add_function_type
Rule 23    var -> type_aux ID n_add_var array_dim var_aux SEMICOLON
Rule 24    var -> type_aux ID n_add_var array_dim SEMICOLON
Rule 25    var -> type_aux ID n_add_var var_aux SEMICOLON
Rule 26    var -> type_aux ID n_add_var SEMICOLON
Rule 27    type_aux -> GLOBAL type
Rule 28    type_aux -> type
Rule 29    var_aux -> COMMA ID n_add_var array_dim var_aux
Rule 30    var_aux -> COMMA ID n_add_var array_dim
Rule 31    var_aux -> COMMA ID n_add_var var_aux
Rule 32    var_aux -> COMMA ID n_add_var
Rule 33    statement -> statement_aux SEMICOLON
Rule 34    statement -> statement_aux_2
Rule 35    statement_aux -> assignment
Rule 36    statement_aux -> function_call
Rule 37    statement_aux -> return
Rule 38    statement_aux -> print
Rule 39    statement_aux_2 -> if
Rule 40    statement_aux_2 -> while
Rule 41    type -> INT n_record_last_type
Rule 42    type -> FLOAT n_record_last_type
Rule 43    type -> STRING n_record_last_type
Rule 44    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 45    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 46    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 47    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 48    assignment -> ID n_add_operand array_index ASSIGN n_make_assignment expression
Rule 49    assignment -> ID n_add_operand array_index ASSIGN n_make_assignment read
Rule 50    assignment -> ID n_add_operand ASSIGN n_make_assignment expression
Rule 51    assignment -> ID n_add_operand ASSIGN n_make_assignment read
Rule 52    function_call -> ID params_pass
Rule 53    return -> RETURN expression
Rule 54    if -> IF L_PARENS expression R_PARENS block elif else
Rule 55    if -> IF L_PARENS expression R_PARENS block elif
Rule 56    if -> IF L_PARENS expression R_PARENS block else
Rule 57    if -> IF L_PARENS expression R_PARENS block
Rule 58    elif -> ELIF L_PARENS expression R_PARENS block elif
Rule 59    elif -> ELIF L_PARENS expression R_PARENS block
Rule 60    else -> ELSE block
Rule 61    while -> WHILE L_PARENS expression R_PARENS block
Rule 62    print -> PRINT L_PARENS print_aux R_PARENS
Rule 63    print -> PRINT L_PARENS R_PARENS
Rule 64    print_aux -> CONST_STRING COMMA print_aux
Rule 65    print_aux -> CONST_STRING
Rule 66    print_aux -> ID COMMA print_aux
Rule 67    print_aux -> ID
Rule 68    expression -> exp n_eval_exp AND n_add_operator expression
Rule 69    expression -> exp n_eval_exp
Rule 70    read -> READ ID
Rule 71    params_pass -> L_PARENS expression params_pass_aux R_PARENS
Rule 72    params_pass -> L_PARENS expression R_PARENS
Rule 73    params_pass -> L_PARENS R_PARENS
Rule 74    params_pass_aux -> COMMA expression params_pass_aux
Rule 75    params_pass_aux -> COMMA expression
Rule 76    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 77    exp -> xp n_eval_xp OR n_add_operator exp
Rule 78    exp -> xp n_eval_xp
Rule 79    xp -> x n_eval_x log_op n_add_operator x
Rule 80    xp -> x n_eval_x
Rule 81    x -> term n_eval_term x_aux
Rule 82    x -> term n_eval_term
Rule 83    x_aux -> PLUS n_add_operator term x_aux
Rule 84    x_aux -> PLUS n_add_operator term
Rule 85    x_aux -> MINUS n_add_operator term x_aux
Rule 86    x_aux -> MINUS n_add_operator term
Rule 87    log_op -> NOT_EQUAL
Rule 88    log_op -> EQUALS
Rule 89    log_op -> GREATER
Rule 90    log_op -> GREATER_EQ
Rule 91    log_op -> LESS
Rule 92    log_op -> LESS_EQ
Rule 93    term -> factor n_eval_factor term_aux
Rule 94    term -> factor n_eval_factor
Rule 95    term_aux -> TIMES n_add_operator factor term_aux
Rule 96    term_aux -> TIMES n_add_operator factor
Rule 97    term_aux -> DIVIDE n_add_operator factor term_aux
Rule 98    term_aux -> DIVIDE n_add_operator factor
Rule 99    factor -> NOT factor_aux
Rule 100   factor -> factor_aux
Rule 101   factor_aux -> L_PARENS expression R_PARENS
Rule 102   factor_aux -> PLUS const
Rule 103   factor_aux -> MINUS const
Rule 104   factor_aux -> const
Rule 105   const -> ID n_add_operand
Rule 106   const -> CONST_I n_add_operand
Rule 107   const -> CONST_F n_add_operand
Rule 108   const -> CONST_STRING n_add_operand
Rule 109   const -> function_call
Rule 110   const -> array_access
Rule 111   array_access -> ID array_index
Rule 112   n_start_main -> <empty>
Rule 113   n_add_function_name -> <empty>
Rule 114   n_add_function_type -> <empty>
Rule 115   n_end_function -> <empty>
Rule 116   n_add_var -> <empty>
Rule 117   n_record_last_type -> <empty>
Rule 118   n_eval_exp -> <empty>
Rule 119   n_eval_xp -> <empty>
Rule 120   n_eval_x -> <empty>
Rule 121   n_eval_factor -> <empty>
Rule 122   n_eval_term -> <empty>
Rule 123   n_add_operand -> <empty>
Rule 124   n_add_operator -> <empty>
Rule 125   n_make_assignment -> <empty>

Terminals, with rules where they appear

AND                  : 68
ASSIGN               : 48 49 50 51
COLON                : 7 8
COMMA                : 15 17 29 30 31 32 64 66 74 75
CONST_F              : 107
CONST_I              : 46 46 47 106
CONST_STRING         : 64 65 108
DIVIDE               : 97 98
ELIF                 : 58 59
ELSE                 : 60
EQUALS               : 88
FLOAT                : 20 42
FUNCTION             : 6 7 8
GLOBAL               : 27
GREATER              : 89
GREATER_EQ           : 90
ID                   : 7 8 15 16 17 18 23 24 25 26 29 30 31 32 48 49 50 51 52 66 67 70 105 111
IF                   : 54 55 56 57
INT                  : 19 41
LESS                 : 91
LESS_EQ              : 92
L_KEY_BRACKET        : 9 10 76
L_PARENS             : 7 8 54 55 56 57 58 59 61 62 63 71 72 73 101
L_SQUARE_BRACKET     : 44 44 45 46 46 47
MAIN                 : 6
MINUS                : 85 86 103
NOT                  : 99
NOT_EQUAL            : 87
OR                   : 77
PLUS                 : 83 84 102
PRINT                : 62 63
READ                 : 70
RETURN               : 53
R_KEY_BRACKET        : 9 10 76
R_PARENS             : 7 8 54 55 56 57 58 59 61 62 63 71 72 73 101
R_SQUARE_BRACKET     : 44 44 45 46 46 47
SEMICOLON            : 23 24 25 26 33
STRING               : 21 43
TIMES                : 95 96
VOID                 : 22
WHILE                : 61
error                : 

Nonterminals, with rules where they appear

array_access         : 110
array_dim            : 23 24 29 30
array_index          : 15 16 48 49 111
assignment           : 35
block                : 54 55 56 57 58 59 60 61
const                : 102 103 104
elif                 : 54 55 58
else                 : 54 56
exp                  : 68 69 77
expression           : 44 44 45 48 50 53 54 55 56 57 58 59 61 68 71 72 74 75 101
factor               : 93 94 95 96 97 98
factor_aux           : 99 100
function             : 3 4
function_body        : 5 6
function_body_aux    : 9 11
function_call        : 36 109
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 39
log_op               : 79
main                 : 1 2
n_add_function_name  : 7 8
n_add_function_type  : 19 20 21 22
n_add_operand        : 48 49 50 51 105 106 107 108
n_add_operator       : 68 77 79 83 84 85 86 95 96 97 98
n_add_var            : 15 16 17 18 23 24 25 26 29 30 31 32
n_end_function       : 5 6
n_eval_exp           : 68 69
n_eval_factor        : 93 94
n_eval_term          : 81 82
n_eval_x             : 79 80
n_eval_xp            : 77 78
n_make_assignment    : 48 49 50 51
n_record_last_type   : 41 42 43
n_start_main         : 6
params_pass          : 52
params_pass_aux      : 71 74
print                : 38
print_aux            : 62 64 66
program              : 0
program_aux          : 1 3
read                 : 49 51
return               : 37
statement            : 13 14
statement_aux        : 33
statement_aux_2      : 34
statements           : 9 10 13 76
term                 : 81 82 83 84 85 86
term_aux             : 93 95 97
type                 : 15 16 17 18 27 28
type_aux             : 23 24 25 26
var                  : 11 12
var_aux              : 23 25 29 31
while                : 40
x                    : 79 79 80
x_aux                : 81 83 85
xp                   : 77 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_function
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN n_start_main function_body n_end_function
    (5) function -> . function_header function_body n_end_function
    (7) function_header -> . FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN n_start_main function_body n_end_function
    (7) function_header -> FUNCTION . ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID n_add_function_name L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body n_end_function
    (9) function_body -> . L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . n_start_main function_body n_end_function
    (112) n_start_main -> .

    L_KEY_BRACKET   reduce using rule 112 (n_start_main -> .)

    n_start_main                   shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . n_add_function_name L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . n_add_function_name L_PARENS R_PARENS COLON function_type
    (113) n_add_function_name -> .

    L_PARENS        reduce using rule 113 (n_add_function_name -> .)

    n_add_function_name            shift and go to state 14

state 11

    (5) function -> function_header function_body . n_end_function
    (115) n_end_function -> .

    FUNCTION        reduce using rule 115 (n_end_function -> .)

    n_end_function                 shift and go to state 15

state 12

    (9) function_body -> L_KEY_BRACKET . function_body_aux statements R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (13) statements -> . statement statements
    (14) statements -> . statement
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type
    (48) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment expression
    (49) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment read
    (50) assignment -> . ID n_add_operand ASSIGN n_make_assignment expression
    (51) assignment -> . ID n_add_operand ASSIGN n_make_assignment read
    (52) function_call -> . ID params_pass
    (53) return -> . RETURN expression
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS block elif else
    (55) if -> . IF L_PARENS expression R_PARENS block elif
    (56) if -> . IF L_PARENS expression R_PARENS block else
    (57) if -> . IF L_PARENS expression R_PARENS block
    (61) while -> . WHILE L_PARENS expression R_PARENS block

    GLOBAL          shift and go to state 24
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34
    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    function_body_aux              shift and go to state 16
    statements                     shift and go to state 17
    var                            shift and go to state 18
    statement                      shift and go to state 19
    type_aux                       shift and go to state 20
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    type                           shift and go to state 25
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 13

    (6) main -> FUNCTION MAIN n_start_main . function_body n_end_function
    (9) function_body -> . L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 39

state 14

    (7) function_header -> FUNCTION ID n_add_function_name . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 40


state 15

    (5) function -> function_header function_body n_end_function .

    FUNCTION        reduce using rule 5 (function -> function_header function_body n_end_function .)


state 16

    (9) function_body -> L_KEY_BRACKET function_body_aux . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment expression
    (49) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment read
    (50) assignment -> . ID n_add_operand ASSIGN n_make_assignment expression
    (51) assignment -> . ID n_add_operand ASSIGN n_make_assignment read
    (52) function_call -> . ID params_pass
    (53) return -> . RETURN expression
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS block elif else
    (55) if -> . IF L_PARENS expression R_PARENS block elif
    (56) if -> . IF L_PARENS expression R_PARENS block else
    (57) if -> . IF L_PARENS expression R_PARENS block
    (61) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statements                     shift and go to state 41
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 17

    (10) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 42


state 18

    (11) function_body_aux -> var . function_body_aux
    (12) function_body_aux -> var .
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (23) var -> . type_aux ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> . type_aux ID n_add_var array_dim SEMICOLON
    (25) var -> . type_aux ID n_add_var var_aux SEMICOLON
    (26) var -> . type_aux ID n_add_var SEMICOLON
    (27) type_aux -> . GLOBAL type
    (28) type_aux -> . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    ID              reduce using rule 12 (function_body_aux -> var .)
    RETURN          reduce using rule 12 (function_body_aux -> var .)
    PRINT           reduce using rule 12 (function_body_aux -> var .)
    IF              reduce using rule 12 (function_body_aux -> var .)
    WHILE           reduce using rule 12 (function_body_aux -> var .)
    GLOBAL          shift and go to state 24
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    var                            shift and go to state 18
    function_body_aux              shift and go to state 43
    type_aux                       shift and go to state 20
    type                           shift and go to state 25

state 19

    (13) statements -> statement . statements
    (14) statements -> statement .
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment expression
    (49) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment read
    (50) assignment -> . ID n_add_operand ASSIGN n_make_assignment expression
    (51) assignment -> . ID n_add_operand ASSIGN n_make_assignment read
    (52) function_call -> . ID params_pass
    (53) return -> . RETURN expression
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS block elif else
    (55) if -> . IF L_PARENS expression R_PARENS block elif
    (56) if -> . IF L_PARENS expression R_PARENS block else
    (57) if -> . IF L_PARENS expression R_PARENS block
    (61) while -> . WHILE L_PARENS expression R_PARENS block

    R_KEY_BRACKET   reduce using rule 14 (statements -> statement .)
    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statement                      shift and go to state 19
    statements                     shift and go to state 44
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 20

    (23) var -> type_aux . ID n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux . ID n_add_var array_dim SEMICOLON
    (25) var -> type_aux . ID n_add_var var_aux SEMICOLON
    (26) var -> type_aux . ID n_add_var SEMICOLON

    ID              shift and go to state 45


state 21

    (48) assignment -> ID . n_add_operand array_index ASSIGN n_make_assignment expression
    (49) assignment -> ID . n_add_operand array_index ASSIGN n_make_assignment read
    (50) assignment -> ID . n_add_operand ASSIGN n_make_assignment expression
    (51) assignment -> ID . n_add_operand ASSIGN n_make_assignment read
    (52) function_call -> ID . params_pass
    (123) n_add_operand -> .
    (71) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (72) params_pass -> . L_PARENS expression R_PARENS
    (73) params_pass -> . L_PARENS R_PARENS

    ASSIGN          reduce using rule 123 (n_add_operand -> .)
    L_SQUARE_BRACKET reduce using rule 123 (n_add_operand -> .)
    L_PARENS        shift and go to state 48

    n_add_operand                  shift and go to state 46
    params_pass                    shift and go to state 47

state 22

    (33) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 49


state 23

    (34) statement -> statement_aux_2 .

    ID              reduce using rule 34 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 34 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 34 (statement -> statement_aux_2 .)
    IF              reduce using rule 34 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 34 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 34 (statement -> statement_aux_2 .)


state 24

    (27) type_aux -> GLOBAL . type
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 50

state 25

    (28) type_aux -> type .

    ID              reduce using rule 28 (type_aux -> type .)


state 26

    (35) statement_aux -> assignment .

    SEMICOLON       reduce using rule 35 (statement_aux -> assignment .)


state 27

    (36) statement_aux -> function_call .

    SEMICOLON       reduce using rule 36 (statement_aux -> function_call .)


state 28

    (37) statement_aux -> return .

    SEMICOLON       reduce using rule 37 (statement_aux -> return .)


state 29

    (38) statement_aux -> print .

    SEMICOLON       reduce using rule 38 (statement_aux -> print .)


state 30

    (39) statement_aux_2 -> if .

    ID              reduce using rule 39 (statement_aux_2 -> if .)
    RETURN          reduce using rule 39 (statement_aux_2 -> if .)
    PRINT           reduce using rule 39 (statement_aux_2 -> if .)
    IF              reduce using rule 39 (statement_aux_2 -> if .)
    WHILE           reduce using rule 39 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 39 (statement_aux_2 -> if .)


state 31

    (40) statement_aux_2 -> while .

    ID              reduce using rule 40 (statement_aux_2 -> while .)
    RETURN          reduce using rule 40 (statement_aux_2 -> while .)
    PRINT           reduce using rule 40 (statement_aux_2 -> while .)
    IF              reduce using rule 40 (statement_aux_2 -> while .)
    WHILE           reduce using rule 40 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 40 (statement_aux_2 -> while .)


state 32

    (41) type -> INT . n_record_last_type
    (117) n_record_last_type -> .

    ID              reduce using rule 117 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 51

state 33

    (42) type -> FLOAT . n_record_last_type
    (117) n_record_last_type -> .

    ID              reduce using rule 117 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 52

state 34

    (43) type -> STRING . n_record_last_type
    (117) n_record_last_type -> .

    ID              reduce using rule 117 (n_record_last_type -> .)

    n_record_last_type             shift and go to state 53

state 35

    (53) return -> RETURN . expression
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 54
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 36

    (62) print -> PRINT . L_PARENS print_aux R_PARENS
    (63) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 72


state 37

    (54) if -> IF . L_PARENS expression R_PARENS block elif else
    (55) if -> IF . L_PARENS expression R_PARENS block elif
    (56) if -> IF . L_PARENS expression R_PARENS block else
    (57) if -> IF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 73


state 38

    (61) while -> WHILE . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 74


state 39

    (6) main -> FUNCTION MAIN n_start_main function_body . n_end_function
    (115) n_end_function -> .

    $end            reduce using rule 115 (n_end_function -> .)

    n_end_function                 shift and go to state 75

state 40

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID n_add_var array_index COMMA function_params
    (16) function_params -> . type ID n_add_var array_index
    (17) function_params -> . type ID n_add_var COMMA function_params
    (18) function_params -> . type ID n_add_var
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    R_PARENS        shift and go to state 77
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    function_params                shift and go to state 76
    type                           shift and go to state 78

state 41

    (9) function_body -> L_KEY_BRACKET function_body_aux statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 79


state 42

    (10) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 43

    (11) function_body_aux -> var function_body_aux .

    ID              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    RETURN          reduce using rule 11 (function_body_aux -> var function_body_aux .)
    PRINT           reduce using rule 11 (function_body_aux -> var function_body_aux .)
    IF              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    WHILE           reduce using rule 11 (function_body_aux -> var function_body_aux .)


state 44

    (13) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 13 (statements -> statement statements .)


state 45

    (23) var -> type_aux ID . n_add_var array_dim var_aux SEMICOLON
    (24) var -> type_aux ID . n_add_var array_dim SEMICOLON
    (25) var -> type_aux ID . n_add_var var_aux SEMICOLON
    (26) var -> type_aux ID . n_add_var SEMICOLON
    (116) n_add_var -> .

    SEMICOLON       reduce using rule 116 (n_add_var -> .)
    L_SQUARE_BRACKET reduce using rule 116 (n_add_var -> .)
    COMMA           reduce using rule 116 (n_add_var -> .)

    n_add_var                      shift and go to state 80

state 46

    (48) assignment -> ID n_add_operand . array_index ASSIGN n_make_assignment expression
    (49) assignment -> ID n_add_operand . array_index ASSIGN n_make_assignment read
    (50) assignment -> ID n_add_operand . ASSIGN n_make_assignment expression
    (51) assignment -> ID n_add_operand . ASSIGN n_make_assignment read
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    ASSIGN          shift and go to state 82
    L_SQUARE_BRACKET shift and go to state 83

    array_index                    shift and go to state 81

state 47

    (52) function_call -> ID params_pass .

    SEMICOLON       reduce using rule 52 (function_call -> ID params_pass .)
    TIMES           reduce using rule 52 (function_call -> ID params_pass .)
    DIVIDE          reduce using rule 52 (function_call -> ID params_pass .)
    PLUS            reduce using rule 52 (function_call -> ID params_pass .)
    MINUS           reduce using rule 52 (function_call -> ID params_pass .)
    NOT_EQUAL       reduce using rule 52 (function_call -> ID params_pass .)
    EQUALS          reduce using rule 52 (function_call -> ID params_pass .)
    GREATER         reduce using rule 52 (function_call -> ID params_pass .)
    GREATER_EQ      reduce using rule 52 (function_call -> ID params_pass .)
    LESS            reduce using rule 52 (function_call -> ID params_pass .)
    LESS_EQ         reduce using rule 52 (function_call -> ID params_pass .)
    OR              reduce using rule 52 (function_call -> ID params_pass .)
    AND             reduce using rule 52 (function_call -> ID params_pass .)
    R_PARENS        reduce using rule 52 (function_call -> ID params_pass .)
    COMMA           reduce using rule 52 (function_call -> ID params_pass .)
    R_SQUARE_BRACKET reduce using rule 52 (function_call -> ID params_pass .)


state 48

    (71) params_pass -> L_PARENS . expression params_pass_aux R_PARENS
    (72) params_pass -> L_PARENS . expression R_PARENS
    (73) params_pass -> L_PARENS . R_PARENS
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    R_PARENS        shift and go to state 85
    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 84
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 49

    (33) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 33 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 33 (statement -> statement_aux SEMICOLON .)


state 50

    (27) type_aux -> GLOBAL type .

    ID              reduce using rule 27 (type_aux -> GLOBAL type .)


state 51

    (41) type -> INT n_record_last_type .

    ID              reduce using rule 41 (type -> INT n_record_last_type .)


state 52

    (42) type -> FLOAT n_record_last_type .

    ID              reduce using rule 42 (type -> FLOAT n_record_last_type .)


state 53

    (43) type -> STRING n_record_last_type .

    ID              reduce using rule 43 (type -> STRING n_record_last_type .)


state 54

    (53) return -> RETURN expression .

    SEMICOLON       reduce using rule 53 (return -> RETURN expression .)


state 55

    (68) expression -> exp . n_eval_exp AND n_add_operator expression
    (69) expression -> exp . n_eval_exp
    (118) n_eval_exp -> .

    AND             reduce using rule 118 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 118 (n_eval_exp -> .)
    R_PARENS        reduce using rule 118 (n_eval_exp -> .)
    COMMA           reduce using rule 118 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 118 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 86

state 56

    (77) exp -> xp . n_eval_xp OR n_add_operator exp
    (78) exp -> xp . n_eval_xp
    (119) n_eval_xp -> .

    OR              reduce using rule 119 (n_eval_xp -> .)
    AND             reduce using rule 119 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 119 (n_eval_xp -> .)
    R_PARENS        reduce using rule 119 (n_eval_xp -> .)
    COMMA           reduce using rule 119 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 119 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 87

state 57

    (79) xp -> x . n_eval_x log_op n_add_operator x
    (80) xp -> x . n_eval_x
    (120) n_eval_x -> .

    NOT_EQUAL       reduce using rule 120 (n_eval_x -> .)
    EQUALS          reduce using rule 120 (n_eval_x -> .)
    GREATER         reduce using rule 120 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 120 (n_eval_x -> .)
    LESS            reduce using rule 120 (n_eval_x -> .)
    LESS_EQ         reduce using rule 120 (n_eval_x -> .)
    OR              reduce using rule 120 (n_eval_x -> .)
    AND             reduce using rule 120 (n_eval_x -> .)
    SEMICOLON       reduce using rule 120 (n_eval_x -> .)
    R_PARENS        reduce using rule 120 (n_eval_x -> .)
    COMMA           reduce using rule 120 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 120 (n_eval_x -> .)

    n_eval_x                       shift and go to state 88

state 58

    (81) x -> term . n_eval_term x_aux
    (82) x -> term . n_eval_term
    (122) n_eval_term -> .

    PLUS            reduce using rule 122 (n_eval_term -> .)
    MINUS           reduce using rule 122 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 122 (n_eval_term -> .)
    EQUALS          reduce using rule 122 (n_eval_term -> .)
    GREATER         reduce using rule 122 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 122 (n_eval_term -> .)
    LESS            reduce using rule 122 (n_eval_term -> .)
    LESS_EQ         reduce using rule 122 (n_eval_term -> .)
    OR              reduce using rule 122 (n_eval_term -> .)
    AND             reduce using rule 122 (n_eval_term -> .)
    SEMICOLON       reduce using rule 122 (n_eval_term -> .)
    R_PARENS        reduce using rule 122 (n_eval_term -> .)
    COMMA           reduce using rule 122 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 122 (n_eval_term -> .)

    n_eval_term                    shift and go to state 89

state 59

    (93) term -> factor . n_eval_factor term_aux
    (94) term -> factor . n_eval_factor
    (121) n_eval_factor -> .

    TIMES           reduce using rule 121 (n_eval_factor -> .)
    DIVIDE          reduce using rule 121 (n_eval_factor -> .)
    PLUS            reduce using rule 121 (n_eval_factor -> .)
    MINUS           reduce using rule 121 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 121 (n_eval_factor -> .)
    EQUALS          reduce using rule 121 (n_eval_factor -> .)
    GREATER         reduce using rule 121 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 121 (n_eval_factor -> .)
    LESS            reduce using rule 121 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 121 (n_eval_factor -> .)
    OR              reduce using rule 121 (n_eval_factor -> .)
    AND             reduce using rule 121 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 121 (n_eval_factor -> .)
    R_PARENS        reduce using rule 121 (n_eval_factor -> .)
    COMMA           reduce using rule 121 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 121 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 90

state 60

    (99) factor -> NOT . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    factor_aux                     shift and go to state 91
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 61

    (100) factor -> factor_aux .

    TIMES           reduce using rule 100 (factor -> factor_aux .)
    DIVIDE          reduce using rule 100 (factor -> factor_aux .)
    PLUS            reduce using rule 100 (factor -> factor_aux .)
    MINUS           reduce using rule 100 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 100 (factor -> factor_aux .)
    EQUALS          reduce using rule 100 (factor -> factor_aux .)
    GREATER         reduce using rule 100 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 100 (factor -> factor_aux .)
    LESS            reduce using rule 100 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 100 (factor -> factor_aux .)
    OR              reduce using rule 100 (factor -> factor_aux .)
    AND             reduce using rule 100 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 100 (factor -> factor_aux .)
    R_PARENS        reduce using rule 100 (factor -> factor_aux .)
    COMMA           reduce using rule 100 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 100 (factor -> factor_aux .)


state 62

    (101) factor_aux -> L_PARENS . expression R_PARENS
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 92
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 63

    (102) factor_aux -> PLUS . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    const                          shift and go to state 93
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 64

    (104) factor_aux -> const .

    TIMES           reduce using rule 104 (factor_aux -> const .)
    DIVIDE          reduce using rule 104 (factor_aux -> const .)
    PLUS            reduce using rule 104 (factor_aux -> const .)
    MINUS           reduce using rule 104 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 104 (factor_aux -> const .)
    EQUALS          reduce using rule 104 (factor_aux -> const .)
    GREATER         reduce using rule 104 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 104 (factor_aux -> const .)
    LESS            reduce using rule 104 (factor_aux -> const .)
    LESS_EQ         reduce using rule 104 (factor_aux -> const .)
    OR              reduce using rule 104 (factor_aux -> const .)
    AND             reduce using rule 104 (factor_aux -> const .)
    SEMICOLON       reduce using rule 104 (factor_aux -> const .)
    R_PARENS        reduce using rule 104 (factor_aux -> const .)
    COMMA           reduce using rule 104 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 104 (factor_aux -> const .)


state 65

    (103) factor_aux -> MINUS . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    const                          shift and go to state 94
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 66

    (105) const -> ID . n_add_operand
    (52) function_call -> ID . params_pass
    (111) array_access -> ID . array_index
    (123) n_add_operand -> .
    (71) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (72) params_pass -> . L_PARENS expression R_PARENS
    (73) params_pass -> . L_PARENS R_PARENS
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 123 (n_add_operand -> .)
    DIVIDE          reduce using rule 123 (n_add_operand -> .)
    PLUS            reduce using rule 123 (n_add_operand -> .)
    MINUS           reduce using rule 123 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 123 (n_add_operand -> .)
    EQUALS          reduce using rule 123 (n_add_operand -> .)
    GREATER         reduce using rule 123 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 123 (n_add_operand -> .)
    LESS            reduce using rule 123 (n_add_operand -> .)
    LESS_EQ         reduce using rule 123 (n_add_operand -> .)
    OR              reduce using rule 123 (n_add_operand -> .)
    AND             reduce using rule 123 (n_add_operand -> .)
    SEMICOLON       reduce using rule 123 (n_add_operand -> .)
    R_PARENS        reduce using rule 123 (n_add_operand -> .)
    COMMA           reduce using rule 123 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 123 (n_add_operand -> .)
    L_PARENS        shift and go to state 48
    L_SQUARE_BRACKET shift and go to state 83

    n_add_operand                  shift and go to state 95
    params_pass                    shift and go to state 47
    array_index                    shift and go to state 96

state 67

    (106) const -> CONST_I . n_add_operand
    (123) n_add_operand -> .

    TIMES           reduce using rule 123 (n_add_operand -> .)
    DIVIDE          reduce using rule 123 (n_add_operand -> .)
    PLUS            reduce using rule 123 (n_add_operand -> .)
    MINUS           reduce using rule 123 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 123 (n_add_operand -> .)
    EQUALS          reduce using rule 123 (n_add_operand -> .)
    GREATER         reduce using rule 123 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 123 (n_add_operand -> .)
    LESS            reduce using rule 123 (n_add_operand -> .)
    LESS_EQ         reduce using rule 123 (n_add_operand -> .)
    OR              reduce using rule 123 (n_add_operand -> .)
    AND             reduce using rule 123 (n_add_operand -> .)
    SEMICOLON       reduce using rule 123 (n_add_operand -> .)
    R_PARENS        reduce using rule 123 (n_add_operand -> .)
    COMMA           reduce using rule 123 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 123 (n_add_operand -> .)

    n_add_operand                  shift and go to state 97

state 68

    (107) const -> CONST_F . n_add_operand
    (123) n_add_operand -> .

    TIMES           reduce using rule 123 (n_add_operand -> .)
    DIVIDE          reduce using rule 123 (n_add_operand -> .)
    PLUS            reduce using rule 123 (n_add_operand -> .)
    MINUS           reduce using rule 123 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 123 (n_add_operand -> .)
    EQUALS          reduce using rule 123 (n_add_operand -> .)
    GREATER         reduce using rule 123 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 123 (n_add_operand -> .)
    LESS            reduce using rule 123 (n_add_operand -> .)
    LESS_EQ         reduce using rule 123 (n_add_operand -> .)
    OR              reduce using rule 123 (n_add_operand -> .)
    AND             reduce using rule 123 (n_add_operand -> .)
    SEMICOLON       reduce using rule 123 (n_add_operand -> .)
    R_PARENS        reduce using rule 123 (n_add_operand -> .)
    COMMA           reduce using rule 123 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 123 (n_add_operand -> .)

    n_add_operand                  shift and go to state 98

state 69

    (108) const -> CONST_STRING . n_add_operand
    (123) n_add_operand -> .

    TIMES           reduce using rule 123 (n_add_operand -> .)
    DIVIDE          reduce using rule 123 (n_add_operand -> .)
    PLUS            reduce using rule 123 (n_add_operand -> .)
    MINUS           reduce using rule 123 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 123 (n_add_operand -> .)
    EQUALS          reduce using rule 123 (n_add_operand -> .)
    GREATER         reduce using rule 123 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 123 (n_add_operand -> .)
    LESS            reduce using rule 123 (n_add_operand -> .)
    LESS_EQ         reduce using rule 123 (n_add_operand -> .)
    OR              reduce using rule 123 (n_add_operand -> .)
    AND             reduce using rule 123 (n_add_operand -> .)
    SEMICOLON       reduce using rule 123 (n_add_operand -> .)
    R_PARENS        reduce using rule 123 (n_add_operand -> .)
    COMMA           reduce using rule 123 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 123 (n_add_operand -> .)

    n_add_operand                  shift and go to state 99

state 70

    (109) const -> function_call .

    TIMES           reduce using rule 109 (const -> function_call .)
    DIVIDE          reduce using rule 109 (const -> function_call .)
    PLUS            reduce using rule 109 (const -> function_call .)
    MINUS           reduce using rule 109 (const -> function_call .)
    NOT_EQUAL       reduce using rule 109 (const -> function_call .)
    EQUALS          reduce using rule 109 (const -> function_call .)
    GREATER         reduce using rule 109 (const -> function_call .)
    GREATER_EQ      reduce using rule 109 (const -> function_call .)
    LESS            reduce using rule 109 (const -> function_call .)
    LESS_EQ         reduce using rule 109 (const -> function_call .)
    OR              reduce using rule 109 (const -> function_call .)
    AND             reduce using rule 109 (const -> function_call .)
    SEMICOLON       reduce using rule 109 (const -> function_call .)
    R_PARENS        reduce using rule 109 (const -> function_call .)
    COMMA           reduce using rule 109 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 109 (const -> function_call .)


state 71

    (110) const -> array_access .

    TIMES           reduce using rule 110 (const -> array_access .)
    DIVIDE          reduce using rule 110 (const -> array_access .)
    PLUS            reduce using rule 110 (const -> array_access .)
    MINUS           reduce using rule 110 (const -> array_access .)
    NOT_EQUAL       reduce using rule 110 (const -> array_access .)
    EQUALS          reduce using rule 110 (const -> array_access .)
    GREATER         reduce using rule 110 (const -> array_access .)
    GREATER_EQ      reduce using rule 110 (const -> array_access .)
    LESS            reduce using rule 110 (const -> array_access .)
    LESS_EQ         reduce using rule 110 (const -> array_access .)
    OR              reduce using rule 110 (const -> array_access .)
    AND             reduce using rule 110 (const -> array_access .)
    SEMICOLON       reduce using rule 110 (const -> array_access .)
    R_PARENS        reduce using rule 110 (const -> array_access .)
    COMMA           reduce using rule 110 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 110 (const -> array_access .)


state 72

    (62) print -> PRINT L_PARENS . print_aux R_PARENS
    (63) print -> PRINT L_PARENS . R_PARENS
    (64) print_aux -> . CONST_STRING COMMA print_aux
    (65) print_aux -> . CONST_STRING
    (66) print_aux -> . ID COMMA print_aux
    (67) print_aux -> . ID

    R_PARENS        shift and go to state 101
    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 100

state 73

    (54) if -> IF L_PARENS . expression R_PARENS block elif else
    (55) if -> IF L_PARENS . expression R_PARENS block elif
    (56) if -> IF L_PARENS . expression R_PARENS block else
    (57) if -> IF L_PARENS . expression R_PARENS block
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 104
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 74

    (61) while -> WHILE L_PARENS . expression R_PARENS block
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 105
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 75

    (6) main -> FUNCTION MAIN n_start_main function_body n_end_function .

    $end            reduce using rule 6 (main -> FUNCTION MAIN n_start_main function_body n_end_function .)


state 76

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 106


state 77

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 107


state 78

    (15) function_params -> type . ID n_add_var array_index COMMA function_params
    (16) function_params -> type . ID n_add_var array_index
    (17) function_params -> type . ID n_add_var COMMA function_params
    (18) function_params -> type . ID n_add_var

    ID              shift and go to state 108


state 79

    (9) function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .)


state 80

    (23) var -> type_aux ID n_add_var . array_dim var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var . array_dim SEMICOLON
    (25) var -> type_aux ID n_add_var . var_aux SEMICOLON
    (26) var -> type_aux ID n_add_var . SEMICOLON
    (46) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 111
    L_SQUARE_BRACKET shift and go to state 112
    COMMA           shift and go to state 113

    array_dim                      shift and go to state 109
    var_aux                        shift and go to state 110

state 81

    (48) assignment -> ID n_add_operand array_index . ASSIGN n_make_assignment expression
    (49) assignment -> ID n_add_operand array_index . ASSIGN n_make_assignment read

    ASSIGN          shift and go to state 114


state 82

    (50) assignment -> ID n_add_operand ASSIGN . n_make_assignment expression
    (51) assignment -> ID n_add_operand ASSIGN . n_make_assignment read
    (125) n_make_assignment -> .

    READ            reduce using rule 125 (n_make_assignment -> .)
    NOT             reduce using rule 125 (n_make_assignment -> .)
    L_PARENS        reduce using rule 125 (n_make_assignment -> .)
    PLUS            reduce using rule 125 (n_make_assignment -> .)
    MINUS           reduce using rule 125 (n_make_assignment -> .)
    ID              reduce using rule 125 (n_make_assignment -> .)
    CONST_I         reduce using rule 125 (n_make_assignment -> .)
    CONST_F         reduce using rule 125 (n_make_assignment -> .)
    CONST_STRING    reduce using rule 125 (n_make_assignment -> .)

    n_make_assignment              shift and go to state 115

state 83

    (44) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 116
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 84

    (71) params_pass -> L_PARENS expression . params_pass_aux R_PARENS
    (72) params_pass -> L_PARENS expression . R_PARENS
    (74) params_pass_aux -> . COMMA expression params_pass_aux
    (75) params_pass_aux -> . COMMA expression

    R_PARENS        shift and go to state 118
    COMMA           shift and go to state 119

    params_pass_aux                shift and go to state 117

state 85

    (73) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 73 (params_pass -> L_PARENS R_PARENS .)


state 86

    (68) expression -> exp n_eval_exp . AND n_add_operator expression
    (69) expression -> exp n_eval_exp .

    AND             shift and go to state 120
    SEMICOLON       reduce using rule 69 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 69 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 69 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 69 (expression -> exp n_eval_exp .)


state 87

    (77) exp -> xp n_eval_xp . OR n_add_operator exp
    (78) exp -> xp n_eval_xp .

    OR              shift and go to state 121
    AND             reduce using rule 78 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 78 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 78 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 78 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 78 (exp -> xp n_eval_xp .)


state 88

    (79) xp -> x n_eval_x . log_op n_add_operator x
    (80) xp -> x n_eval_x .
    (87) log_op -> . NOT_EQUAL
    (88) log_op -> . EQUALS
    (89) log_op -> . GREATER
    (90) log_op -> . GREATER_EQ
    (91) log_op -> . LESS
    (92) log_op -> . LESS_EQ

    OR              reduce using rule 80 (xp -> x n_eval_x .)
    AND             reduce using rule 80 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 80 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 80 (xp -> x n_eval_x .)
    COMMA           reduce using rule 80 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 80 (xp -> x n_eval_x .)
    NOT_EQUAL       shift and go to state 123
    EQUALS          shift and go to state 124
    GREATER         shift and go to state 125
    GREATER_EQ      shift and go to state 126
    LESS            shift and go to state 127
    LESS_EQ         shift and go to state 128

    log_op                         shift and go to state 122

state 89

    (81) x -> term n_eval_term . x_aux
    (82) x -> term n_eval_term .
    (83) x_aux -> . PLUS n_add_operator term x_aux
    (84) x_aux -> . PLUS n_add_operator term
    (85) x_aux -> . MINUS n_add_operator term x_aux
    (86) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 82 (x -> term n_eval_term .)
    EQUALS          reduce using rule 82 (x -> term n_eval_term .)
    GREATER         reduce using rule 82 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 82 (x -> term n_eval_term .)
    LESS            reduce using rule 82 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 82 (x -> term n_eval_term .)
    OR              reduce using rule 82 (x -> term n_eval_term .)
    AND             reduce using rule 82 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 82 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 82 (x -> term n_eval_term .)
    COMMA           reduce using rule 82 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 82 (x -> term n_eval_term .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    x_aux                          shift and go to state 129

state 90

    (93) term -> factor n_eval_factor . term_aux
    (94) term -> factor n_eval_factor .
    (95) term_aux -> . TIMES n_add_operator factor term_aux
    (96) term_aux -> . TIMES n_add_operator factor
    (97) term_aux -> . DIVIDE n_add_operator factor term_aux
    (98) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 94 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 94 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 94 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 94 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 94 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 94 (term -> factor n_eval_factor .)
    LESS            reduce using rule 94 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 94 (term -> factor n_eval_factor .)
    OR              reduce using rule 94 (term -> factor n_eval_factor .)
    AND             reduce using rule 94 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 94 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 94 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 94 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 94 (term -> factor n_eval_factor .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    term_aux                       shift and go to state 132

state 91

    (99) factor -> NOT factor_aux .

    TIMES           reduce using rule 99 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 99 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 99 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 99 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 99 (factor -> NOT factor_aux .)
    EQUALS          reduce using rule 99 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 99 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 99 (factor -> NOT factor_aux .)
    LESS            reduce using rule 99 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 99 (factor -> NOT factor_aux .)
    OR              reduce using rule 99 (factor -> NOT factor_aux .)
    AND             reduce using rule 99 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 99 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 99 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 99 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 99 (factor -> NOT factor_aux .)


state 92

    (101) factor_aux -> L_PARENS expression . R_PARENS

    R_PARENS        shift and go to state 135


state 93

    (102) factor_aux -> PLUS const .

    TIMES           reduce using rule 102 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 102 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 102 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 102 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 102 (factor_aux -> PLUS const .)
    EQUALS          reduce using rule 102 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 102 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 102 (factor_aux -> PLUS const .)
    LESS            reduce using rule 102 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 102 (factor_aux -> PLUS const .)
    OR              reduce using rule 102 (factor_aux -> PLUS const .)
    AND             reduce using rule 102 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 102 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 102 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 102 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 102 (factor_aux -> PLUS const .)


state 94

    (103) factor_aux -> MINUS const .

    TIMES           reduce using rule 103 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 103 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 103 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 103 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 103 (factor_aux -> MINUS const .)
    EQUALS          reduce using rule 103 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 103 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 103 (factor_aux -> MINUS const .)
    LESS            reduce using rule 103 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 103 (factor_aux -> MINUS const .)
    OR              reduce using rule 103 (factor_aux -> MINUS const .)
    AND             reduce using rule 103 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 103 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 103 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 103 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 103 (factor_aux -> MINUS const .)


state 95

    (105) const -> ID n_add_operand .

    TIMES           reduce using rule 105 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 105 (const -> ID n_add_operand .)
    PLUS            reduce using rule 105 (const -> ID n_add_operand .)
    MINUS           reduce using rule 105 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 105 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 105 (const -> ID n_add_operand .)
    GREATER         reduce using rule 105 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 105 (const -> ID n_add_operand .)
    LESS            reduce using rule 105 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 105 (const -> ID n_add_operand .)
    OR              reduce using rule 105 (const -> ID n_add_operand .)
    AND             reduce using rule 105 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 105 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 105 (const -> ID n_add_operand .)
    COMMA           reduce using rule 105 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 105 (const -> ID n_add_operand .)


state 96

    (111) array_access -> ID array_index .

    TIMES           reduce using rule 111 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 111 (array_access -> ID array_index .)
    PLUS            reduce using rule 111 (array_access -> ID array_index .)
    MINUS           reduce using rule 111 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 111 (array_access -> ID array_index .)
    EQUALS          reduce using rule 111 (array_access -> ID array_index .)
    GREATER         reduce using rule 111 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 111 (array_access -> ID array_index .)
    LESS            reduce using rule 111 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 111 (array_access -> ID array_index .)
    OR              reduce using rule 111 (array_access -> ID array_index .)
    AND             reduce using rule 111 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 111 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 111 (array_access -> ID array_index .)
    COMMA           reduce using rule 111 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 111 (array_access -> ID array_index .)


state 97

    (106) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 106 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 106 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 106 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 106 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 106 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 106 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 106 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 106 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 106 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 106 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 106 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 106 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 106 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 106 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 106 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 106 (const -> CONST_I n_add_operand .)


state 98

    (107) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 107 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 107 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 107 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 107 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 107 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 107 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 107 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 107 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 107 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 107 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 107 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 107 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 107 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 107 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 107 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 107 (const -> CONST_F n_add_operand .)


state 99

    (108) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 108 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 108 (const -> CONST_STRING n_add_operand .)


state 100

    (62) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 136


state 101

    (63) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 63 (print -> PRINT L_PARENS R_PARENS .)


state 102

    (64) print_aux -> CONST_STRING . COMMA print_aux
    (65) print_aux -> CONST_STRING .

    COMMA           shift and go to state 137
    R_PARENS        reduce using rule 65 (print_aux -> CONST_STRING .)


state 103

    (66) print_aux -> ID . COMMA print_aux
    (67) print_aux -> ID .

    COMMA           shift and go to state 138
    R_PARENS        reduce using rule 67 (print_aux -> ID .)


state 104

    (54) if -> IF L_PARENS expression . R_PARENS block elif else
    (55) if -> IF L_PARENS expression . R_PARENS block elif
    (56) if -> IF L_PARENS expression . R_PARENS block else
    (57) if -> IF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 139


state 105

    (61) while -> WHILE L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 140


state 106

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 141


state 107

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 143
    FLOAT           shift and go to state 144
    STRING          shift and go to state 145
    VOID            shift and go to state 146

    function_type                  shift and go to state 142

state 108

    (15) function_params -> type ID . n_add_var array_index COMMA function_params
    (16) function_params -> type ID . n_add_var array_index
    (17) function_params -> type ID . n_add_var COMMA function_params
    (18) function_params -> type ID . n_add_var
    (116) n_add_var -> .

    COMMA           reduce using rule 116 (n_add_var -> .)
    L_SQUARE_BRACKET reduce using rule 116 (n_add_var -> .)
    R_PARENS        reduce using rule 116 (n_add_var -> .)

    n_add_var                      shift and go to state 147

state 109

    (23) var -> type_aux ID n_add_var array_dim . var_aux SEMICOLON
    (24) var -> type_aux ID n_add_var array_dim . SEMICOLON
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       shift and go to state 149
    COMMA           shift and go to state 113

    var_aux                        shift and go to state 148

state 110

    (25) var -> type_aux ID n_add_var var_aux . SEMICOLON

    SEMICOLON       shift and go to state 150


state 111

    (26) var -> type_aux ID n_add_var SEMICOLON .

    GLOBAL          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    INT             reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    FLOAT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    STRING          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    ID              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    RETURN          reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    PRINT           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    IF              reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)
    WHILE           reduce using rule 26 (var -> type_aux ID n_add_var SEMICOLON .)


state 112

    (46) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 151


state 113

    (29) var_aux -> COMMA . ID n_add_var array_dim var_aux
    (30) var_aux -> COMMA . ID n_add_var array_dim
    (31) var_aux -> COMMA . ID n_add_var var_aux
    (32) var_aux -> COMMA . ID n_add_var

    ID              shift and go to state 152


state 114

    (48) assignment -> ID n_add_operand array_index ASSIGN . n_make_assignment expression
    (49) assignment -> ID n_add_operand array_index ASSIGN . n_make_assignment read
    (125) n_make_assignment -> .

    READ            reduce using rule 125 (n_make_assignment -> .)
    NOT             reduce using rule 125 (n_make_assignment -> .)
    L_PARENS        reduce using rule 125 (n_make_assignment -> .)
    PLUS            reduce using rule 125 (n_make_assignment -> .)
    MINUS           reduce using rule 125 (n_make_assignment -> .)
    ID              reduce using rule 125 (n_make_assignment -> .)
    CONST_I         reduce using rule 125 (n_make_assignment -> .)
    CONST_F         reduce using rule 125 (n_make_assignment -> .)
    CONST_STRING    reduce using rule 125 (n_make_assignment -> .)

    n_make_assignment              shift and go to state 153

state 115

    (50) assignment -> ID n_add_operand ASSIGN n_make_assignment . expression
    (51) assignment -> ID n_add_operand ASSIGN n_make_assignment . read
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (70) read -> . READ ID
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    READ            shift and go to state 156
    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 154
    read                           shift and go to state 155
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 116

    (44) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 157


state 117

    (71) params_pass -> L_PARENS expression params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 158


state 118

    (72) params_pass -> L_PARENS expression R_PARENS .

    SEMICOLON       reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    TIMES           reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    EQUALS          reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 72 (params_pass -> L_PARENS expression R_PARENS .)


state 119

    (74) params_pass_aux -> COMMA . expression params_pass_aux
    (75) params_pass_aux -> COMMA . expression
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 159
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 120

    (68) expression -> exp n_eval_exp AND . n_add_operator expression
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 160

state 121

    (77) exp -> xp n_eval_xp OR . n_add_operator exp
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 161

state 122

    (79) xp -> x n_eval_x log_op . n_add_operator x
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 162

state 123

    (87) log_op -> NOT_EQUAL .

    NOT             reduce using rule 87 (log_op -> NOT_EQUAL .)
    L_PARENS        reduce using rule 87 (log_op -> NOT_EQUAL .)
    PLUS            reduce using rule 87 (log_op -> NOT_EQUAL .)
    MINUS           reduce using rule 87 (log_op -> NOT_EQUAL .)
    ID              reduce using rule 87 (log_op -> NOT_EQUAL .)
    CONST_I         reduce using rule 87 (log_op -> NOT_EQUAL .)
    CONST_F         reduce using rule 87 (log_op -> NOT_EQUAL .)
    CONST_STRING    reduce using rule 87 (log_op -> NOT_EQUAL .)


state 124

    (88) log_op -> EQUALS .

    NOT             reduce using rule 88 (log_op -> EQUALS .)
    L_PARENS        reduce using rule 88 (log_op -> EQUALS .)
    PLUS            reduce using rule 88 (log_op -> EQUALS .)
    MINUS           reduce using rule 88 (log_op -> EQUALS .)
    ID              reduce using rule 88 (log_op -> EQUALS .)
    CONST_I         reduce using rule 88 (log_op -> EQUALS .)
    CONST_F         reduce using rule 88 (log_op -> EQUALS .)
    CONST_STRING    reduce using rule 88 (log_op -> EQUALS .)


state 125

    (89) log_op -> GREATER .

    NOT             reduce using rule 89 (log_op -> GREATER .)
    L_PARENS        reduce using rule 89 (log_op -> GREATER .)
    PLUS            reduce using rule 89 (log_op -> GREATER .)
    MINUS           reduce using rule 89 (log_op -> GREATER .)
    ID              reduce using rule 89 (log_op -> GREATER .)
    CONST_I         reduce using rule 89 (log_op -> GREATER .)
    CONST_F         reduce using rule 89 (log_op -> GREATER .)
    CONST_STRING    reduce using rule 89 (log_op -> GREATER .)


state 126

    (90) log_op -> GREATER_EQ .

    NOT             reduce using rule 90 (log_op -> GREATER_EQ .)
    L_PARENS        reduce using rule 90 (log_op -> GREATER_EQ .)
    PLUS            reduce using rule 90 (log_op -> GREATER_EQ .)
    MINUS           reduce using rule 90 (log_op -> GREATER_EQ .)
    ID              reduce using rule 90 (log_op -> GREATER_EQ .)
    CONST_I         reduce using rule 90 (log_op -> GREATER_EQ .)
    CONST_F         reduce using rule 90 (log_op -> GREATER_EQ .)
    CONST_STRING    reduce using rule 90 (log_op -> GREATER_EQ .)


state 127

    (91) log_op -> LESS .

    NOT             reduce using rule 91 (log_op -> LESS .)
    L_PARENS        reduce using rule 91 (log_op -> LESS .)
    PLUS            reduce using rule 91 (log_op -> LESS .)
    MINUS           reduce using rule 91 (log_op -> LESS .)
    ID              reduce using rule 91 (log_op -> LESS .)
    CONST_I         reduce using rule 91 (log_op -> LESS .)
    CONST_F         reduce using rule 91 (log_op -> LESS .)
    CONST_STRING    reduce using rule 91 (log_op -> LESS .)


state 128

    (92) log_op -> LESS_EQ .

    NOT             reduce using rule 92 (log_op -> LESS_EQ .)
    L_PARENS        reduce using rule 92 (log_op -> LESS_EQ .)
    PLUS            reduce using rule 92 (log_op -> LESS_EQ .)
    MINUS           reduce using rule 92 (log_op -> LESS_EQ .)
    ID              reduce using rule 92 (log_op -> LESS_EQ .)
    CONST_I         reduce using rule 92 (log_op -> LESS_EQ .)
    CONST_F         reduce using rule 92 (log_op -> LESS_EQ .)
    CONST_STRING    reduce using rule 92 (log_op -> LESS_EQ .)


state 129

    (81) x -> term n_eval_term x_aux .

    NOT_EQUAL       reduce using rule 81 (x -> term n_eval_term x_aux .)
    EQUALS          reduce using rule 81 (x -> term n_eval_term x_aux .)
    GREATER         reduce using rule 81 (x -> term n_eval_term x_aux .)
    GREATER_EQ      reduce using rule 81 (x -> term n_eval_term x_aux .)
    LESS            reduce using rule 81 (x -> term n_eval_term x_aux .)
    LESS_EQ         reduce using rule 81 (x -> term n_eval_term x_aux .)
    OR              reduce using rule 81 (x -> term n_eval_term x_aux .)
    AND             reduce using rule 81 (x -> term n_eval_term x_aux .)
    SEMICOLON       reduce using rule 81 (x -> term n_eval_term x_aux .)
    R_PARENS        reduce using rule 81 (x -> term n_eval_term x_aux .)
    COMMA           reduce using rule 81 (x -> term n_eval_term x_aux .)
    R_SQUARE_BRACKET reduce using rule 81 (x -> term n_eval_term x_aux .)


state 130

    (83) x_aux -> PLUS . n_add_operator term x_aux
    (84) x_aux -> PLUS . n_add_operator term
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 163

state 131

    (85) x_aux -> MINUS . n_add_operator term x_aux
    (86) x_aux -> MINUS . n_add_operator term
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 164

state 132

    (93) term -> factor n_eval_factor term_aux .

    PLUS            reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    MINUS           reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    NOT_EQUAL       reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    EQUALS          reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    GREATER         reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    GREATER_EQ      reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    LESS            reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    LESS_EQ         reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    OR              reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    AND             reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    SEMICOLON       reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    R_PARENS        reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    COMMA           reduce using rule 93 (term -> factor n_eval_factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 93 (term -> factor n_eval_factor term_aux .)


state 133

    (95) term_aux -> TIMES . n_add_operator factor term_aux
    (96) term_aux -> TIMES . n_add_operator factor
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 165

state 134

    (97) term_aux -> DIVIDE . n_add_operator factor term_aux
    (98) term_aux -> DIVIDE . n_add_operator factor
    (124) n_add_operator -> .

    NOT             reduce using rule 124 (n_add_operator -> .)
    L_PARENS        reduce using rule 124 (n_add_operator -> .)
    PLUS            reduce using rule 124 (n_add_operator -> .)
    MINUS           reduce using rule 124 (n_add_operator -> .)
    ID              reduce using rule 124 (n_add_operator -> .)
    CONST_I         reduce using rule 124 (n_add_operator -> .)
    CONST_F         reduce using rule 124 (n_add_operator -> .)
    CONST_STRING    reduce using rule 124 (n_add_operator -> .)

    n_add_operator                 shift and go to state 166

state 135

    (101) factor_aux -> L_PARENS expression R_PARENS .

    TIMES           reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    EQUALS          reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    SEMICOLON       reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 101 (factor_aux -> L_PARENS expression R_PARENS .)


state 136

    (62) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 62 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 137

    (64) print_aux -> CONST_STRING COMMA . print_aux
    (64) print_aux -> . CONST_STRING COMMA print_aux
    (65) print_aux -> . CONST_STRING
    (66) print_aux -> . ID COMMA print_aux
    (67) print_aux -> . ID

    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 167

state 138

    (66) print_aux -> ID COMMA . print_aux
    (64) print_aux -> . CONST_STRING COMMA print_aux
    (65) print_aux -> . CONST_STRING
    (66) print_aux -> . ID COMMA print_aux
    (67) print_aux -> . ID

    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 168

state 139

    (54) if -> IF L_PARENS expression R_PARENS . block elif else
    (55) if -> IF L_PARENS expression R_PARENS . block elif
    (56) if -> IF L_PARENS expression R_PARENS . block else
    (57) if -> IF L_PARENS expression R_PARENS . block
    (76) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 170

    block                          shift and go to state 169

state 140

    (61) while -> WHILE L_PARENS expression R_PARENS . block
    (76) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 170

    block                          shift and go to state 171

state 141

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . INT n_add_function_type
    (20) function_type -> . FLOAT n_add_function_type
    (21) function_type -> . STRING n_add_function_type
    (22) function_type -> . VOID n_add_function_type

    INT             shift and go to state 143
    FLOAT           shift and go to state 144
    STRING          shift and go to state 145
    VOID            shift and go to state 146

    function_type                  shift and go to state 172

state 142

    (8) function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type .)


state 143

    (19) function_type -> INT . n_add_function_type
    (114) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 114 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 173

state 144

    (20) function_type -> FLOAT . n_add_function_type
    (114) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 114 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 174

state 145

    (21) function_type -> STRING . n_add_function_type
    (114) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 114 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 175

state 146

    (22) function_type -> VOID . n_add_function_type
    (114) n_add_function_type -> .

    L_KEY_BRACKET   reduce using rule 114 (n_add_function_type -> .)

    n_add_function_type            shift and go to state 176

state 147

    (15) function_params -> type ID n_add_var . array_index COMMA function_params
    (16) function_params -> type ID n_add_var . array_index
    (17) function_params -> type ID n_add_var . COMMA function_params
    (18) function_params -> type ID n_add_var .
    (44) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 178
    R_PARENS        reduce using rule 18 (function_params -> type ID n_add_var .)
    L_SQUARE_BRACKET shift and go to state 83

    array_index                    shift and go to state 177

state 148

    (23) var -> type_aux ID n_add_var array_dim var_aux . SEMICOLON

    SEMICOLON       shift and go to state 179


state 149

    (24) var -> type_aux ID n_add_var array_dim SEMICOLON .

    GLOBAL          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    INT             reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    FLOAT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    STRING          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    ID              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    PRINT           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    IF              reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type_aux ID n_add_var array_dim SEMICOLON .)


state 150

    (25) var -> type_aux ID n_add_var var_aux SEMICOLON .

    GLOBAL          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    INT             reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    FLOAT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    STRING          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    ID              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    RETURN          reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    PRINT           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    IF              reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)
    WHILE           reduce using rule 25 (var -> type_aux ID n_add_var var_aux SEMICOLON .)


state 151

    (46) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 180


state 152

    (29) var_aux -> COMMA ID . n_add_var array_dim var_aux
    (30) var_aux -> COMMA ID . n_add_var array_dim
    (31) var_aux -> COMMA ID . n_add_var var_aux
    (32) var_aux -> COMMA ID . n_add_var
    (116) n_add_var -> .

    L_SQUARE_BRACKET reduce using rule 116 (n_add_var -> .)
    COMMA           reduce using rule 116 (n_add_var -> .)
    SEMICOLON       reduce using rule 116 (n_add_var -> .)

    n_add_var                      shift and go to state 181

state 153

    (48) assignment -> ID n_add_operand array_index ASSIGN n_make_assignment . expression
    (49) assignment -> ID n_add_operand array_index ASSIGN n_make_assignment . read
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (70) read -> . READ ID
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    READ            shift and go to state 156
    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 182
    read                           shift and go to state 183
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 154

    (50) assignment -> ID n_add_operand ASSIGN n_make_assignment expression .

    SEMICOLON       reduce using rule 50 (assignment -> ID n_add_operand ASSIGN n_make_assignment expression .)


state 155

    (51) assignment -> ID n_add_operand ASSIGN n_make_assignment read .

    SEMICOLON       reduce using rule 51 (assignment -> ID n_add_operand ASSIGN n_make_assignment read .)


state 156

    (70) read -> READ . ID

    ID              shift and go to state 184


state 157

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (45) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 185
    ASSIGN          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 45 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 158

    (71) params_pass -> L_PARENS expression params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    TIMES           reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    PLUS            reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    MINUS           reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER         reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS            reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    OR              reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    AND             reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    COMMA           reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 71 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)


state 159

    (74) params_pass_aux -> COMMA expression . params_pass_aux
    (75) params_pass_aux -> COMMA expression .
    (74) params_pass_aux -> . COMMA expression params_pass_aux
    (75) params_pass_aux -> . COMMA expression

    R_PARENS        reduce using rule 75 (params_pass_aux -> COMMA expression .)
    COMMA           shift and go to state 119

    params_pass_aux                shift and go to state 186

state 160

    (68) expression -> exp n_eval_exp AND n_add_operator . expression
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    exp                            shift and go to state 55
    expression                     shift and go to state 187
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 161

    (77) exp -> xp n_eval_xp OR n_add_operator . exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    xp                             shift and go to state 56
    exp                            shift and go to state 188
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 162

    (79) xp -> x n_eval_x log_op n_add_operator . x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    x                              shift and go to state 189
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 163

    (83) x_aux -> PLUS n_add_operator . term x_aux
    (84) x_aux -> PLUS n_add_operator . term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    term                           shift and go to state 190
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 164

    (85) x_aux -> MINUS n_add_operator . term x_aux
    (86) x_aux -> MINUS n_add_operator . term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    term                           shift and go to state 191
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 165

    (95) term_aux -> TIMES n_add_operator . factor term_aux
    (96) term_aux -> TIMES n_add_operator . factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    factor                         shift and go to state 192
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 166

    (97) term_aux -> DIVIDE n_add_operator . factor term_aux
    (98) term_aux -> DIVIDE n_add_operator . factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    factor                         shift and go to state 193
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 167

    (64) print_aux -> CONST_STRING COMMA print_aux .

    R_PARENS        reduce using rule 64 (print_aux -> CONST_STRING COMMA print_aux .)


state 168

    (66) print_aux -> ID COMMA print_aux .

    R_PARENS        reduce using rule 66 (print_aux -> ID COMMA print_aux .)


state 169

    (54) if -> IF L_PARENS expression R_PARENS block . elif else
    (55) if -> IF L_PARENS expression R_PARENS block . elif
    (56) if -> IF L_PARENS expression R_PARENS block . else
    (57) if -> IF L_PARENS expression R_PARENS block .
    (58) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (59) elif -> . ELIF L_PARENS expression R_PARENS block
    (60) else -> . ELSE block

    ID              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 57 (if -> IF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 196
    ELSE            shift and go to state 197

    elif                           shift and go to state 194
    else                           shift and go to state 195

state 170

    (76) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (33) statement -> . statement_aux SEMICOLON
    (34) statement -> . statement_aux_2
    (35) statement_aux -> . assignment
    (36) statement_aux -> . function_call
    (37) statement_aux -> . return
    (38) statement_aux -> . print
    (39) statement_aux_2 -> . if
    (40) statement_aux_2 -> . while
    (48) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment expression
    (49) assignment -> . ID n_add_operand array_index ASSIGN n_make_assignment read
    (50) assignment -> . ID n_add_operand ASSIGN n_make_assignment expression
    (51) assignment -> . ID n_add_operand ASSIGN n_make_assignment read
    (52) function_call -> . ID params_pass
    (53) return -> . RETURN expression
    (62) print -> . PRINT L_PARENS print_aux R_PARENS
    (63) print -> . PRINT L_PARENS R_PARENS
    (54) if -> . IF L_PARENS expression R_PARENS block elif else
    (55) if -> . IF L_PARENS expression R_PARENS block elif
    (56) if -> . IF L_PARENS expression R_PARENS block else
    (57) if -> . IF L_PARENS expression R_PARENS block
    (61) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 21
    RETURN          shift and go to state 35
    PRINT           shift and go to state 36
    IF              shift and go to state 37
    WHILE           shift and go to state 38

    statements                     shift and go to state 198
    statement                      shift and go to state 19
    statement_aux                  shift and go to state 22
    statement_aux_2                shift and go to state 23
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 171

    (61) while -> WHILE L_PARENS expression R_PARENS block .

    ID              reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)
    IF              reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 61 (while -> WHILE L_PARENS expression R_PARENS block .)


state 172

    (7) function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type .)


state 173

    (19) function_type -> INT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> INT n_add_function_type .)


state 174

    (20) function_type -> FLOAT n_add_function_type .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> FLOAT n_add_function_type .)


state 175

    (21) function_type -> STRING n_add_function_type .

    L_KEY_BRACKET   reduce using rule 21 (function_type -> STRING n_add_function_type .)


state 176

    (22) function_type -> VOID n_add_function_type .

    L_KEY_BRACKET   reduce using rule 22 (function_type -> VOID n_add_function_type .)


state 177

    (15) function_params -> type ID n_add_var array_index . COMMA function_params
    (16) function_params -> type ID n_add_var array_index .

    COMMA           shift and go to state 199
    R_PARENS        reduce using rule 16 (function_params -> type ID n_add_var array_index .)


state 178

    (17) function_params -> type ID n_add_var COMMA . function_params
    (15) function_params -> . type ID n_add_var array_index COMMA function_params
    (16) function_params -> . type ID n_add_var array_index
    (17) function_params -> . type ID n_add_var COMMA function_params
    (18) function_params -> . type ID n_add_var
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 78
    function_params                shift and go to state 200

state 179

    (23) var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .

    GLOBAL          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    INT             reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type_aux ID n_add_var array_dim var_aux SEMICOLON .)


state 180

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 201
    SEMICOLON       reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 47 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 181

    (29) var_aux -> COMMA ID n_add_var . array_dim var_aux
    (30) var_aux -> COMMA ID n_add_var . array_dim
    (31) var_aux -> COMMA ID n_add_var . var_aux
    (32) var_aux -> COMMA ID n_add_var .
    (46) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (47) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 32 (var_aux -> COMMA ID n_add_var .)
    L_SQUARE_BRACKET shift and go to state 112
    COMMA           shift and go to state 113

    array_dim                      shift and go to state 202
    var_aux                        shift and go to state 203

state 182

    (48) assignment -> ID n_add_operand array_index ASSIGN n_make_assignment expression .

    SEMICOLON       reduce using rule 48 (assignment -> ID n_add_operand array_index ASSIGN n_make_assignment expression .)


state 183

    (49) assignment -> ID n_add_operand array_index ASSIGN n_make_assignment read .

    SEMICOLON       reduce using rule 49 (assignment -> ID n_add_operand array_index ASSIGN n_make_assignment read .)


state 184

    (70) read -> READ ID .

    SEMICOLON       reduce using rule 70 (read -> READ ID .)


state 185

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 204
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 186

    (74) params_pass_aux -> COMMA expression params_pass_aux .

    R_PARENS        reduce using rule 74 (params_pass_aux -> COMMA expression params_pass_aux .)


state 187

    (68) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 68 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 68 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 68 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 68 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 188

    (77) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 77 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 77 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 77 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 77 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 77 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 189

    (79) xp -> x n_eval_x log_op n_add_operator x .

    OR              reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)
    AND             reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)
    SEMICOLON       reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)
    R_PARENS        reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)
    COMMA           reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 79 (xp -> x n_eval_x log_op n_add_operator x .)


state 190

    (83) x_aux -> PLUS n_add_operator term . x_aux
    (84) x_aux -> PLUS n_add_operator term .
    (83) x_aux -> . PLUS n_add_operator term x_aux
    (84) x_aux -> . PLUS n_add_operator term
    (85) x_aux -> . MINUS n_add_operator term x_aux
    (86) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    EQUALS          reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    GREATER         reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    GREATER_EQ      reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    LESS            reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    LESS_EQ         reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    OR              reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    AND             reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    SEMICOLON       reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    R_PARENS        reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    COMMA           reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 84 (x_aux -> PLUS n_add_operator term .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    x_aux                          shift and go to state 205

state 191

    (85) x_aux -> MINUS n_add_operator term . x_aux
    (86) x_aux -> MINUS n_add_operator term .
    (83) x_aux -> . PLUS n_add_operator term x_aux
    (84) x_aux -> . PLUS n_add_operator term
    (85) x_aux -> . MINUS n_add_operator term x_aux
    (86) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    EQUALS          reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    GREATER         reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    GREATER_EQ      reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    LESS            reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    LESS_EQ         reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    OR              reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    AND             reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    SEMICOLON       reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    R_PARENS        reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    COMMA           reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 86 (x_aux -> MINUS n_add_operator term .)
    PLUS            shift and go to state 130
    MINUS           shift and go to state 131

    x_aux                          shift and go to state 206

state 192

    (95) term_aux -> TIMES n_add_operator factor . term_aux
    (96) term_aux -> TIMES n_add_operator factor .
    (95) term_aux -> . TIMES n_add_operator factor term_aux
    (96) term_aux -> . TIMES n_add_operator factor
    (97) term_aux -> . DIVIDE n_add_operator factor term_aux
    (98) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    MINUS           reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    NOT_EQUAL       reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    EQUALS          reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    GREATER         reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    GREATER_EQ      reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    LESS            reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    LESS_EQ         reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    OR              reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    AND             reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    SEMICOLON       reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    R_PARENS        reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    COMMA           reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    R_SQUARE_BRACKET reduce using rule 96 (term_aux -> TIMES n_add_operator factor .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    term_aux                       shift and go to state 207

state 193

    (97) term_aux -> DIVIDE n_add_operator factor . term_aux
    (98) term_aux -> DIVIDE n_add_operator factor .
    (95) term_aux -> . TIMES n_add_operator factor term_aux
    (96) term_aux -> . TIMES n_add_operator factor
    (97) term_aux -> . DIVIDE n_add_operator factor term_aux
    (98) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    MINUS           reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    NOT_EQUAL       reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    EQUALS          reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    GREATER         reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    GREATER_EQ      reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    LESS            reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    LESS_EQ         reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    OR              reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    AND             reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    SEMICOLON       reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    R_PARENS        reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    COMMA           reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    R_SQUARE_BRACKET reduce using rule 98 (term_aux -> DIVIDE n_add_operator factor .)
    TIMES           shift and go to state 133
    DIVIDE          shift and go to state 134

    term_aux                       shift and go to state 208

state 194

    (54) if -> IF L_PARENS expression R_PARENS block elif . else
    (55) if -> IF L_PARENS expression R_PARENS block elif .
    (60) else -> . ELSE block

    ID              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block elif .)
    ELSE            shift and go to state 197

    else                           shift and go to state 209

state 195

    (56) if -> IF L_PARENS expression R_PARENS block else .

    ID              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)
    RETURN          reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)
    PRINT           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)
    IF              reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)
    WHILE           reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)
    R_KEY_BRACKET   reduce using rule 56 (if -> IF L_PARENS expression R_PARENS block else .)


state 196

    (58) elif -> ELIF . L_PARENS expression R_PARENS block elif
    (59) elif -> ELIF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 210


state 197

    (60) else -> ELSE . block
    (76) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 170

    block                          shift and go to state 211

state 198

    (76) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 212


state 199

    (15) function_params -> type ID n_add_var array_index COMMA . function_params
    (15) function_params -> . type ID n_add_var array_index COMMA function_params
    (16) function_params -> . type ID n_add_var array_index
    (17) function_params -> . type ID n_add_var COMMA function_params
    (18) function_params -> . type ID n_add_var
    (41) type -> . INT n_record_last_type
    (42) type -> . FLOAT n_record_last_type
    (43) type -> . STRING n_record_last_type

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    STRING          shift and go to state 34

    type                           shift and go to state 78
    function_params                shift and go to state 213

state 200

    (17) function_params -> type ID n_add_var COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID n_add_var COMMA function_params .)


state 201

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 214


state 202

    (29) var_aux -> COMMA ID n_add_var array_dim . var_aux
    (30) var_aux -> COMMA ID n_add_var array_dim .
    (29) var_aux -> . COMMA ID n_add_var array_dim var_aux
    (30) var_aux -> . COMMA ID n_add_var array_dim
    (31) var_aux -> . COMMA ID n_add_var var_aux
    (32) var_aux -> . COMMA ID n_add_var

    SEMICOLON       reduce using rule 30 (var_aux -> COMMA ID n_add_var array_dim .)
    COMMA           shift and go to state 113

    var_aux                        shift and go to state 215

state 203

    (31) var_aux -> COMMA ID n_add_var var_aux .

    SEMICOLON       reduce using rule 31 (var_aux -> COMMA ID n_add_var var_aux .)


state 204

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 216


state 205

    (83) x_aux -> PLUS n_add_operator term x_aux .

    NOT_EQUAL       reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    EQUALS          reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    GREATER         reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    GREATER_EQ      reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    LESS            reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    LESS_EQ         reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    OR              reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    AND             reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    SEMICOLON       reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    R_PARENS        reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    COMMA           reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)
    R_SQUARE_BRACKET reduce using rule 83 (x_aux -> PLUS n_add_operator term x_aux .)


state 206

    (85) x_aux -> MINUS n_add_operator term x_aux .

    NOT_EQUAL       reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    EQUALS          reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    GREATER         reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    GREATER_EQ      reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    LESS            reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    LESS_EQ         reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    OR              reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    AND             reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    SEMICOLON       reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    R_PARENS        reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    COMMA           reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)
    R_SQUARE_BRACKET reduce using rule 85 (x_aux -> MINUS n_add_operator term x_aux .)


state 207

    (95) term_aux -> TIMES n_add_operator factor term_aux .

    PLUS            reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    MINUS           reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    NOT_EQUAL       reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    EQUALS          reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    GREATER         reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    GREATER_EQ      reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    LESS            reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    LESS_EQ         reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    OR              reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    AND             reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    SEMICOLON       reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    R_PARENS        reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    COMMA           reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 95 (term_aux -> TIMES n_add_operator factor term_aux .)


state 208

    (97) term_aux -> DIVIDE n_add_operator factor term_aux .

    PLUS            reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    MINUS           reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    NOT_EQUAL       reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    EQUALS          reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    GREATER         reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    GREATER_EQ      reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    LESS            reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    LESS_EQ         reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    OR              reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    AND             reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    SEMICOLON       reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    R_PARENS        reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    COMMA           reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 97 (term_aux -> DIVIDE n_add_operator factor term_aux .)


state 209

    (54) if -> IF L_PARENS expression R_PARENS block elif else .

    ID              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)
    RETURN          reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)
    PRINT           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)
    IF              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)
    WHILE           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)
    R_KEY_BRACKET   reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block elif else .)


state 210

    (58) elif -> ELIF L_PARENS . expression R_PARENS block elif
    (59) elif -> ELIF L_PARENS . expression R_PARENS block
    (68) expression -> . exp n_eval_exp AND n_add_operator expression
    (69) expression -> . exp n_eval_exp
    (77) exp -> . xp n_eval_xp OR n_add_operator exp
    (78) exp -> . xp n_eval_xp
    (79) xp -> . x n_eval_x log_op n_add_operator x
    (80) xp -> . x n_eval_x
    (81) x -> . term n_eval_term x_aux
    (82) x -> . term n_eval_term
    (93) term -> . factor n_eval_factor term_aux
    (94) term -> . factor n_eval_factor
    (99) factor -> . NOT factor_aux
    (100) factor -> . factor_aux
    (101) factor_aux -> . L_PARENS expression R_PARENS
    (102) factor_aux -> . PLUS const
    (103) factor_aux -> . MINUS const
    (104) factor_aux -> . const
    (105) const -> . ID n_add_operand
    (106) const -> . CONST_I n_add_operand
    (107) const -> . CONST_F n_add_operand
    (108) const -> . CONST_STRING n_add_operand
    (109) const -> . function_call
    (110) const -> . array_access
    (52) function_call -> . ID params_pass
    (111) array_access -> . ID array_index

    NOT             shift and go to state 60
    L_PARENS        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 65
    ID              shift and go to state 66
    CONST_I         shift and go to state 67
    CONST_F         shift and go to state 68
    CONST_STRING    shift and go to state 69

    expression                     shift and go to state 217
    exp                            shift and go to state 55
    xp                             shift and go to state 56
    x                              shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 59
    factor_aux                     shift and go to state 61
    const                          shift and go to state 64
    function_call                  shift and go to state 70
    array_access                   shift and go to state 71

state 211

    (60) else -> ELSE block .

    ID              reduce using rule 60 (else -> ELSE block .)
    RETURN          reduce using rule 60 (else -> ELSE block .)
    PRINT           reduce using rule 60 (else -> ELSE block .)
    IF              reduce using rule 60 (else -> ELSE block .)
    WHILE           reduce using rule 60 (else -> ELSE block .)
    R_KEY_BRACKET   reduce using rule 60 (else -> ELSE block .)


state 212

    (76) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 76 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 213

    (15) function_params -> type ID n_add_var array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID n_add_var array_index COMMA function_params .)


state 214

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 218


state 215

    (29) var_aux -> COMMA ID n_add_var array_dim var_aux .

    SEMICOLON       reduce using rule 29 (var_aux -> COMMA ID n_add_var array_dim var_aux .)


state 216

    (44) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    ASSIGN          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 44 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 217

    (58) elif -> ELIF L_PARENS expression . R_PARENS block elif
    (59) elif -> ELIF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 219


state 218

    (46) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 46 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 46 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 219

    (58) elif -> ELIF L_PARENS expression R_PARENS . block elif
    (59) elif -> ELIF L_PARENS expression R_PARENS . block
    (76) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 170

    block                          shift and go to state 220

state 220

    (58) elif -> ELIF L_PARENS expression R_PARENS block . elif
    (59) elif -> ELIF L_PARENS expression R_PARENS block .
    (58) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (59) elif -> . ELIF L_PARENS expression R_PARENS block

    ELSE            reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ID              reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 59 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 196

    elif                           shift and go to state 221

state 221

    (58) elif -> ELIF L_PARENS expression R_PARENS block elif .

    ELSE            reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    ID              reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 58 (elif -> ELIF L_PARENS expression R_PARENS block elif .)

