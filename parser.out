Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body
Rule 6     main -> FUNCTION MAIN function_body
Rule 7     function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 11    function_body_aux -> var function_body_aux
Rule 12    function_body_aux -> var
Rule 13    statements -> statement statements
Rule 14    statements -> statement
Rule 15    function_params -> type ID array_index COMMA function_params
Rule 16    function_params -> type ID array_index
Rule 17    function_params -> type ID COMMA function_params
Rule 18    function_params -> type ID
Rule 19    function_type -> type
Rule 20    function_type -> VOID
Rule 21    var -> type_aux ID n_var_name array_dim var_aux SEMICOLON
Rule 22    var -> type_aux ID n_var_name array_dim SEMICOLON
Rule 23    var -> type_aux ID n_var_name var_aux SEMICOLON
Rule 24    var -> type_aux ID n_var_name SEMICOLON
Rule 25    type_aux -> GLOBAL type
Rule 26    type_aux -> type
Rule 27    var_aux -> COMMA ID array_dim var_aux
Rule 28    var_aux -> COMMA ID array_dim
Rule 29    var_aux -> COMMA ID var_aux
Rule 30    var_aux -> COMMA ID
Rule 31    statement -> statement_aux SEMICOLON
Rule 32    statement -> statement_aux_2
Rule 33    statement_aux -> assignment
Rule 34    statement_aux -> function_call
Rule 35    statement_aux -> return
Rule 36    statement_aux -> print
Rule 37    statement_aux_2 -> if
Rule 38    statement_aux_2 -> while
Rule 39    type -> INT
Rule 40    type -> FLOAT
Rule 41    type -> STRING
Rule 42    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 43    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 44    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 45    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 46    assignment -> ID array_index ASSIGN expression
Rule 47    assignment -> ID array_index ASSIGN read
Rule 48    assignment -> ID ASSIGN expression
Rule 49    assignment -> ID ASSIGN read
Rule 50    function_call -> ID params_pass
Rule 51    return -> RETURN expression
Rule 52    if -> IF L_PARENS expression R_PARENS block elif else
Rule 53    if -> IF L_PARENS expression R_PARENS block elif
Rule 54    if -> IF L_PARENS expression R_PARENS block else
Rule 55    if -> IF L_PARENS expression R_PARENS block
Rule 56    elif -> ELIF L_PARENS expression R_PARENS block elif
Rule 57    elif -> ELIF L_PARENS expression R_PARENS block
Rule 58    else -> ELSE block
Rule 59    while -> WHILE L_PARENS expression R_PARENS block
Rule 60    print -> PRINT L_PARENS print_aux R_PARENS
Rule 61    print -> PRINT L_PARENS R_PARENS
Rule 62    print_aux -> CONST_STRING COMMA print_aux
Rule 63    print_aux -> CONST_STRING
Rule 64    print_aux -> ID COMMA print_aux
Rule 65    print_aux -> ID
Rule 66    expression -> exp n_eval_exp AND n_add_operator expression
Rule 67    expression -> exp n_eval_exp
Rule 68    read -> READ ID
Rule 69    params_pass -> L_PARENS expression params_pass_aux R_PARENS
Rule 70    params_pass -> L_PARENS expression R_PARENS
Rule 71    params_pass -> L_PARENS R_PARENS
Rule 72    params_pass_aux -> COMMA expression params_pass_aux
Rule 73    params_pass_aux -> COMMA expression
Rule 74    block -> L_KEY_BRACKET statements R_KEY_BRACKET
Rule 75    exp -> xp n_eval_xp OR n_add_operator exp
Rule 76    exp -> xp n_eval_xp
Rule 77    xp -> x n_eval_x log_op n_add_operator x
Rule 78    xp -> x n_eval_x
Rule 79    x -> term n_eval_term x_aux
Rule 80    x -> term n_eval_term
Rule 81    x_aux -> PLUS n_add_operator term x_aux
Rule 82    x_aux -> PLUS n_add_operator term
Rule 83    x_aux -> MINUS n_add_operator term x_aux
Rule 84    x_aux -> MINUS n_add_operator term
Rule 85    log_op -> NOT_EQUAL
Rule 86    log_op -> EQUALS
Rule 87    log_op -> GREATER
Rule 88    log_op -> GREATER_EQ
Rule 89    log_op -> LESS
Rule 90    log_op -> LESS_EQ
Rule 91    term -> factor n_eval_factor term_aux
Rule 92    term -> factor n_eval_factor
Rule 93    term_aux -> TIMES n_add_operator factor term_aux
Rule 94    term_aux -> TIMES n_add_operator factor
Rule 95    term_aux -> DIVIDE n_add_operator factor term_aux
Rule 96    term_aux -> DIVIDE n_add_operator factor
Rule 97    factor -> NOT factor_aux
Rule 98    factor -> factor_aux
Rule 99    factor_aux -> L_PARENS expression R_PARENS
Rule 100   factor_aux -> PLUS const
Rule 101   factor_aux -> MINUS const
Rule 102   factor_aux -> const
Rule 103   const -> ID n_add_operand
Rule 104   const -> CONST_I n_add_operand
Rule 105   const -> CONST_F n_add_operand
Rule 106   const -> CONST_STRING n_add_operand
Rule 107   const -> function_call
Rule 108   const -> array_access
Rule 109   array_access -> ID array_index
Rule 110   n_var_name -> <empty>
Rule 111   n_eval_exp -> <empty>
Rule 112   n_eval_xp -> <empty>
Rule 113   n_eval_x -> <empty>
Rule 114   n_eval_factor -> <empty>
Rule 115   n_eval_term -> <empty>
Rule 116   n_add_operand -> <empty>
Rule 117   n_add_operator -> <empty>

Terminals, with rules where they appear

AND                  : 66
ASSIGN               : 46 47 48 49
COLON                : 7 8
COMMA                : 15 17 27 28 29 30 62 64 72 73
CONST_F              : 105
CONST_I              : 44 44 45 104
CONST_STRING         : 62 63 106
DIVIDE               : 95 96
ELIF                 : 56 57
ELSE                 : 58
EQUALS               : 86
FLOAT                : 40
FUNCTION             : 6 7 8
GLOBAL               : 25
GREATER              : 87
GREATER_EQ           : 88
ID                   : 7 8 15 16 17 18 21 22 23 24 27 28 29 30 46 47 48 49 50 64 65 68 103 109
IF                   : 52 53 54 55
INT                  : 39
LESS                 : 89
LESS_EQ              : 90
L_KEY_BRACKET        : 9 10 74
L_PARENS             : 7 8 52 53 54 55 56 57 59 60 61 69 70 71 99
L_SQUARE_BRACKET     : 42 42 43 44 44 45
MAIN                 : 6
MINUS                : 83 84 101
NOT                  : 97
NOT_EQUAL            : 85
OR                   : 75
PLUS                 : 81 82 100
PRINT                : 60 61
READ                 : 68
RETURN               : 51
R_KEY_BRACKET        : 9 10 74
R_PARENS             : 7 8 52 53 54 55 56 57 59 60 61 69 70 71 99
R_SQUARE_BRACKET     : 42 42 43 44 44 45
SEMICOLON            : 21 22 23 24 31
STRING               : 41
TIMES                : 93 94
VOID                 : 20
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

array_access         : 108
array_dim            : 21 22 27 28
array_index          : 15 16 46 47 109
assignment           : 33
block                : 52 53 54 55 56 57 58 59
const                : 100 101 102
elif                 : 52 53 56
else                 : 52 54
exp                  : 66 67 75
expression           : 42 42 43 46 48 51 52 53 54 55 56 57 59 66 69 70 72 73 99
factor               : 91 92 93 94 95 96
factor_aux           : 97 98
function             : 3 4
function_body        : 5 6
function_body_aux    : 9 11
function_call        : 34 107
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 37
log_op               : 77
main                 : 1 2
n_add_operand        : 103 104 105 106
n_add_operator       : 66 75 77 81 82 83 84 93 94 95 96
n_eval_exp           : 66 67
n_eval_factor        : 91 92
n_eval_term          : 79 80
n_eval_x             : 77 78
n_eval_xp            : 75 76
n_var_name           : 21 22 23 24
params_pass          : 50
params_pass_aux      : 69 72
print                : 36
print_aux            : 60 62 64
program              : 0
program_aux          : 1 3
read                 : 47 49
return               : 35
statement            : 13 14
statement_aux        : 31
statement_aux_2      : 32
statements           : 9 10 13 74
term                 : 79 80 81 82 83 84
term_aux             : 91 93 95
type                 : 15 16 17 18 19 25 26
type_aux             : 21 22 23 24
var                  : 11 12
var_aux              : 21 23 27 29
while                : 38
x                    : 77 77 78
x_aux                : 79 81 83
xp                   : 75 76

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN function_body
    (7) function_header -> FUNCTION . ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body
    (9) function_body -> . L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . function_body
    (9) function_body -> . L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 14


state 11

    (5) function -> function_header function_body .

    FUNCTION        reduce using rule 5 (function -> function_header function_body .)


state 12

    (9) function_body -> L_KEY_BRACKET . function_body_aux statements R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (13) statements -> . statement statements
    (14) statements -> . statement
    (21) var -> . type_aux ID n_var_name array_dim var_aux SEMICOLON
    (22) var -> . type_aux ID n_var_name array_dim SEMICOLON
    (23) var -> . type_aux ID n_var_name var_aux SEMICOLON
    (24) var -> . type_aux ID n_var_name SEMICOLON
    (31) statement -> . statement_aux SEMICOLON
    (32) statement -> . statement_aux_2
    (25) type_aux -> . GLOBAL type
    (26) type_aux -> . type
    (33) statement_aux -> . assignment
    (34) statement_aux -> . function_call
    (35) statement_aux -> . return
    (36) statement_aux -> . print
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING
    (46) assignment -> . ID array_index ASSIGN expression
    (47) assignment -> . ID array_index ASSIGN read
    (48) assignment -> . ID ASSIGN expression
    (49) assignment -> . ID ASSIGN read
    (50) function_call -> . ID params_pass
    (51) return -> . RETURN expression
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) if -> . IF L_PARENS expression R_PARENS block elif
    (54) if -> . IF L_PARENS expression R_PARENS block else
    (55) if -> . IF L_PARENS expression R_PARENS block
    (59) while -> . WHILE L_PARENS expression R_PARENS block

    GLOBAL          shift and go to state 23
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33
    ID              shift and go to state 20
    RETURN          shift and go to state 34
    PRINT           shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37

    function_body_aux              shift and go to state 15
    statements                     shift and go to state 16
    var                            shift and go to state 17
    statement                      shift and go to state 18
    type_aux                       shift and go to state 19
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    type                           shift and go to state 24
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    if                             shift and go to state 29
    while                          shift and go to state 30

state 13

    (6) main -> FUNCTION MAIN function_body .

    $end            reduce using rule 6 (main -> FUNCTION MAIN function_body .)


state 14

    (7) function_header -> FUNCTION ID L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    R_PARENS        shift and go to state 39
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    function_params                shift and go to state 38
    type                           shift and go to state 40

state 15

    (9) function_body -> L_KEY_BRACKET function_body_aux . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (31) statement -> . statement_aux SEMICOLON
    (32) statement -> . statement_aux_2
    (33) statement_aux -> . assignment
    (34) statement_aux -> . function_call
    (35) statement_aux -> . return
    (36) statement_aux -> . print
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID array_index ASSIGN expression
    (47) assignment -> . ID array_index ASSIGN read
    (48) assignment -> . ID ASSIGN expression
    (49) assignment -> . ID ASSIGN read
    (50) function_call -> . ID params_pass
    (51) return -> . RETURN expression
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) if -> . IF L_PARENS expression R_PARENS block elif
    (54) if -> . IF L_PARENS expression R_PARENS block else
    (55) if -> . IF L_PARENS expression R_PARENS block
    (59) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 20
    RETURN          shift and go to state 34
    PRINT           shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37

    statements                     shift and go to state 41
    statement                      shift and go to state 18
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    if                             shift and go to state 29
    while                          shift and go to state 30

state 16

    (10) function_body -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 42


state 17

    (11) function_body_aux -> var . function_body_aux
    (12) function_body_aux -> var .
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (21) var -> . type_aux ID n_var_name array_dim var_aux SEMICOLON
    (22) var -> . type_aux ID n_var_name array_dim SEMICOLON
    (23) var -> . type_aux ID n_var_name var_aux SEMICOLON
    (24) var -> . type_aux ID n_var_name SEMICOLON
    (25) type_aux -> . GLOBAL type
    (26) type_aux -> . type
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    ID              reduce using rule 12 (function_body_aux -> var .)
    RETURN          reduce using rule 12 (function_body_aux -> var .)
    PRINT           reduce using rule 12 (function_body_aux -> var .)
    IF              reduce using rule 12 (function_body_aux -> var .)
    WHILE           reduce using rule 12 (function_body_aux -> var .)
    GLOBAL          shift and go to state 23
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    var                            shift and go to state 17
    function_body_aux              shift and go to state 43
    type_aux                       shift and go to state 19
    type                           shift and go to state 24

state 18

    (13) statements -> statement . statements
    (14) statements -> statement .
    (13) statements -> . statement statements
    (14) statements -> . statement
    (31) statement -> . statement_aux SEMICOLON
    (32) statement -> . statement_aux_2
    (33) statement_aux -> . assignment
    (34) statement_aux -> . function_call
    (35) statement_aux -> . return
    (36) statement_aux -> . print
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID array_index ASSIGN expression
    (47) assignment -> . ID array_index ASSIGN read
    (48) assignment -> . ID ASSIGN expression
    (49) assignment -> . ID ASSIGN read
    (50) function_call -> . ID params_pass
    (51) return -> . RETURN expression
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) if -> . IF L_PARENS expression R_PARENS block elif
    (54) if -> . IF L_PARENS expression R_PARENS block else
    (55) if -> . IF L_PARENS expression R_PARENS block
    (59) while -> . WHILE L_PARENS expression R_PARENS block

    R_KEY_BRACKET   reduce using rule 14 (statements -> statement .)
    ID              shift and go to state 20
    RETURN          shift and go to state 34
    PRINT           shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37

    statement                      shift and go to state 18
    statements                     shift and go to state 44
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    if                             shift and go to state 29
    while                          shift and go to state 30

state 19

    (21) var -> type_aux . ID n_var_name array_dim var_aux SEMICOLON
    (22) var -> type_aux . ID n_var_name array_dim SEMICOLON
    (23) var -> type_aux . ID n_var_name var_aux SEMICOLON
    (24) var -> type_aux . ID n_var_name SEMICOLON

    ID              shift and go to state 45


state 20

    (46) assignment -> ID . array_index ASSIGN expression
    (47) assignment -> ID . array_index ASSIGN read
    (48) assignment -> ID . ASSIGN expression
    (49) assignment -> ID . ASSIGN read
    (50) function_call -> ID . params_pass
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (69) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (70) params_pass -> . L_PARENS expression R_PARENS
    (71) params_pass -> . L_PARENS R_PARENS

    ASSIGN          shift and go to state 47
    L_SQUARE_BRACKET shift and go to state 49
    L_PARENS        shift and go to state 50

    array_index                    shift and go to state 46
    params_pass                    shift and go to state 48

state 21

    (31) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 51


state 22

    (32) statement -> statement_aux_2 .

    ID              reduce using rule 32 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 32 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 32 (statement -> statement_aux_2 .)
    IF              reduce using rule 32 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 32 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 32 (statement -> statement_aux_2 .)


state 23

    (25) type_aux -> GLOBAL . type
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    type                           shift and go to state 52

state 24

    (26) type_aux -> type .

    ID              reduce using rule 26 (type_aux -> type .)


state 25

    (33) statement_aux -> assignment .

    SEMICOLON       reduce using rule 33 (statement_aux -> assignment .)


state 26

    (34) statement_aux -> function_call .

    SEMICOLON       reduce using rule 34 (statement_aux -> function_call .)


state 27

    (35) statement_aux -> return .

    SEMICOLON       reduce using rule 35 (statement_aux -> return .)


state 28

    (36) statement_aux -> print .

    SEMICOLON       reduce using rule 36 (statement_aux -> print .)


state 29

    (37) statement_aux_2 -> if .

    ID              reduce using rule 37 (statement_aux_2 -> if .)
    RETURN          reduce using rule 37 (statement_aux_2 -> if .)
    PRINT           reduce using rule 37 (statement_aux_2 -> if .)
    IF              reduce using rule 37 (statement_aux_2 -> if .)
    WHILE           reduce using rule 37 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 37 (statement_aux_2 -> if .)


state 30

    (38) statement_aux_2 -> while .

    ID              reduce using rule 38 (statement_aux_2 -> while .)
    RETURN          reduce using rule 38 (statement_aux_2 -> while .)
    PRINT           reduce using rule 38 (statement_aux_2 -> while .)
    IF              reduce using rule 38 (statement_aux_2 -> while .)
    WHILE           reduce using rule 38 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 38 (statement_aux_2 -> while .)


state 31

    (39) type -> INT .

    ID              reduce using rule 39 (type -> INT .)
    L_KEY_BRACKET   reduce using rule 39 (type -> INT .)


state 32

    (40) type -> FLOAT .

    ID              reduce using rule 40 (type -> FLOAT .)
    L_KEY_BRACKET   reduce using rule 40 (type -> FLOAT .)


state 33

    (41) type -> STRING .

    ID              reduce using rule 41 (type -> STRING .)
    L_KEY_BRACKET   reduce using rule 41 (type -> STRING .)


state 34

    (51) return -> RETURN . expression
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 53
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 35

    (60) print -> PRINT . L_PARENS print_aux R_PARENS
    (61) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 71


state 36

    (52) if -> IF . L_PARENS expression R_PARENS block elif else
    (53) if -> IF . L_PARENS expression R_PARENS block elif
    (54) if -> IF . L_PARENS expression R_PARENS block else
    (55) if -> IF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 72


state 37

    (59) while -> WHILE . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 73


state 38

    (7) function_header -> FUNCTION ID L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 74


state 39

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 75


state 40

    (15) function_params -> type . ID array_index COMMA function_params
    (16) function_params -> type . ID array_index
    (17) function_params -> type . ID COMMA function_params
    (18) function_params -> type . ID

    ID              shift and go to state 76


state 41

    (9) function_body -> L_KEY_BRACKET function_body_aux statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 77


state 42

    (10) function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 43

    (11) function_body_aux -> var function_body_aux .

    ID              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    RETURN          reduce using rule 11 (function_body_aux -> var function_body_aux .)
    PRINT           reduce using rule 11 (function_body_aux -> var function_body_aux .)
    IF              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    WHILE           reduce using rule 11 (function_body_aux -> var function_body_aux .)


state 44

    (13) statements -> statement statements .

    R_KEY_BRACKET   reduce using rule 13 (statements -> statement statements .)


state 45

    (21) var -> type_aux ID . n_var_name array_dim var_aux SEMICOLON
    (22) var -> type_aux ID . n_var_name array_dim SEMICOLON
    (23) var -> type_aux ID . n_var_name var_aux SEMICOLON
    (24) var -> type_aux ID . n_var_name SEMICOLON
    (110) n_var_name -> .

    SEMICOLON       reduce using rule 110 (n_var_name -> .)
    L_SQUARE_BRACKET reduce using rule 110 (n_var_name -> .)
    COMMA           reduce using rule 110 (n_var_name -> .)

    n_var_name                     shift and go to state 78

state 46

    (46) assignment -> ID array_index . ASSIGN expression
    (47) assignment -> ID array_index . ASSIGN read

    ASSIGN          shift and go to state 79


state 47

    (48) assignment -> ID ASSIGN . expression
    (49) assignment -> ID ASSIGN . read
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (68) read -> . READ ID
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    READ            shift and go to state 82
    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 80
    read                           shift and go to state 81
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 48

    (50) function_call -> ID params_pass .

    SEMICOLON       reduce using rule 50 (function_call -> ID params_pass .)
    TIMES           reduce using rule 50 (function_call -> ID params_pass .)
    DIVIDE          reduce using rule 50 (function_call -> ID params_pass .)
    PLUS            reduce using rule 50 (function_call -> ID params_pass .)
    MINUS           reduce using rule 50 (function_call -> ID params_pass .)
    NOT_EQUAL       reduce using rule 50 (function_call -> ID params_pass .)
    EQUALS          reduce using rule 50 (function_call -> ID params_pass .)
    GREATER         reduce using rule 50 (function_call -> ID params_pass .)
    GREATER_EQ      reduce using rule 50 (function_call -> ID params_pass .)
    LESS            reduce using rule 50 (function_call -> ID params_pass .)
    LESS_EQ         reduce using rule 50 (function_call -> ID params_pass .)
    OR              reduce using rule 50 (function_call -> ID params_pass .)
    AND             reduce using rule 50 (function_call -> ID params_pass .)
    R_SQUARE_BRACKET reduce using rule 50 (function_call -> ID params_pass .)
    R_PARENS        reduce using rule 50 (function_call -> ID params_pass .)
    COMMA           reduce using rule 50 (function_call -> ID params_pass .)


state 49

    (42) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 83
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 50

    (69) params_pass -> L_PARENS . expression params_pass_aux R_PARENS
    (70) params_pass -> L_PARENS . expression R_PARENS
    (71) params_pass -> L_PARENS . R_PARENS
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    R_PARENS        shift and go to state 85
    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 84
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 51

    (31) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 31 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 31 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 31 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 31 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 31 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 31 (statement -> statement_aux SEMICOLON .)


state 52

    (25) type_aux -> GLOBAL type .

    ID              reduce using rule 25 (type_aux -> GLOBAL type .)


state 53

    (51) return -> RETURN expression .

    SEMICOLON       reduce using rule 51 (return -> RETURN expression .)


state 54

    (66) expression -> exp . n_eval_exp AND n_add_operator expression
    (67) expression -> exp . n_eval_exp
    (111) n_eval_exp -> .

    AND             reduce using rule 111 (n_eval_exp -> .)
    SEMICOLON       reduce using rule 111 (n_eval_exp -> .)
    R_SQUARE_BRACKET reduce using rule 111 (n_eval_exp -> .)
    R_PARENS        reduce using rule 111 (n_eval_exp -> .)
    COMMA           reduce using rule 111 (n_eval_exp -> .)

    n_eval_exp                     shift and go to state 86

state 55

    (75) exp -> xp . n_eval_xp OR n_add_operator exp
    (76) exp -> xp . n_eval_xp
    (112) n_eval_xp -> .

    OR              reduce using rule 112 (n_eval_xp -> .)
    AND             reduce using rule 112 (n_eval_xp -> .)
    SEMICOLON       reduce using rule 112 (n_eval_xp -> .)
    R_SQUARE_BRACKET reduce using rule 112 (n_eval_xp -> .)
    R_PARENS        reduce using rule 112 (n_eval_xp -> .)
    COMMA           reduce using rule 112 (n_eval_xp -> .)

    n_eval_xp                      shift and go to state 87

state 56

    (77) xp -> x . n_eval_x log_op n_add_operator x
    (78) xp -> x . n_eval_x
    (113) n_eval_x -> .

    NOT_EQUAL       reduce using rule 113 (n_eval_x -> .)
    EQUALS          reduce using rule 113 (n_eval_x -> .)
    GREATER         reduce using rule 113 (n_eval_x -> .)
    GREATER_EQ      reduce using rule 113 (n_eval_x -> .)
    LESS            reduce using rule 113 (n_eval_x -> .)
    LESS_EQ         reduce using rule 113 (n_eval_x -> .)
    OR              reduce using rule 113 (n_eval_x -> .)
    AND             reduce using rule 113 (n_eval_x -> .)
    SEMICOLON       reduce using rule 113 (n_eval_x -> .)
    R_SQUARE_BRACKET reduce using rule 113 (n_eval_x -> .)
    R_PARENS        reduce using rule 113 (n_eval_x -> .)
    COMMA           reduce using rule 113 (n_eval_x -> .)

    n_eval_x                       shift and go to state 88

state 57

    (79) x -> term . n_eval_term x_aux
    (80) x -> term . n_eval_term
    (115) n_eval_term -> .

    PLUS            reduce using rule 115 (n_eval_term -> .)
    MINUS           reduce using rule 115 (n_eval_term -> .)
    NOT_EQUAL       reduce using rule 115 (n_eval_term -> .)
    EQUALS          reduce using rule 115 (n_eval_term -> .)
    GREATER         reduce using rule 115 (n_eval_term -> .)
    GREATER_EQ      reduce using rule 115 (n_eval_term -> .)
    LESS            reduce using rule 115 (n_eval_term -> .)
    LESS_EQ         reduce using rule 115 (n_eval_term -> .)
    OR              reduce using rule 115 (n_eval_term -> .)
    AND             reduce using rule 115 (n_eval_term -> .)
    SEMICOLON       reduce using rule 115 (n_eval_term -> .)
    R_SQUARE_BRACKET reduce using rule 115 (n_eval_term -> .)
    R_PARENS        reduce using rule 115 (n_eval_term -> .)
    COMMA           reduce using rule 115 (n_eval_term -> .)

    n_eval_term                    shift and go to state 89

state 58

    (91) term -> factor . n_eval_factor term_aux
    (92) term -> factor . n_eval_factor
    (114) n_eval_factor -> .

    TIMES           reduce using rule 114 (n_eval_factor -> .)
    DIVIDE          reduce using rule 114 (n_eval_factor -> .)
    PLUS            reduce using rule 114 (n_eval_factor -> .)
    MINUS           reduce using rule 114 (n_eval_factor -> .)
    NOT_EQUAL       reduce using rule 114 (n_eval_factor -> .)
    EQUALS          reduce using rule 114 (n_eval_factor -> .)
    GREATER         reduce using rule 114 (n_eval_factor -> .)
    GREATER_EQ      reduce using rule 114 (n_eval_factor -> .)
    LESS            reduce using rule 114 (n_eval_factor -> .)
    LESS_EQ         reduce using rule 114 (n_eval_factor -> .)
    OR              reduce using rule 114 (n_eval_factor -> .)
    AND             reduce using rule 114 (n_eval_factor -> .)
    SEMICOLON       reduce using rule 114 (n_eval_factor -> .)
    R_SQUARE_BRACKET reduce using rule 114 (n_eval_factor -> .)
    R_PARENS        reduce using rule 114 (n_eval_factor -> .)
    COMMA           reduce using rule 114 (n_eval_factor -> .)

    n_eval_factor                  shift and go to state 90

state 59

    (97) factor -> NOT . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor_aux                     shift and go to state 91
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 60

    (98) factor -> factor_aux .

    TIMES           reduce using rule 98 (factor -> factor_aux .)
    DIVIDE          reduce using rule 98 (factor -> factor_aux .)
    PLUS            reduce using rule 98 (factor -> factor_aux .)
    MINUS           reduce using rule 98 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 98 (factor -> factor_aux .)
    EQUALS          reduce using rule 98 (factor -> factor_aux .)
    GREATER         reduce using rule 98 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 98 (factor -> factor_aux .)
    LESS            reduce using rule 98 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 98 (factor -> factor_aux .)
    OR              reduce using rule 98 (factor -> factor_aux .)
    AND             reduce using rule 98 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 98 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 98 (factor -> factor_aux .)
    R_PARENS        reduce using rule 98 (factor -> factor_aux .)
    COMMA           reduce using rule 98 (factor -> factor_aux .)


state 61

    (99) factor_aux -> L_PARENS . expression R_PARENS
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 92
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 62

    (100) factor_aux -> PLUS . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    const                          shift and go to state 93
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 63

    (102) factor_aux -> const .

    TIMES           reduce using rule 102 (factor_aux -> const .)
    DIVIDE          reduce using rule 102 (factor_aux -> const .)
    PLUS            reduce using rule 102 (factor_aux -> const .)
    MINUS           reduce using rule 102 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 102 (factor_aux -> const .)
    EQUALS          reduce using rule 102 (factor_aux -> const .)
    GREATER         reduce using rule 102 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 102 (factor_aux -> const .)
    LESS            reduce using rule 102 (factor_aux -> const .)
    LESS_EQ         reduce using rule 102 (factor_aux -> const .)
    OR              reduce using rule 102 (factor_aux -> const .)
    AND             reduce using rule 102 (factor_aux -> const .)
    SEMICOLON       reduce using rule 102 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 102 (factor_aux -> const .)
    R_PARENS        reduce using rule 102 (factor_aux -> const .)
    COMMA           reduce using rule 102 (factor_aux -> const .)


state 64

    (101) factor_aux -> MINUS . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    const                          shift and go to state 94
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 65

    (103) const -> ID . n_add_operand
    (50) function_call -> ID . params_pass
    (109) array_access -> ID . array_index
    (116) n_add_operand -> .
    (69) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (70) params_pass -> . L_PARENS expression R_PARENS
    (71) params_pass -> . L_PARENS R_PARENS
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 116 (n_add_operand -> .)
    DIVIDE          reduce using rule 116 (n_add_operand -> .)
    PLUS            reduce using rule 116 (n_add_operand -> .)
    MINUS           reduce using rule 116 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 116 (n_add_operand -> .)
    EQUALS          reduce using rule 116 (n_add_operand -> .)
    GREATER         reduce using rule 116 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 116 (n_add_operand -> .)
    LESS            reduce using rule 116 (n_add_operand -> .)
    LESS_EQ         reduce using rule 116 (n_add_operand -> .)
    OR              reduce using rule 116 (n_add_operand -> .)
    AND             reduce using rule 116 (n_add_operand -> .)
    SEMICOLON       reduce using rule 116 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_add_operand -> .)
    R_PARENS        reduce using rule 116 (n_add_operand -> .)
    COMMA           reduce using rule 116 (n_add_operand -> .)
    L_PARENS        shift and go to state 50
    L_SQUARE_BRACKET shift and go to state 49

    n_add_operand                  shift and go to state 95
    params_pass                    shift and go to state 48
    array_index                    shift and go to state 96

state 66

    (104) const -> CONST_I . n_add_operand
    (116) n_add_operand -> .

    TIMES           reduce using rule 116 (n_add_operand -> .)
    DIVIDE          reduce using rule 116 (n_add_operand -> .)
    PLUS            reduce using rule 116 (n_add_operand -> .)
    MINUS           reduce using rule 116 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 116 (n_add_operand -> .)
    EQUALS          reduce using rule 116 (n_add_operand -> .)
    GREATER         reduce using rule 116 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 116 (n_add_operand -> .)
    LESS            reduce using rule 116 (n_add_operand -> .)
    LESS_EQ         reduce using rule 116 (n_add_operand -> .)
    OR              reduce using rule 116 (n_add_operand -> .)
    AND             reduce using rule 116 (n_add_operand -> .)
    SEMICOLON       reduce using rule 116 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_add_operand -> .)
    R_PARENS        reduce using rule 116 (n_add_operand -> .)
    COMMA           reduce using rule 116 (n_add_operand -> .)

    n_add_operand                  shift and go to state 97

state 67

    (105) const -> CONST_F . n_add_operand
    (116) n_add_operand -> .

    TIMES           reduce using rule 116 (n_add_operand -> .)
    DIVIDE          reduce using rule 116 (n_add_operand -> .)
    PLUS            reduce using rule 116 (n_add_operand -> .)
    MINUS           reduce using rule 116 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 116 (n_add_operand -> .)
    EQUALS          reduce using rule 116 (n_add_operand -> .)
    GREATER         reduce using rule 116 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 116 (n_add_operand -> .)
    LESS            reduce using rule 116 (n_add_operand -> .)
    LESS_EQ         reduce using rule 116 (n_add_operand -> .)
    OR              reduce using rule 116 (n_add_operand -> .)
    AND             reduce using rule 116 (n_add_operand -> .)
    SEMICOLON       reduce using rule 116 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_add_operand -> .)
    R_PARENS        reduce using rule 116 (n_add_operand -> .)
    COMMA           reduce using rule 116 (n_add_operand -> .)

    n_add_operand                  shift and go to state 98

state 68

    (106) const -> CONST_STRING . n_add_operand
    (116) n_add_operand -> .

    TIMES           reduce using rule 116 (n_add_operand -> .)
    DIVIDE          reduce using rule 116 (n_add_operand -> .)
    PLUS            reduce using rule 116 (n_add_operand -> .)
    MINUS           reduce using rule 116 (n_add_operand -> .)
    NOT_EQUAL       reduce using rule 116 (n_add_operand -> .)
    EQUALS          reduce using rule 116 (n_add_operand -> .)
    GREATER         reduce using rule 116 (n_add_operand -> .)
    GREATER_EQ      reduce using rule 116 (n_add_operand -> .)
    LESS            reduce using rule 116 (n_add_operand -> .)
    LESS_EQ         reduce using rule 116 (n_add_operand -> .)
    OR              reduce using rule 116 (n_add_operand -> .)
    AND             reduce using rule 116 (n_add_operand -> .)
    SEMICOLON       reduce using rule 116 (n_add_operand -> .)
    R_SQUARE_BRACKET reduce using rule 116 (n_add_operand -> .)
    R_PARENS        reduce using rule 116 (n_add_operand -> .)
    COMMA           reduce using rule 116 (n_add_operand -> .)

    n_add_operand                  shift and go to state 99

state 69

    (107) const -> function_call .

    TIMES           reduce using rule 107 (const -> function_call .)
    DIVIDE          reduce using rule 107 (const -> function_call .)
    PLUS            reduce using rule 107 (const -> function_call .)
    MINUS           reduce using rule 107 (const -> function_call .)
    NOT_EQUAL       reduce using rule 107 (const -> function_call .)
    EQUALS          reduce using rule 107 (const -> function_call .)
    GREATER         reduce using rule 107 (const -> function_call .)
    GREATER_EQ      reduce using rule 107 (const -> function_call .)
    LESS            reduce using rule 107 (const -> function_call .)
    LESS_EQ         reduce using rule 107 (const -> function_call .)
    OR              reduce using rule 107 (const -> function_call .)
    AND             reduce using rule 107 (const -> function_call .)
    SEMICOLON       reduce using rule 107 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 107 (const -> function_call .)
    R_PARENS        reduce using rule 107 (const -> function_call .)
    COMMA           reduce using rule 107 (const -> function_call .)


state 70

    (108) const -> array_access .

    TIMES           reduce using rule 108 (const -> array_access .)
    DIVIDE          reduce using rule 108 (const -> array_access .)
    PLUS            reduce using rule 108 (const -> array_access .)
    MINUS           reduce using rule 108 (const -> array_access .)
    NOT_EQUAL       reduce using rule 108 (const -> array_access .)
    EQUALS          reduce using rule 108 (const -> array_access .)
    GREATER         reduce using rule 108 (const -> array_access .)
    GREATER_EQ      reduce using rule 108 (const -> array_access .)
    LESS            reduce using rule 108 (const -> array_access .)
    LESS_EQ         reduce using rule 108 (const -> array_access .)
    OR              reduce using rule 108 (const -> array_access .)
    AND             reduce using rule 108 (const -> array_access .)
    SEMICOLON       reduce using rule 108 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 108 (const -> array_access .)
    R_PARENS        reduce using rule 108 (const -> array_access .)
    COMMA           reduce using rule 108 (const -> array_access .)


state 71

    (60) print -> PRINT L_PARENS . print_aux R_PARENS
    (61) print -> PRINT L_PARENS . R_PARENS
    (62) print_aux -> . CONST_STRING COMMA print_aux
    (63) print_aux -> . CONST_STRING
    (64) print_aux -> . ID COMMA print_aux
    (65) print_aux -> . ID

    R_PARENS        shift and go to state 101
    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 100

state 72

    (52) if -> IF L_PARENS . expression R_PARENS block elif else
    (53) if -> IF L_PARENS . expression R_PARENS block elif
    (54) if -> IF L_PARENS . expression R_PARENS block else
    (55) if -> IF L_PARENS . expression R_PARENS block
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 104
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 73

    (59) while -> WHILE L_PARENS . expression R_PARENS block
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 105
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 74

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 106


state 75

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . type
    (20) function_type -> . VOID
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    VOID            shift and go to state 109
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    function_type                  shift and go to state 107
    type                           shift and go to state 108

state 76

    (15) function_params -> type ID . array_index COMMA function_params
    (16) function_params -> type ID . array_index
    (17) function_params -> type ID . COMMA function_params
    (18) function_params -> type ID .
    (42) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 111
    R_PARENS        reduce using rule 18 (function_params -> type ID .)
    L_SQUARE_BRACKET shift and go to state 49

    array_index                    shift and go to state 110

state 77

    (9) function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET .)


state 78

    (21) var -> type_aux ID n_var_name . array_dim var_aux SEMICOLON
    (22) var -> type_aux ID n_var_name . array_dim SEMICOLON
    (23) var -> type_aux ID n_var_name . var_aux SEMICOLON
    (24) var -> type_aux ID n_var_name . SEMICOLON
    (44) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (27) var_aux -> . COMMA ID array_dim var_aux
    (28) var_aux -> . COMMA ID array_dim
    (29) var_aux -> . COMMA ID var_aux
    (30) var_aux -> . COMMA ID

    SEMICOLON       shift and go to state 114
    L_SQUARE_BRACKET shift and go to state 115
    COMMA           shift and go to state 116

    array_dim                      shift and go to state 112
    var_aux                        shift and go to state 113

state 79

    (46) assignment -> ID array_index ASSIGN . expression
    (47) assignment -> ID array_index ASSIGN . read
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (68) read -> . READ ID
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    READ            shift and go to state 82
    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 117
    read                           shift and go to state 118
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 80

    (48) assignment -> ID ASSIGN expression .

    SEMICOLON       reduce using rule 48 (assignment -> ID ASSIGN expression .)


state 81

    (49) assignment -> ID ASSIGN read .

    SEMICOLON       reduce using rule 49 (assignment -> ID ASSIGN read .)


state 82

    (68) read -> READ . ID

    ID              shift and go to state 119


state 83

    (42) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 120


state 84

    (69) params_pass -> L_PARENS expression . params_pass_aux R_PARENS
    (70) params_pass -> L_PARENS expression . R_PARENS
    (72) params_pass_aux -> . COMMA expression params_pass_aux
    (73) params_pass_aux -> . COMMA expression

    R_PARENS        shift and go to state 122
    COMMA           shift and go to state 123

    params_pass_aux                shift and go to state 121

state 85

    (71) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    EQUALS          reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 71 (params_pass -> L_PARENS R_PARENS .)


state 86

    (66) expression -> exp n_eval_exp . AND n_add_operator expression
    (67) expression -> exp n_eval_exp .

    AND             shift and go to state 124
    SEMICOLON       reduce using rule 67 (expression -> exp n_eval_exp .)
    R_SQUARE_BRACKET reduce using rule 67 (expression -> exp n_eval_exp .)
    R_PARENS        reduce using rule 67 (expression -> exp n_eval_exp .)
    COMMA           reduce using rule 67 (expression -> exp n_eval_exp .)


state 87

    (75) exp -> xp n_eval_xp . OR n_add_operator exp
    (76) exp -> xp n_eval_xp .

    OR              shift and go to state 125
    AND             reduce using rule 76 (exp -> xp n_eval_xp .)
    SEMICOLON       reduce using rule 76 (exp -> xp n_eval_xp .)
    R_SQUARE_BRACKET reduce using rule 76 (exp -> xp n_eval_xp .)
    R_PARENS        reduce using rule 76 (exp -> xp n_eval_xp .)
    COMMA           reduce using rule 76 (exp -> xp n_eval_xp .)


state 88

    (77) xp -> x n_eval_x . log_op n_add_operator x
    (78) xp -> x n_eval_x .
    (85) log_op -> . NOT_EQUAL
    (86) log_op -> . EQUALS
    (87) log_op -> . GREATER
    (88) log_op -> . GREATER_EQ
    (89) log_op -> . LESS
    (90) log_op -> . LESS_EQ

    OR              reduce using rule 78 (xp -> x n_eval_x .)
    AND             reduce using rule 78 (xp -> x n_eval_x .)
    SEMICOLON       reduce using rule 78 (xp -> x n_eval_x .)
    R_SQUARE_BRACKET reduce using rule 78 (xp -> x n_eval_x .)
    R_PARENS        reduce using rule 78 (xp -> x n_eval_x .)
    COMMA           reduce using rule 78 (xp -> x n_eval_x .)
    NOT_EQUAL       shift and go to state 127
    EQUALS          shift and go to state 128
    GREATER         shift and go to state 129
    GREATER_EQ      shift and go to state 130
    LESS            shift and go to state 131
    LESS_EQ         shift and go to state 132

    log_op                         shift and go to state 126

state 89

    (79) x -> term n_eval_term . x_aux
    (80) x -> term n_eval_term .
    (81) x_aux -> . PLUS n_add_operator term x_aux
    (82) x_aux -> . PLUS n_add_operator term
    (83) x_aux -> . MINUS n_add_operator term x_aux
    (84) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 80 (x -> term n_eval_term .)
    EQUALS          reduce using rule 80 (x -> term n_eval_term .)
    GREATER         reduce using rule 80 (x -> term n_eval_term .)
    GREATER_EQ      reduce using rule 80 (x -> term n_eval_term .)
    LESS            reduce using rule 80 (x -> term n_eval_term .)
    LESS_EQ         reduce using rule 80 (x -> term n_eval_term .)
    OR              reduce using rule 80 (x -> term n_eval_term .)
    AND             reduce using rule 80 (x -> term n_eval_term .)
    SEMICOLON       reduce using rule 80 (x -> term n_eval_term .)
    R_SQUARE_BRACKET reduce using rule 80 (x -> term n_eval_term .)
    R_PARENS        reduce using rule 80 (x -> term n_eval_term .)
    COMMA           reduce using rule 80 (x -> term n_eval_term .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

    x_aux                          shift and go to state 133

state 90

    (91) term -> factor n_eval_factor . term_aux
    (92) term -> factor n_eval_factor .
    (93) term_aux -> . TIMES n_add_operator factor term_aux
    (94) term_aux -> . TIMES n_add_operator factor
    (95) term_aux -> . DIVIDE n_add_operator factor term_aux
    (96) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 92 (term -> factor n_eval_factor .)
    MINUS           reduce using rule 92 (term -> factor n_eval_factor .)
    NOT_EQUAL       reduce using rule 92 (term -> factor n_eval_factor .)
    EQUALS          reduce using rule 92 (term -> factor n_eval_factor .)
    GREATER         reduce using rule 92 (term -> factor n_eval_factor .)
    GREATER_EQ      reduce using rule 92 (term -> factor n_eval_factor .)
    LESS            reduce using rule 92 (term -> factor n_eval_factor .)
    LESS_EQ         reduce using rule 92 (term -> factor n_eval_factor .)
    OR              reduce using rule 92 (term -> factor n_eval_factor .)
    AND             reduce using rule 92 (term -> factor n_eval_factor .)
    SEMICOLON       reduce using rule 92 (term -> factor n_eval_factor .)
    R_SQUARE_BRACKET reduce using rule 92 (term -> factor n_eval_factor .)
    R_PARENS        reduce using rule 92 (term -> factor n_eval_factor .)
    COMMA           reduce using rule 92 (term -> factor n_eval_factor .)
    TIMES           shift and go to state 137
    DIVIDE          shift and go to state 138

    term_aux                       shift and go to state 136

state 91

    (97) factor -> NOT factor_aux .

    TIMES           reduce using rule 97 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 97 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 97 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 97 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 97 (factor -> NOT factor_aux .)
    EQUALS          reduce using rule 97 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 97 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 97 (factor -> NOT factor_aux .)
    LESS            reduce using rule 97 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 97 (factor -> NOT factor_aux .)
    OR              reduce using rule 97 (factor -> NOT factor_aux .)
    AND             reduce using rule 97 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 97 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 97 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 97 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 97 (factor -> NOT factor_aux .)


state 92

    (99) factor_aux -> L_PARENS expression . R_PARENS

    R_PARENS        shift and go to state 139


state 93

    (100) factor_aux -> PLUS const .

    TIMES           reduce using rule 100 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 100 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 100 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 100 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 100 (factor_aux -> PLUS const .)
    EQUALS          reduce using rule 100 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 100 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 100 (factor_aux -> PLUS const .)
    LESS            reduce using rule 100 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 100 (factor_aux -> PLUS const .)
    OR              reduce using rule 100 (factor_aux -> PLUS const .)
    AND             reduce using rule 100 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 100 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 100 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 100 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 100 (factor_aux -> PLUS const .)


state 94

    (101) factor_aux -> MINUS const .

    TIMES           reduce using rule 101 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 101 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 101 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 101 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 101 (factor_aux -> MINUS const .)
    EQUALS          reduce using rule 101 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 101 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 101 (factor_aux -> MINUS const .)
    LESS            reduce using rule 101 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 101 (factor_aux -> MINUS const .)
    OR              reduce using rule 101 (factor_aux -> MINUS const .)
    AND             reduce using rule 101 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 101 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 101 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 101 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 101 (factor_aux -> MINUS const .)


state 95

    (103) const -> ID n_add_operand .

    TIMES           reduce using rule 103 (const -> ID n_add_operand .)
    DIVIDE          reduce using rule 103 (const -> ID n_add_operand .)
    PLUS            reduce using rule 103 (const -> ID n_add_operand .)
    MINUS           reduce using rule 103 (const -> ID n_add_operand .)
    NOT_EQUAL       reduce using rule 103 (const -> ID n_add_operand .)
    EQUALS          reduce using rule 103 (const -> ID n_add_operand .)
    GREATER         reduce using rule 103 (const -> ID n_add_operand .)
    GREATER_EQ      reduce using rule 103 (const -> ID n_add_operand .)
    LESS            reduce using rule 103 (const -> ID n_add_operand .)
    LESS_EQ         reduce using rule 103 (const -> ID n_add_operand .)
    OR              reduce using rule 103 (const -> ID n_add_operand .)
    AND             reduce using rule 103 (const -> ID n_add_operand .)
    SEMICOLON       reduce using rule 103 (const -> ID n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 103 (const -> ID n_add_operand .)
    R_PARENS        reduce using rule 103 (const -> ID n_add_operand .)
    COMMA           reduce using rule 103 (const -> ID n_add_operand .)


state 96

    (109) array_access -> ID array_index .

    TIMES           reduce using rule 109 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 109 (array_access -> ID array_index .)
    PLUS            reduce using rule 109 (array_access -> ID array_index .)
    MINUS           reduce using rule 109 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 109 (array_access -> ID array_index .)
    EQUALS          reduce using rule 109 (array_access -> ID array_index .)
    GREATER         reduce using rule 109 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 109 (array_access -> ID array_index .)
    LESS            reduce using rule 109 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 109 (array_access -> ID array_index .)
    OR              reduce using rule 109 (array_access -> ID array_index .)
    AND             reduce using rule 109 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 109 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 109 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 109 (array_access -> ID array_index .)
    COMMA           reduce using rule 109 (array_access -> ID array_index .)


state 97

    (104) const -> CONST_I n_add_operand .

    TIMES           reduce using rule 104 (const -> CONST_I n_add_operand .)
    DIVIDE          reduce using rule 104 (const -> CONST_I n_add_operand .)
    PLUS            reduce using rule 104 (const -> CONST_I n_add_operand .)
    MINUS           reduce using rule 104 (const -> CONST_I n_add_operand .)
    NOT_EQUAL       reduce using rule 104 (const -> CONST_I n_add_operand .)
    EQUALS          reduce using rule 104 (const -> CONST_I n_add_operand .)
    GREATER         reduce using rule 104 (const -> CONST_I n_add_operand .)
    GREATER_EQ      reduce using rule 104 (const -> CONST_I n_add_operand .)
    LESS            reduce using rule 104 (const -> CONST_I n_add_operand .)
    LESS_EQ         reduce using rule 104 (const -> CONST_I n_add_operand .)
    OR              reduce using rule 104 (const -> CONST_I n_add_operand .)
    AND             reduce using rule 104 (const -> CONST_I n_add_operand .)
    SEMICOLON       reduce using rule 104 (const -> CONST_I n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 104 (const -> CONST_I n_add_operand .)
    R_PARENS        reduce using rule 104 (const -> CONST_I n_add_operand .)
    COMMA           reduce using rule 104 (const -> CONST_I n_add_operand .)


state 98

    (105) const -> CONST_F n_add_operand .

    TIMES           reduce using rule 105 (const -> CONST_F n_add_operand .)
    DIVIDE          reduce using rule 105 (const -> CONST_F n_add_operand .)
    PLUS            reduce using rule 105 (const -> CONST_F n_add_operand .)
    MINUS           reduce using rule 105 (const -> CONST_F n_add_operand .)
    NOT_EQUAL       reduce using rule 105 (const -> CONST_F n_add_operand .)
    EQUALS          reduce using rule 105 (const -> CONST_F n_add_operand .)
    GREATER         reduce using rule 105 (const -> CONST_F n_add_operand .)
    GREATER_EQ      reduce using rule 105 (const -> CONST_F n_add_operand .)
    LESS            reduce using rule 105 (const -> CONST_F n_add_operand .)
    LESS_EQ         reduce using rule 105 (const -> CONST_F n_add_operand .)
    OR              reduce using rule 105 (const -> CONST_F n_add_operand .)
    AND             reduce using rule 105 (const -> CONST_F n_add_operand .)
    SEMICOLON       reduce using rule 105 (const -> CONST_F n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 105 (const -> CONST_F n_add_operand .)
    R_PARENS        reduce using rule 105 (const -> CONST_F n_add_operand .)
    COMMA           reduce using rule 105 (const -> CONST_F n_add_operand .)


state 99

    (106) const -> CONST_STRING n_add_operand .

    TIMES           reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    DIVIDE          reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    PLUS            reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    MINUS           reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    NOT_EQUAL       reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    EQUALS          reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    GREATER         reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    GREATER_EQ      reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    LESS            reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    LESS_EQ         reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    OR              reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    AND             reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    SEMICOLON       reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    R_SQUARE_BRACKET reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    R_PARENS        reduce using rule 106 (const -> CONST_STRING n_add_operand .)
    COMMA           reduce using rule 106 (const -> CONST_STRING n_add_operand .)


state 100

    (60) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 140


state 101

    (61) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 61 (print -> PRINT L_PARENS R_PARENS .)


state 102

    (62) print_aux -> CONST_STRING . COMMA print_aux
    (63) print_aux -> CONST_STRING .

    COMMA           shift and go to state 141
    R_PARENS        reduce using rule 63 (print_aux -> CONST_STRING .)


state 103

    (64) print_aux -> ID . COMMA print_aux
    (65) print_aux -> ID .

    COMMA           shift and go to state 142
    R_PARENS        reduce using rule 65 (print_aux -> ID .)


state 104

    (52) if -> IF L_PARENS expression . R_PARENS block elif else
    (53) if -> IF L_PARENS expression . R_PARENS block elif
    (54) if -> IF L_PARENS expression . R_PARENS block else
    (55) if -> IF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 143


state 105

    (59) while -> WHILE L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 144


state 106

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . type
    (20) function_type -> . VOID
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    VOID            shift and go to state 109
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    function_type                  shift and go to state 145
    type                           shift and go to state 108

state 107

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type .)


state 108

    (19) function_type -> type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> type .)


state 109

    (20) function_type -> VOID .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> VOID .)


state 110

    (15) function_params -> type ID array_index . COMMA function_params
    (16) function_params -> type ID array_index .

    COMMA           shift and go to state 146
    R_PARENS        reduce using rule 16 (function_params -> type ID array_index .)


state 111

    (17) function_params -> type ID COMMA . function_params
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    type                           shift and go to state 40
    function_params                shift and go to state 147

state 112

    (21) var -> type_aux ID n_var_name array_dim . var_aux SEMICOLON
    (22) var -> type_aux ID n_var_name array_dim . SEMICOLON
    (27) var_aux -> . COMMA ID array_dim var_aux
    (28) var_aux -> . COMMA ID array_dim
    (29) var_aux -> . COMMA ID var_aux
    (30) var_aux -> . COMMA ID

    SEMICOLON       shift and go to state 149
    COMMA           shift and go to state 116

    var_aux                        shift and go to state 148

state 113

    (23) var -> type_aux ID n_var_name var_aux . SEMICOLON

    SEMICOLON       shift and go to state 150


state 114

    (24) var -> type_aux ID n_var_name SEMICOLON .

    GLOBAL          reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    INT             reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    FLOAT           reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    STRING          reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    ID              reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    PRINT           reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    IF              reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type_aux ID n_var_name SEMICOLON .)


state 115

    (44) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 151


state 116

    (27) var_aux -> COMMA . ID array_dim var_aux
    (28) var_aux -> COMMA . ID array_dim
    (29) var_aux -> COMMA . ID var_aux
    (30) var_aux -> COMMA . ID

    ID              shift and go to state 152


state 117

    (46) assignment -> ID array_index ASSIGN expression .

    SEMICOLON       reduce using rule 46 (assignment -> ID array_index ASSIGN expression .)


state 118

    (47) assignment -> ID array_index ASSIGN read .

    SEMICOLON       reduce using rule 47 (assignment -> ID array_index ASSIGN read .)


state 119

    (68) read -> READ ID .

    SEMICOLON       reduce using rule 68 (read -> READ ID .)


state 120

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (43) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 153
    ASSIGN          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 43 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 121

    (69) params_pass -> L_PARENS expression params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 154


state 122

    (70) params_pass -> L_PARENS expression R_PARENS .

    SEMICOLON       reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    TIMES           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    EQUALS          reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 70 (params_pass -> L_PARENS expression R_PARENS .)


state 123

    (72) params_pass_aux -> COMMA . expression params_pass_aux
    (73) params_pass_aux -> COMMA . expression
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 155
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 124

    (66) expression -> exp n_eval_exp AND . n_add_operator expression
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 156

state 125

    (75) exp -> xp n_eval_xp OR . n_add_operator exp
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 157

state 126

    (77) xp -> x n_eval_x log_op . n_add_operator x
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 158

state 127

    (85) log_op -> NOT_EQUAL .

    NOT             reduce using rule 85 (log_op -> NOT_EQUAL .)
    L_PARENS        reduce using rule 85 (log_op -> NOT_EQUAL .)
    PLUS            reduce using rule 85 (log_op -> NOT_EQUAL .)
    MINUS           reduce using rule 85 (log_op -> NOT_EQUAL .)
    ID              reduce using rule 85 (log_op -> NOT_EQUAL .)
    CONST_I         reduce using rule 85 (log_op -> NOT_EQUAL .)
    CONST_F         reduce using rule 85 (log_op -> NOT_EQUAL .)
    CONST_STRING    reduce using rule 85 (log_op -> NOT_EQUAL .)


state 128

    (86) log_op -> EQUALS .

    NOT             reduce using rule 86 (log_op -> EQUALS .)
    L_PARENS        reduce using rule 86 (log_op -> EQUALS .)
    PLUS            reduce using rule 86 (log_op -> EQUALS .)
    MINUS           reduce using rule 86 (log_op -> EQUALS .)
    ID              reduce using rule 86 (log_op -> EQUALS .)
    CONST_I         reduce using rule 86 (log_op -> EQUALS .)
    CONST_F         reduce using rule 86 (log_op -> EQUALS .)
    CONST_STRING    reduce using rule 86 (log_op -> EQUALS .)


state 129

    (87) log_op -> GREATER .

    NOT             reduce using rule 87 (log_op -> GREATER .)
    L_PARENS        reduce using rule 87 (log_op -> GREATER .)
    PLUS            reduce using rule 87 (log_op -> GREATER .)
    MINUS           reduce using rule 87 (log_op -> GREATER .)
    ID              reduce using rule 87 (log_op -> GREATER .)
    CONST_I         reduce using rule 87 (log_op -> GREATER .)
    CONST_F         reduce using rule 87 (log_op -> GREATER .)
    CONST_STRING    reduce using rule 87 (log_op -> GREATER .)


state 130

    (88) log_op -> GREATER_EQ .

    NOT             reduce using rule 88 (log_op -> GREATER_EQ .)
    L_PARENS        reduce using rule 88 (log_op -> GREATER_EQ .)
    PLUS            reduce using rule 88 (log_op -> GREATER_EQ .)
    MINUS           reduce using rule 88 (log_op -> GREATER_EQ .)
    ID              reduce using rule 88 (log_op -> GREATER_EQ .)
    CONST_I         reduce using rule 88 (log_op -> GREATER_EQ .)
    CONST_F         reduce using rule 88 (log_op -> GREATER_EQ .)
    CONST_STRING    reduce using rule 88 (log_op -> GREATER_EQ .)


state 131

    (89) log_op -> LESS .

    NOT             reduce using rule 89 (log_op -> LESS .)
    L_PARENS        reduce using rule 89 (log_op -> LESS .)
    PLUS            reduce using rule 89 (log_op -> LESS .)
    MINUS           reduce using rule 89 (log_op -> LESS .)
    ID              reduce using rule 89 (log_op -> LESS .)
    CONST_I         reduce using rule 89 (log_op -> LESS .)
    CONST_F         reduce using rule 89 (log_op -> LESS .)
    CONST_STRING    reduce using rule 89 (log_op -> LESS .)


state 132

    (90) log_op -> LESS_EQ .

    NOT             reduce using rule 90 (log_op -> LESS_EQ .)
    L_PARENS        reduce using rule 90 (log_op -> LESS_EQ .)
    PLUS            reduce using rule 90 (log_op -> LESS_EQ .)
    MINUS           reduce using rule 90 (log_op -> LESS_EQ .)
    ID              reduce using rule 90 (log_op -> LESS_EQ .)
    CONST_I         reduce using rule 90 (log_op -> LESS_EQ .)
    CONST_F         reduce using rule 90 (log_op -> LESS_EQ .)
    CONST_STRING    reduce using rule 90 (log_op -> LESS_EQ .)


state 133

    (79) x -> term n_eval_term x_aux .

    NOT_EQUAL       reduce using rule 79 (x -> term n_eval_term x_aux .)
    EQUALS          reduce using rule 79 (x -> term n_eval_term x_aux .)
    GREATER         reduce using rule 79 (x -> term n_eval_term x_aux .)
    GREATER_EQ      reduce using rule 79 (x -> term n_eval_term x_aux .)
    LESS            reduce using rule 79 (x -> term n_eval_term x_aux .)
    LESS_EQ         reduce using rule 79 (x -> term n_eval_term x_aux .)
    OR              reduce using rule 79 (x -> term n_eval_term x_aux .)
    AND             reduce using rule 79 (x -> term n_eval_term x_aux .)
    SEMICOLON       reduce using rule 79 (x -> term n_eval_term x_aux .)
    R_SQUARE_BRACKET reduce using rule 79 (x -> term n_eval_term x_aux .)
    R_PARENS        reduce using rule 79 (x -> term n_eval_term x_aux .)
    COMMA           reduce using rule 79 (x -> term n_eval_term x_aux .)


state 134

    (81) x_aux -> PLUS . n_add_operator term x_aux
    (82) x_aux -> PLUS . n_add_operator term
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 159

state 135

    (83) x_aux -> MINUS . n_add_operator term x_aux
    (84) x_aux -> MINUS . n_add_operator term
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 160

state 136

    (91) term -> factor n_eval_factor term_aux .

    PLUS            reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    MINUS           reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    NOT_EQUAL       reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    EQUALS          reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    GREATER         reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    GREATER_EQ      reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    LESS            reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    LESS_EQ         reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    OR              reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    AND             reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    SEMICOLON       reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    R_PARENS        reduce using rule 91 (term -> factor n_eval_factor term_aux .)
    COMMA           reduce using rule 91 (term -> factor n_eval_factor term_aux .)


state 137

    (93) term_aux -> TIMES . n_add_operator factor term_aux
    (94) term_aux -> TIMES . n_add_operator factor
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 161

state 138

    (95) term_aux -> DIVIDE . n_add_operator factor term_aux
    (96) term_aux -> DIVIDE . n_add_operator factor
    (117) n_add_operator -> .

    NOT             reduce using rule 117 (n_add_operator -> .)
    L_PARENS        reduce using rule 117 (n_add_operator -> .)
    PLUS            reduce using rule 117 (n_add_operator -> .)
    MINUS           reduce using rule 117 (n_add_operator -> .)
    ID              reduce using rule 117 (n_add_operator -> .)
    CONST_I         reduce using rule 117 (n_add_operator -> .)
    CONST_F         reduce using rule 117 (n_add_operator -> .)
    CONST_STRING    reduce using rule 117 (n_add_operator -> .)

    n_add_operator                 shift and go to state 162

state 139

    (99) factor_aux -> L_PARENS expression R_PARENS .

    TIMES           reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    EQUALS          reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    SEMICOLON       reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 99 (factor_aux -> L_PARENS expression R_PARENS .)


state 140

    (60) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 60 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 141

    (62) print_aux -> CONST_STRING COMMA . print_aux
    (62) print_aux -> . CONST_STRING COMMA print_aux
    (63) print_aux -> . CONST_STRING
    (64) print_aux -> . ID COMMA print_aux
    (65) print_aux -> . ID

    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 163

state 142

    (64) print_aux -> ID COMMA . print_aux
    (62) print_aux -> . CONST_STRING COMMA print_aux
    (63) print_aux -> . CONST_STRING
    (64) print_aux -> . ID COMMA print_aux
    (65) print_aux -> . ID

    CONST_STRING    shift and go to state 102
    ID              shift and go to state 103

    print_aux                      shift and go to state 164

state 143

    (52) if -> IF L_PARENS expression R_PARENS . block elif else
    (53) if -> IF L_PARENS expression R_PARENS . block elif
    (54) if -> IF L_PARENS expression R_PARENS . block else
    (55) if -> IF L_PARENS expression R_PARENS . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 166

    block                          shift and go to state 165

state 144

    (59) while -> WHILE L_PARENS expression R_PARENS . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 166

    block                          shift and go to state 167

state 145

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type .)


state 146

    (15) function_params -> type ID array_index COMMA . function_params
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (39) type -> . INT
    (40) type -> . FLOAT
    (41) type -> . STRING

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    STRING          shift and go to state 33

    type                           shift and go to state 40
    function_params                shift and go to state 168

state 147

    (17) function_params -> type ID COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID COMMA function_params .)


state 148

    (21) var -> type_aux ID n_var_name array_dim var_aux . SEMICOLON

    SEMICOLON       shift and go to state 169


state 149

    (22) var -> type_aux ID n_var_name array_dim SEMICOLON .

    GLOBAL          reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    INT             reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    FLOAT           reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    STRING          reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    ID              reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    RETURN          reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    PRINT           reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    IF              reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)
    WHILE           reduce using rule 22 (var -> type_aux ID n_var_name array_dim SEMICOLON .)


state 150

    (23) var -> type_aux ID n_var_name var_aux SEMICOLON .

    GLOBAL          reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    INT             reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type_aux ID n_var_name var_aux SEMICOLON .)


state 151

    (44) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 170


state 152

    (27) var_aux -> COMMA ID . array_dim var_aux
    (28) var_aux -> COMMA ID . array_dim
    (29) var_aux -> COMMA ID . var_aux
    (30) var_aux -> COMMA ID .
    (44) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (27) var_aux -> . COMMA ID array_dim var_aux
    (28) var_aux -> . COMMA ID array_dim
    (29) var_aux -> . COMMA ID var_aux
    (30) var_aux -> . COMMA ID

    SEMICOLON       reduce using rule 30 (var_aux -> COMMA ID .)
    L_SQUARE_BRACKET shift and go to state 115
    COMMA           shift and go to state 116

    array_dim                      shift and go to state 171
    var_aux                        shift and go to state 172

state 153

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 173
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 154

    (69) params_pass -> L_PARENS expression params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    TIMES           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    PLUS            reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    MINUS           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    EQUALS          reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER         reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS            reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    OR              reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    AND             reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    COMMA           reduce using rule 69 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)


state 155

    (72) params_pass_aux -> COMMA expression . params_pass_aux
    (73) params_pass_aux -> COMMA expression .
    (72) params_pass_aux -> . COMMA expression params_pass_aux
    (73) params_pass_aux -> . COMMA expression

    R_PARENS        reduce using rule 73 (params_pass_aux -> COMMA expression .)
    COMMA           shift and go to state 123

    params_pass_aux                shift and go to state 174

state 156

    (66) expression -> exp n_eval_exp AND n_add_operator . expression
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    exp                            shift and go to state 54
    expression                     shift and go to state 175
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 157

    (75) exp -> xp n_eval_xp OR n_add_operator . exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    xp                             shift and go to state 55
    exp                            shift and go to state 176
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 158

    (77) xp -> x n_eval_x log_op n_add_operator . x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    x                              shift and go to state 177
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 159

    (81) x_aux -> PLUS n_add_operator . term x_aux
    (82) x_aux -> PLUS n_add_operator . term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    term                           shift and go to state 178
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 160

    (83) x_aux -> MINUS n_add_operator . term x_aux
    (84) x_aux -> MINUS n_add_operator . term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    term                           shift and go to state 179
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 161

    (93) term_aux -> TIMES n_add_operator . factor term_aux
    (94) term_aux -> TIMES n_add_operator . factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor                         shift and go to state 180
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 162

    (95) term_aux -> DIVIDE n_add_operator . factor term_aux
    (96) term_aux -> DIVIDE n_add_operator . factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    factor                         shift and go to state 181
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 163

    (62) print_aux -> CONST_STRING COMMA print_aux .

    R_PARENS        reduce using rule 62 (print_aux -> CONST_STRING COMMA print_aux .)


state 164

    (64) print_aux -> ID COMMA print_aux .

    R_PARENS        reduce using rule 64 (print_aux -> ID COMMA print_aux .)


state 165

    (52) if -> IF L_PARENS expression R_PARENS block . elif else
    (53) if -> IF L_PARENS expression R_PARENS block . elif
    (54) if -> IF L_PARENS expression R_PARENS block . else
    (55) if -> IF L_PARENS expression R_PARENS block .
    (56) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (57) elif -> . ELIF L_PARENS expression R_PARENS block
    (58) else -> . ELSE block

    ID              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 55 (if -> IF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 184
    ELSE            shift and go to state 185

    elif                           shift and go to state 182
    else                           shift and go to state 183

state 166

    (74) block -> L_KEY_BRACKET . statements R_KEY_BRACKET
    (13) statements -> . statement statements
    (14) statements -> . statement
    (31) statement -> . statement_aux SEMICOLON
    (32) statement -> . statement_aux_2
    (33) statement_aux -> . assignment
    (34) statement_aux -> . function_call
    (35) statement_aux -> . return
    (36) statement_aux -> . print
    (37) statement_aux_2 -> . if
    (38) statement_aux_2 -> . while
    (46) assignment -> . ID array_index ASSIGN expression
    (47) assignment -> . ID array_index ASSIGN read
    (48) assignment -> . ID ASSIGN expression
    (49) assignment -> . ID ASSIGN read
    (50) function_call -> . ID params_pass
    (51) return -> . RETURN expression
    (60) print -> . PRINT L_PARENS print_aux R_PARENS
    (61) print -> . PRINT L_PARENS R_PARENS
    (52) if -> . IF L_PARENS expression R_PARENS block elif else
    (53) if -> . IF L_PARENS expression R_PARENS block elif
    (54) if -> . IF L_PARENS expression R_PARENS block else
    (55) if -> . IF L_PARENS expression R_PARENS block
    (59) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 20
    RETURN          shift and go to state 34
    PRINT           shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37

    statements                     shift and go to state 186
    statement                      shift and go to state 18
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 25
    function_call                  shift and go to state 26
    return                         shift and go to state 27
    print                          shift and go to state 28
    if                             shift and go to state 29
    while                          shift and go to state 30

state 167

    (59) while -> WHILE L_PARENS expression R_PARENS block .

    ID              reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)
    IF              reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 59 (while -> WHILE L_PARENS expression R_PARENS block .)


state 168

    (15) function_params -> type ID array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID array_index COMMA function_params .)


state 169

    (21) var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .

    GLOBAL          reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    INT             reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    FLOAT           reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    STRING          reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    ID              reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    RETURN          reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    PRINT           reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    IF              reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)
    WHILE           reduce using rule 21 (var -> type_aux ID n_var_name array_dim var_aux SEMICOLON .)


state 170

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (45) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 187
    SEMICOLON       reduce using rule 45 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 45 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 171

    (27) var_aux -> COMMA ID array_dim . var_aux
    (28) var_aux -> COMMA ID array_dim .
    (27) var_aux -> . COMMA ID array_dim var_aux
    (28) var_aux -> . COMMA ID array_dim
    (29) var_aux -> . COMMA ID var_aux
    (30) var_aux -> . COMMA ID

    SEMICOLON       reduce using rule 28 (var_aux -> COMMA ID array_dim .)
    COMMA           shift and go to state 116

    var_aux                        shift and go to state 188

state 172

    (29) var_aux -> COMMA ID var_aux .

    SEMICOLON       reduce using rule 29 (var_aux -> COMMA ID var_aux .)


state 173

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 189


state 174

    (72) params_pass_aux -> COMMA expression params_pass_aux .

    R_PARENS        reduce using rule 72 (params_pass_aux -> COMMA expression params_pass_aux .)


state 175

    (66) expression -> exp n_eval_exp AND n_add_operator expression .

    SEMICOLON       reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_SQUARE_BRACKET reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    R_PARENS        reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)
    COMMA           reduce using rule 66 (expression -> exp n_eval_exp AND n_add_operator expression .)


state 176

    (75) exp -> xp n_eval_xp OR n_add_operator exp .

    AND             reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    SEMICOLON       reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_SQUARE_BRACKET reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    R_PARENS        reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)
    COMMA           reduce using rule 75 (exp -> xp n_eval_xp OR n_add_operator exp .)


state 177

    (77) xp -> x n_eval_x log_op n_add_operator x .

    OR              reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)
    AND             reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)
    SEMICOLON       reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)
    R_SQUARE_BRACKET reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)
    R_PARENS        reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)
    COMMA           reduce using rule 77 (xp -> x n_eval_x log_op n_add_operator x .)


state 178

    (81) x_aux -> PLUS n_add_operator term . x_aux
    (82) x_aux -> PLUS n_add_operator term .
    (81) x_aux -> . PLUS n_add_operator term x_aux
    (82) x_aux -> . PLUS n_add_operator term
    (83) x_aux -> . MINUS n_add_operator term x_aux
    (84) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    EQUALS          reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    GREATER         reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    GREATER_EQ      reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    LESS            reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    LESS_EQ         reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    OR              reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    AND             reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    SEMICOLON       reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    R_PARENS        reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    COMMA           reduce using rule 82 (x_aux -> PLUS n_add_operator term .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

    x_aux                          shift and go to state 190

state 179

    (83) x_aux -> MINUS n_add_operator term . x_aux
    (84) x_aux -> MINUS n_add_operator term .
    (81) x_aux -> . PLUS n_add_operator term x_aux
    (82) x_aux -> . PLUS n_add_operator term
    (83) x_aux -> . MINUS n_add_operator term x_aux
    (84) x_aux -> . MINUS n_add_operator term

    NOT_EQUAL       reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    EQUALS          reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    GREATER         reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    GREATER_EQ      reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    LESS            reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    LESS_EQ         reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    OR              reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    AND             reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    SEMICOLON       reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    R_SQUARE_BRACKET reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    R_PARENS        reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    COMMA           reduce using rule 84 (x_aux -> MINUS n_add_operator term .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135

    x_aux                          shift and go to state 191

state 180

    (93) term_aux -> TIMES n_add_operator factor . term_aux
    (94) term_aux -> TIMES n_add_operator factor .
    (93) term_aux -> . TIMES n_add_operator factor term_aux
    (94) term_aux -> . TIMES n_add_operator factor
    (95) term_aux -> . DIVIDE n_add_operator factor term_aux
    (96) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    MINUS           reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    NOT_EQUAL       reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    EQUALS          reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    GREATER         reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    GREATER_EQ      reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    LESS            reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    LESS_EQ         reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    OR              reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    AND             reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    SEMICOLON       reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    R_SQUARE_BRACKET reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    R_PARENS        reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    COMMA           reduce using rule 94 (term_aux -> TIMES n_add_operator factor .)
    TIMES           shift and go to state 137
    DIVIDE          shift and go to state 138

    term_aux                       shift and go to state 192

state 181

    (95) term_aux -> DIVIDE n_add_operator factor . term_aux
    (96) term_aux -> DIVIDE n_add_operator factor .
    (93) term_aux -> . TIMES n_add_operator factor term_aux
    (94) term_aux -> . TIMES n_add_operator factor
    (95) term_aux -> . DIVIDE n_add_operator factor term_aux
    (96) term_aux -> . DIVIDE n_add_operator factor

    PLUS            reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    MINUS           reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    NOT_EQUAL       reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    EQUALS          reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    GREATER         reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    GREATER_EQ      reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    LESS            reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    LESS_EQ         reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    OR              reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    AND             reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    SEMICOLON       reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    R_SQUARE_BRACKET reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    R_PARENS        reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    COMMA           reduce using rule 96 (term_aux -> DIVIDE n_add_operator factor .)
    TIMES           shift and go to state 137
    DIVIDE          shift and go to state 138

    term_aux                       shift and go to state 193

state 182

    (52) if -> IF L_PARENS expression R_PARENS block elif . else
    (53) if -> IF L_PARENS expression R_PARENS block elif .
    (58) else -> . ELSE block

    ID              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block elif .)
    ELSE            shift and go to state 185

    else                           shift and go to state 194

state 183

    (54) if -> IF L_PARENS expression R_PARENS block else .

    ID              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)
    RETURN          reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)
    PRINT           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)
    IF              reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)
    WHILE           reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)
    R_KEY_BRACKET   reduce using rule 54 (if -> IF L_PARENS expression R_PARENS block else .)


state 184

    (56) elif -> ELIF . L_PARENS expression R_PARENS block elif
    (57) elif -> ELIF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 195


state 185

    (58) else -> ELSE . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 166

    block                          shift and go to state 196

state 186

    (74) block -> L_KEY_BRACKET statements . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 197


state 187

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 198


state 188

    (27) var_aux -> COMMA ID array_dim var_aux .

    SEMICOLON       reduce using rule 27 (var_aux -> COMMA ID array_dim var_aux .)


state 189

    (42) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    ASSIGN          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    EQUALS          reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 42 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 190

    (81) x_aux -> PLUS n_add_operator term x_aux .

    NOT_EQUAL       reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    EQUALS          reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    GREATER         reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    GREATER_EQ      reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    LESS            reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    LESS_EQ         reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    OR              reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    AND             reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    SEMICOLON       reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    R_SQUARE_BRACKET reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    R_PARENS        reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)
    COMMA           reduce using rule 81 (x_aux -> PLUS n_add_operator term x_aux .)


state 191

    (83) x_aux -> MINUS n_add_operator term x_aux .

    NOT_EQUAL       reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    EQUALS          reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    GREATER         reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    GREATER_EQ      reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    LESS            reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    LESS_EQ         reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    OR              reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    AND             reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    SEMICOLON       reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    R_SQUARE_BRACKET reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    R_PARENS        reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)
    COMMA           reduce using rule 83 (x_aux -> MINUS n_add_operator term x_aux .)


state 192

    (93) term_aux -> TIMES n_add_operator factor term_aux .

    PLUS            reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    MINUS           reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    NOT_EQUAL       reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    EQUALS          reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    GREATER         reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    GREATER_EQ      reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    LESS            reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    LESS_EQ         reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    OR              reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    AND             reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    SEMICOLON       reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    R_PARENS        reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)
    COMMA           reduce using rule 93 (term_aux -> TIMES n_add_operator factor term_aux .)


state 193

    (95) term_aux -> DIVIDE n_add_operator factor term_aux .

    PLUS            reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    MINUS           reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    NOT_EQUAL       reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    EQUALS          reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    GREATER         reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    GREATER_EQ      reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    LESS            reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    LESS_EQ         reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    OR              reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    AND             reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    SEMICOLON       reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    R_PARENS        reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)
    COMMA           reduce using rule 95 (term_aux -> DIVIDE n_add_operator factor term_aux .)


state 194

    (52) if -> IF L_PARENS expression R_PARENS block elif else .

    ID              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)
    RETURN          reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)
    PRINT           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)
    IF              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)
    WHILE           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)
    R_KEY_BRACKET   reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block elif else .)


state 195

    (56) elif -> ELIF L_PARENS . expression R_PARENS block elif
    (57) elif -> ELIF L_PARENS . expression R_PARENS block
    (66) expression -> . exp n_eval_exp AND n_add_operator expression
    (67) expression -> . exp n_eval_exp
    (75) exp -> . xp n_eval_xp OR n_add_operator exp
    (76) exp -> . xp n_eval_xp
    (77) xp -> . x n_eval_x log_op n_add_operator x
    (78) xp -> . x n_eval_x
    (79) x -> . term n_eval_term x_aux
    (80) x -> . term n_eval_term
    (91) term -> . factor n_eval_factor term_aux
    (92) term -> . factor n_eval_factor
    (97) factor -> . NOT factor_aux
    (98) factor -> . factor_aux
    (99) factor_aux -> . L_PARENS expression R_PARENS
    (100) factor_aux -> . PLUS const
    (101) factor_aux -> . MINUS const
    (102) factor_aux -> . const
    (103) const -> . ID n_add_operand
    (104) const -> . CONST_I n_add_operand
    (105) const -> . CONST_F n_add_operand
    (106) const -> . CONST_STRING n_add_operand
    (107) const -> . function_call
    (108) const -> . array_access
    (50) function_call -> . ID params_pass
    (109) array_access -> . ID array_index

    NOT             shift and go to state 59
    L_PARENS        shift and go to state 61
    PLUS            shift and go to state 62
    MINUS           shift and go to state 64
    ID              shift and go to state 65
    CONST_I         shift and go to state 66
    CONST_F         shift and go to state 67
    CONST_STRING    shift and go to state 68

    expression                     shift and go to state 199
    exp                            shift and go to state 54
    xp                             shift and go to state 55
    x                              shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58
    factor_aux                     shift and go to state 60
    const                          shift and go to state 63
    function_call                  shift and go to state 69
    array_access                   shift and go to state 70

state 196

    (58) else -> ELSE block .

    ID              reduce using rule 58 (else -> ELSE block .)
    RETURN          reduce using rule 58 (else -> ELSE block .)
    PRINT           reduce using rule 58 (else -> ELSE block .)
    IF              reduce using rule 58 (else -> ELSE block .)
    WHILE           reduce using rule 58 (else -> ELSE block .)
    R_KEY_BRACKET   reduce using rule 58 (else -> ELSE block .)


state 197

    (74) block -> L_KEY_BRACKET statements R_KEY_BRACKET .

    ELIF            reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ELSE            reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    ID              reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    RETURN          reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    PRINT           reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    IF              reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    WHILE           reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 74 (block -> L_KEY_BRACKET statements R_KEY_BRACKET .)


state 198

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 200


state 199

    (56) elif -> ELIF L_PARENS expression . R_PARENS block elif
    (57) elif -> ELIF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 201


state 200

    (44) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 44 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 44 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 201

    (56) elif -> ELIF L_PARENS expression R_PARENS . block elif
    (57) elif -> ELIF L_PARENS expression R_PARENS . block
    (74) block -> . L_KEY_BRACKET statements R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 166

    block                          shift and go to state 202

state 202

    (56) elif -> ELIF L_PARENS expression R_PARENS block . elif
    (57) elif -> ELIF L_PARENS expression R_PARENS block .
    (56) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (57) elif -> . ELIF L_PARENS expression R_PARENS block

    ELSE            reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ID              reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 57 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 184

    elif                           shift and go to state 203

state 203

    (56) elif -> ELIF L_PARENS expression R_PARENS block elif .

    ELSE            reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    ID              reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 56 (elif -> ELIF L_PARENS expression R_PARENS block elif .)

