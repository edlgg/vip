Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_aux main
Rule 2     program -> main
Rule 3     program_aux -> program_aux function
Rule 4     program_aux -> function
Rule 5     function -> function_header function_body
Rule 6     main -> FUNCTION MAIN function_body
Rule 7     function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
Rule 8     function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type
Rule 9     function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET
Rule 10    function_body -> L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET
Rule 11    function_body_aux -> var function_body_aux
Rule 12    function_body_aux -> var
Rule 13    function_body_aux_2 -> statement function_body_aux_2
Rule 14    function_body_aux_2 -> statement
Rule 15    function_params -> type ID array_index COMMA function_params
Rule 16    function_params -> type ID array_index
Rule 17    function_params -> type ID COMMA function_params
Rule 18    function_params -> type ID
Rule 19    function_type -> type
Rule 20    function_type -> VOID
Rule 21    var -> type ID array_dim var_aux SEMICOLON
Rule 22    var -> type ID array_dim SEMICOLON
Rule 23    var -> type ID var_aux SEMICOLON
Rule 24    var -> type ID SEMICOLON
Rule 25    var_aux -> COMMA ID array_dim var_aux
Rule 26    var_aux -> COMMA ID array_dim
Rule 27    var_aux -> COMMA ID var_aux
Rule 28    var_aux -> COMMA ID
Rule 29    statement -> statement_aux SEMICOLON
Rule 30    statement -> statement_aux_2
Rule 31    statement_aux -> assignment
Rule 32    statement_aux -> function_call
Rule 33    statement_aux -> return
Rule 34    statement_aux -> print
Rule 35    statement_aux_2 -> if
Rule 36    statement_aux_2 -> while
Rule 37    type -> INT
Rule 38    type -> FLOAT
Rule 39    type -> STRING
Rule 40    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 41    array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET
Rule 42    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 43    array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
Rule 44    assignment -> ID array_index EQUALS expression
Rule 45    assignment -> ID array_index EQUALS read
Rule 46    assignment -> ID EQUALS expression
Rule 47    assignment -> ID EQUALS read
Rule 48    function_call -> ID params_pass
Rule 49    return -> RETURN expression
Rule 50    if -> IF L_PARENS expression R_PARENS block elif else
Rule 51    if -> IF L_PARENS expression R_PARENS block elif
Rule 52    if -> IF L_PARENS expression R_PARENS block else
Rule 53    if -> IF L_PARENS expression R_PARENS block
Rule 54    elif -> ELIF L_PARENS expression R_PARENS block elif
Rule 55    elif -> ELIF L_PARENS expression R_PARENS block
Rule 56    else -> ELSE block
Rule 57    while -> WHILE L_PARENS expression R_PARENS block
Rule 58    print -> PRINT L_PARENS print_aux R_PARENS
Rule 59    print -> PRINT L_PARENS R_PARENS
Rule 60    print_aux -> CONST_STRING COMMA print_aux
Rule 61    print_aux -> CONST_STRING
Rule 62    print_aux -> ID COMMA print_aux
Rule 63    print_aux -> ID
Rule 64    expression -> exp AND expression
Rule 65    expression -> exp
Rule 66    read -> READ ID
Rule 67    params_pass -> L_PARENS expression params_pass_aux R_PARENS
Rule 68    params_pass -> L_PARENS expression R_PARENS
Rule 69    params_pass -> L_PARENS R_PARENS
Rule 70    params_pass_aux -> COMMA expression params_pass_aux
Rule 71    params_pass_aux -> COMMA expression
Rule 72    block -> L_KEY_BRACKET statement R_KEY_BRACKET
Rule 73    exp -> xp OR exp
Rule 74    exp -> xp
Rule 75    xp -> x log_op x
Rule 76    xp -> x
Rule 77    x -> term x_aux
Rule 78    x -> term
Rule 79    x_aux -> PLUS term x_aux
Rule 80    x_aux -> PLUS term
Rule 81    x_aux -> MINUS term x_aux
Rule 82    x_aux -> MINUS term
Rule 83    log_op -> NOT_EQUAL
Rule 84    log_op -> IS_EQUAL
Rule 85    log_op -> GREATER
Rule 86    log_op -> GREATER_EQ
Rule 87    log_op -> LESS
Rule 88    log_op -> LESS_EQ
Rule 89    term -> factor term_aux
Rule 90    term -> factor
Rule 91    term_aux -> TIMES factor term_aux
Rule 92    term_aux -> TIMES factor
Rule 93    term_aux -> DIVIDE factor term_aux
Rule 94    term_aux -> DIVIDE factor
Rule 95    factor -> NOT factor_aux
Rule 96    factor -> factor_aux
Rule 97    factor_aux -> L_PARENS expression R_PARENS
Rule 98    factor_aux -> PLUS const
Rule 99    factor_aux -> MINUS const
Rule 100   factor_aux -> const
Rule 101   const -> ID
Rule 102   const -> CONST_I
Rule 103   const -> CONST_F
Rule 104   const -> CONST_STRING
Rule 105   const -> function_call
Rule 106   const -> array_access
Rule 107   array_access -> ID array_index

Terminals, with rules where they appear

AND                  : 64
COLON                : 7 8
COMMA                : 15 17 25 26 27 28 60 62 70 71
CONST_F              : 103
CONST_I              : 42 42 43 102
CONST_STRING         : 60 61 104
DIVIDE               : 93 94
ELIF                 : 54 55
ELSE                 : 56
EQUALS               : 44 45 46 47
FLOAT                : 38
FUNCTION             : 6 7 8
GREATER              : 85
GREATER_EQ           : 86
ID                   : 7 8 15 16 17 18 21 22 23 24 25 26 27 28 44 45 46 47 48 62 63 66 101 107
IF                   : 50 51 52 53
INT                  : 37
IS_EQUAL             : 84
LESS                 : 87
LESS_EQ              : 88
L_KEY_BRACKET        : 9 10 72
L_PARENS             : 7 8 50 51 52 53 54 55 57 58 59 67 68 69 97
L_SQUARE_BRACKET     : 40 40 41 42 42 43
MAIN                 : 6
MINUS                : 81 82 99
NOT                  : 95
NOT_EQUAL            : 83
OR                   : 73
PLUS                 : 79 80 98
PRINT                : 58 59
READ                 : 66
RETURN               : 49
R_KEY_BRACKET        : 9 10 72
R_PARENS             : 7 8 50 51 52 53 54 55 57 58 59 67 68 69 97
R_SQUARE_BRACKET     : 40 40 41 42 42 43
SEMICOLON            : 21 22 23 24 29
STRING               : 39
TIMES                : 91 92
VOID                 : 20
WHILE                : 57
error                : 

Nonterminals, with rules where they appear

array_access         : 106
array_dim            : 21 22 25 26
array_index          : 15 16 44 45 107
assignment           : 31
block                : 50 51 52 53 54 55 56 57
const                : 98 99 100
elif                 : 50 51 54
else                 : 50 52
exp                  : 64 65 73
expression           : 40 40 41 44 46 49 50 51 52 53 54 55 57 64 67 68 70 71 97
factor               : 89 90 91 92 93 94
factor_aux           : 95 96
function             : 3 4
function_body        : 5 6
function_body_aux    : 9 11
function_body_aux_2  : 9 10 13
function_call        : 32 105
function_header      : 5
function_params      : 7 15 17
function_type        : 7 8
if                   : 35
log_op               : 75
main                 : 1 2
params_pass          : 48
params_pass_aux      : 67 70
print                : 34
print_aux            : 58 60 62
program              : 0
program_aux          : 1 3
read                 : 45 47
return               : 33
statement            : 13 14 72
statement_aux        : 29
statement_aux_2      : 30
term                 : 77 78 79 80 81 82
term_aux             : 89 91 93
type                 : 15 16 17 18 19 21 22 23 24
var                  : 11 12
var_aux              : 21 23 25 27
while                : 36
x                    : 75 75 76
x_aux                : 77 79 81
xp                   : 73 74

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_aux main
    (2) program -> . main
    (3) program_aux -> . program_aux function
    (4) program_aux -> . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    program                        shift and go to state 1
    program_aux                    shift and go to state 2
    main                           shift and go to state 3
    function                       shift and go to state 4
    function_header                shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> program_aux . main
    (3) program_aux -> program_aux . function
    (6) main -> . FUNCTION MAIN function_body
    (5) function -> . function_header function_body
    (7) function_header -> . FUNCTION ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> . FUNCTION ID L_PARENS R_PARENS COLON function_type

    FUNCTION        shift and go to state 5

    main                           shift and go to state 7
    function                       shift and go to state 8
    function_header                shift and go to state 6

state 3

    (2) program -> main .

    $end            reduce using rule 2 (program -> main .)


state 4

    (4) program_aux -> function .

    FUNCTION        reduce using rule 4 (program_aux -> function .)


state 5

    (6) main -> FUNCTION . MAIN function_body
    (7) function_header -> FUNCTION . ID L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION . ID L_PARENS R_PARENS COLON function_type

    MAIN            shift and go to state 9
    ID              shift and go to state 10


state 6

    (5) function -> function_header . function_body
    (9) function_body -> . L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 11

state 7

    (1) program -> program_aux main .

    $end            reduce using rule 1 (program -> program_aux main .)


state 8

    (3) program_aux -> program_aux function .

    FUNCTION        reduce using rule 3 (program_aux -> program_aux function .)


state 9

    (6) main -> FUNCTION MAIN . function_body
    (9) function_body -> . L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET
    (10) function_body -> . L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 12

    function_body                  shift and go to state 13

state 10

    (7) function_header -> FUNCTION ID . L_PARENS function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID . L_PARENS R_PARENS COLON function_type

    L_PARENS        shift and go to state 14


state 11

    (5) function -> function_header function_body .

    FUNCTION        reduce using rule 5 (function -> function_header function_body .)


state 12

    (9) function_body -> L_KEY_BRACKET . function_body_aux function_body_aux_2 R_KEY_BRACKET
    (10) function_body -> L_KEY_BRACKET . function_body_aux_2 R_KEY_BRACKET
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (13) function_body_aux_2 -> . statement function_body_aux_2
    (14) function_body_aux_2 -> . statement
    (21) var -> . type ID array_dim var_aux SEMICOLON
    (22) var -> . type ID array_dim SEMICOLON
    (23) var -> . type ID var_aux SEMICOLON
    (24) var -> . type ID SEMICOLON
    (29) statement -> . statement_aux SEMICOLON
    (30) statement -> . statement_aux_2
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING
    (31) statement_aux -> . assignment
    (32) statement_aux -> . function_call
    (33) statement_aux -> . return
    (34) statement_aux -> . print
    (35) statement_aux_2 -> . if
    (36) statement_aux_2 -> . while
    (44) assignment -> . ID array_index EQUALS expression
    (45) assignment -> . ID array_index EQUALS read
    (46) assignment -> . ID EQUALS expression
    (47) assignment -> . ID EQUALS read
    (48) function_call -> . ID params_pass
    (49) return -> . RETURN expression
    (58) print -> . PRINT L_PARENS print_aux R_PARENS
    (59) print -> . PRINT L_PARENS R_PARENS
    (50) if -> . IF L_PARENS expression R_PARENS block elif else
    (51) if -> . IF L_PARENS expression R_PARENS block elif
    (52) if -> . IF L_PARENS expression R_PARENS block else
    (53) if -> . IF L_PARENS expression R_PARENS block
    (57) while -> . WHILE L_PARENS expression R_PARENS block

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25
    ID              shift and go to state 20
    RETURN          shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35

    function_body_aux              shift and go to state 15
    function_body_aux_2            shift and go to state 16
    var                            shift and go to state 17
    statement                      shift and go to state 18
    type                           shift and go to state 19
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 13

    (6) main -> FUNCTION MAIN function_body .

    $end            reduce using rule 6 (main -> FUNCTION MAIN function_body .)


state 14

    (7) function_header -> FUNCTION ID L_PARENS . function_params R_PARENS COLON function_type
    (8) function_header -> FUNCTION ID L_PARENS . R_PARENS COLON function_type
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    R_PARENS        shift and go to state 37
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    function_params                shift and go to state 36
    type                           shift and go to state 38

state 15

    (9) function_body -> L_KEY_BRACKET function_body_aux . function_body_aux_2 R_KEY_BRACKET
    (13) function_body_aux_2 -> . statement function_body_aux_2
    (14) function_body_aux_2 -> . statement
    (29) statement -> . statement_aux SEMICOLON
    (30) statement -> . statement_aux_2
    (31) statement_aux -> . assignment
    (32) statement_aux -> . function_call
    (33) statement_aux -> . return
    (34) statement_aux -> . print
    (35) statement_aux_2 -> . if
    (36) statement_aux_2 -> . while
    (44) assignment -> . ID array_index EQUALS expression
    (45) assignment -> . ID array_index EQUALS read
    (46) assignment -> . ID EQUALS expression
    (47) assignment -> . ID EQUALS read
    (48) function_call -> . ID params_pass
    (49) return -> . RETURN expression
    (58) print -> . PRINT L_PARENS print_aux R_PARENS
    (59) print -> . PRINT L_PARENS R_PARENS
    (50) if -> . IF L_PARENS expression R_PARENS block elif else
    (51) if -> . IF L_PARENS expression R_PARENS block elif
    (52) if -> . IF L_PARENS expression R_PARENS block else
    (53) if -> . IF L_PARENS expression R_PARENS block
    (57) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 20
    RETURN          shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35

    function_body_aux_2            shift and go to state 39
    statement                      shift and go to state 18
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 16

    (10) function_body -> L_KEY_BRACKET function_body_aux_2 . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 40


state 17

    (11) function_body_aux -> var . function_body_aux
    (12) function_body_aux -> var .
    (11) function_body_aux -> . var function_body_aux
    (12) function_body_aux -> . var
    (21) var -> . type ID array_dim var_aux SEMICOLON
    (22) var -> . type ID array_dim SEMICOLON
    (23) var -> . type ID var_aux SEMICOLON
    (24) var -> . type ID SEMICOLON
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    ID              reduce using rule 12 (function_body_aux -> var .)
    RETURN          reduce using rule 12 (function_body_aux -> var .)
    PRINT           reduce using rule 12 (function_body_aux -> var .)
    IF              reduce using rule 12 (function_body_aux -> var .)
    WHILE           reduce using rule 12 (function_body_aux -> var .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    var                            shift and go to state 17
    function_body_aux              shift and go to state 41
    type                           shift and go to state 19

state 18

    (13) function_body_aux_2 -> statement . function_body_aux_2
    (14) function_body_aux_2 -> statement .
    (13) function_body_aux_2 -> . statement function_body_aux_2
    (14) function_body_aux_2 -> . statement
    (29) statement -> . statement_aux SEMICOLON
    (30) statement -> . statement_aux_2
    (31) statement_aux -> . assignment
    (32) statement_aux -> . function_call
    (33) statement_aux -> . return
    (34) statement_aux -> . print
    (35) statement_aux_2 -> . if
    (36) statement_aux_2 -> . while
    (44) assignment -> . ID array_index EQUALS expression
    (45) assignment -> . ID array_index EQUALS read
    (46) assignment -> . ID EQUALS expression
    (47) assignment -> . ID EQUALS read
    (48) function_call -> . ID params_pass
    (49) return -> . RETURN expression
    (58) print -> . PRINT L_PARENS print_aux R_PARENS
    (59) print -> . PRINT L_PARENS R_PARENS
    (50) if -> . IF L_PARENS expression R_PARENS block elif else
    (51) if -> . IF L_PARENS expression R_PARENS block elif
    (52) if -> . IF L_PARENS expression R_PARENS block else
    (53) if -> . IF L_PARENS expression R_PARENS block
    (57) while -> . WHILE L_PARENS expression R_PARENS block

    R_KEY_BRACKET   reduce using rule 14 (function_body_aux_2 -> statement .)
    ID              shift and go to state 20
    RETURN          shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35

    statement                      shift and go to state 18
    function_body_aux_2            shift and go to state 42
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 19

    (21) var -> type . ID array_dim var_aux SEMICOLON
    (22) var -> type . ID array_dim SEMICOLON
    (23) var -> type . ID var_aux SEMICOLON
    (24) var -> type . ID SEMICOLON

    ID              shift and go to state 43


state 20

    (44) assignment -> ID . array_index EQUALS expression
    (45) assignment -> ID . array_index EQUALS read
    (46) assignment -> ID . EQUALS expression
    (47) assignment -> ID . EQUALS read
    (48) function_call -> ID . params_pass
    (40) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (67) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (68) params_pass -> . L_PARENS expression R_PARENS
    (69) params_pass -> . L_PARENS R_PARENS

    EQUALS          shift and go to state 45
    L_SQUARE_BRACKET shift and go to state 47
    L_PARENS        shift and go to state 48

    array_index                    shift and go to state 44
    params_pass                    shift and go to state 46

state 21

    (29) statement -> statement_aux . SEMICOLON

    SEMICOLON       shift and go to state 49


state 22

    (30) statement -> statement_aux_2 .

    ID              reduce using rule 30 (statement -> statement_aux_2 .)
    RETURN          reduce using rule 30 (statement -> statement_aux_2 .)
    PRINT           reduce using rule 30 (statement -> statement_aux_2 .)
    IF              reduce using rule 30 (statement -> statement_aux_2 .)
    WHILE           reduce using rule 30 (statement -> statement_aux_2 .)
    R_KEY_BRACKET   reduce using rule 30 (statement -> statement_aux_2 .)


state 23

    (37) type -> INT .

    ID              reduce using rule 37 (type -> INT .)
    L_KEY_BRACKET   reduce using rule 37 (type -> INT .)


state 24

    (38) type -> FLOAT .

    ID              reduce using rule 38 (type -> FLOAT .)
    L_KEY_BRACKET   reduce using rule 38 (type -> FLOAT .)


state 25

    (39) type -> STRING .

    ID              reduce using rule 39 (type -> STRING .)
    L_KEY_BRACKET   reduce using rule 39 (type -> STRING .)


state 26

    (31) statement_aux -> assignment .

    SEMICOLON       reduce using rule 31 (statement_aux -> assignment .)


state 27

    (32) statement_aux -> function_call .

    SEMICOLON       reduce using rule 32 (statement_aux -> function_call .)


state 28

    (33) statement_aux -> return .

    SEMICOLON       reduce using rule 33 (statement_aux -> return .)


state 29

    (34) statement_aux -> print .

    SEMICOLON       reduce using rule 34 (statement_aux -> print .)


state 30

    (35) statement_aux_2 -> if .

    ID              reduce using rule 35 (statement_aux_2 -> if .)
    RETURN          reduce using rule 35 (statement_aux_2 -> if .)
    PRINT           reduce using rule 35 (statement_aux_2 -> if .)
    IF              reduce using rule 35 (statement_aux_2 -> if .)
    WHILE           reduce using rule 35 (statement_aux_2 -> if .)
    R_KEY_BRACKET   reduce using rule 35 (statement_aux_2 -> if .)


state 31

    (36) statement_aux_2 -> while .

    ID              reduce using rule 36 (statement_aux_2 -> while .)
    RETURN          reduce using rule 36 (statement_aux_2 -> while .)
    PRINT           reduce using rule 36 (statement_aux_2 -> while .)
    IF              reduce using rule 36 (statement_aux_2 -> while .)
    WHILE           reduce using rule 36 (statement_aux_2 -> while .)
    R_KEY_BRACKET   reduce using rule 36 (statement_aux_2 -> while .)


state 32

    (49) return -> RETURN . expression
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 50
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 33

    (58) print -> PRINT . L_PARENS print_aux R_PARENS
    (59) print -> PRINT . L_PARENS R_PARENS

    L_PARENS        shift and go to state 68


state 34

    (50) if -> IF . L_PARENS expression R_PARENS block elif else
    (51) if -> IF . L_PARENS expression R_PARENS block elif
    (52) if -> IF . L_PARENS expression R_PARENS block else
    (53) if -> IF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 69


state 35

    (57) while -> WHILE . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 70


state 36

    (7) function_header -> FUNCTION ID L_PARENS function_params . R_PARENS COLON function_type

    R_PARENS        shift and go to state 71


state 37

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS . COLON function_type

    COLON           shift and go to state 72


state 38

    (15) function_params -> type . ID array_index COMMA function_params
    (16) function_params -> type . ID array_index
    (17) function_params -> type . ID COMMA function_params
    (18) function_params -> type . ID

    ID              shift and go to state 73


state 39

    (9) function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 74


state 40

    (10) function_body -> L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET .

    FUNCTION        reduce using rule 10 (function_body -> L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET .)
    $end            reduce using rule 10 (function_body -> L_KEY_BRACKET function_body_aux_2 R_KEY_BRACKET .)


state 41

    (11) function_body_aux -> var function_body_aux .

    ID              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    RETURN          reduce using rule 11 (function_body_aux -> var function_body_aux .)
    PRINT           reduce using rule 11 (function_body_aux -> var function_body_aux .)
    IF              reduce using rule 11 (function_body_aux -> var function_body_aux .)
    WHILE           reduce using rule 11 (function_body_aux -> var function_body_aux .)


state 42

    (13) function_body_aux_2 -> statement function_body_aux_2 .

    R_KEY_BRACKET   reduce using rule 13 (function_body_aux_2 -> statement function_body_aux_2 .)


state 43

    (21) var -> type ID . array_dim var_aux SEMICOLON
    (22) var -> type ID . array_dim SEMICOLON
    (23) var -> type ID . var_aux SEMICOLON
    (24) var -> type ID . SEMICOLON
    (42) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (43) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (25) var_aux -> . COMMA ID array_dim var_aux
    (26) var_aux -> . COMMA ID array_dim
    (27) var_aux -> . COMMA ID var_aux
    (28) var_aux -> . COMMA ID

    SEMICOLON       shift and go to state 77
    L_SQUARE_BRACKET shift and go to state 78
    COMMA           shift and go to state 79

    array_dim                      shift and go to state 75
    var_aux                        shift and go to state 76

state 44

    (44) assignment -> ID array_index . EQUALS expression
    (45) assignment -> ID array_index . EQUALS read

    EQUALS          shift and go to state 80


state 45

    (46) assignment -> ID EQUALS . expression
    (47) assignment -> ID EQUALS . read
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (66) read -> . READ ID
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    READ            shift and go to state 83
    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 81
    read                           shift and go to state 82
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 46

    (48) function_call -> ID params_pass .

    SEMICOLON       reduce using rule 48 (function_call -> ID params_pass .)
    TIMES           reduce using rule 48 (function_call -> ID params_pass .)
    DIVIDE          reduce using rule 48 (function_call -> ID params_pass .)
    PLUS            reduce using rule 48 (function_call -> ID params_pass .)
    MINUS           reduce using rule 48 (function_call -> ID params_pass .)
    NOT_EQUAL       reduce using rule 48 (function_call -> ID params_pass .)
    IS_EQUAL        reduce using rule 48 (function_call -> ID params_pass .)
    GREATER         reduce using rule 48 (function_call -> ID params_pass .)
    GREATER_EQ      reduce using rule 48 (function_call -> ID params_pass .)
    LESS            reduce using rule 48 (function_call -> ID params_pass .)
    LESS_EQ         reduce using rule 48 (function_call -> ID params_pass .)
    OR              reduce using rule 48 (function_call -> ID params_pass .)
    AND             reduce using rule 48 (function_call -> ID params_pass .)
    R_SQUARE_BRACKET reduce using rule 48 (function_call -> ID params_pass .)
    R_PARENS        reduce using rule 48 (function_call -> ID params_pass .)
    COMMA           reduce using rule 48 (function_call -> ID params_pass .)


state 47

    (40) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 84
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 48

    (67) params_pass -> L_PARENS . expression params_pass_aux R_PARENS
    (68) params_pass -> L_PARENS . expression R_PARENS
    (69) params_pass -> L_PARENS . R_PARENS
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    R_PARENS        shift and go to state 86
    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 85
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 49

    (29) statement -> statement_aux SEMICOLON .

    ID              reduce using rule 29 (statement -> statement_aux SEMICOLON .)
    RETURN          reduce using rule 29 (statement -> statement_aux SEMICOLON .)
    PRINT           reduce using rule 29 (statement -> statement_aux SEMICOLON .)
    IF              reduce using rule 29 (statement -> statement_aux SEMICOLON .)
    WHILE           reduce using rule 29 (statement -> statement_aux SEMICOLON .)
    R_KEY_BRACKET   reduce using rule 29 (statement -> statement_aux SEMICOLON .)


state 50

    (49) return -> RETURN expression .

    SEMICOLON       reduce using rule 49 (return -> RETURN expression .)


state 51

    (64) expression -> exp . AND expression
    (65) expression -> exp .

    AND             shift and go to state 87
    SEMICOLON       reduce using rule 65 (expression -> exp .)
    R_SQUARE_BRACKET reduce using rule 65 (expression -> exp .)
    R_PARENS        reduce using rule 65 (expression -> exp .)
    COMMA           reduce using rule 65 (expression -> exp .)


state 52

    (73) exp -> xp . OR exp
    (74) exp -> xp .

    OR              shift and go to state 88
    AND             reduce using rule 74 (exp -> xp .)
    SEMICOLON       reduce using rule 74 (exp -> xp .)
    R_SQUARE_BRACKET reduce using rule 74 (exp -> xp .)
    R_PARENS        reduce using rule 74 (exp -> xp .)
    COMMA           reduce using rule 74 (exp -> xp .)


state 53

    (75) xp -> x . log_op x
    (76) xp -> x .
    (83) log_op -> . NOT_EQUAL
    (84) log_op -> . IS_EQUAL
    (85) log_op -> . GREATER
    (86) log_op -> . GREATER_EQ
    (87) log_op -> . LESS
    (88) log_op -> . LESS_EQ

    OR              reduce using rule 76 (xp -> x .)
    AND             reduce using rule 76 (xp -> x .)
    SEMICOLON       reduce using rule 76 (xp -> x .)
    R_SQUARE_BRACKET reduce using rule 76 (xp -> x .)
    R_PARENS        reduce using rule 76 (xp -> x .)
    COMMA           reduce using rule 76 (xp -> x .)
    NOT_EQUAL       shift and go to state 90
    IS_EQUAL        shift and go to state 91
    GREATER         shift and go to state 92
    GREATER_EQ      shift and go to state 93
    LESS            shift and go to state 94
    LESS_EQ         shift and go to state 95

    log_op                         shift and go to state 89

state 54

    (77) x -> term . x_aux
    (78) x -> term .
    (79) x_aux -> . PLUS term x_aux
    (80) x_aux -> . PLUS term
    (81) x_aux -> . MINUS term x_aux
    (82) x_aux -> . MINUS term

    NOT_EQUAL       reduce using rule 78 (x -> term .)
    IS_EQUAL        reduce using rule 78 (x -> term .)
    GREATER         reduce using rule 78 (x -> term .)
    GREATER_EQ      reduce using rule 78 (x -> term .)
    LESS            reduce using rule 78 (x -> term .)
    LESS_EQ         reduce using rule 78 (x -> term .)
    OR              reduce using rule 78 (x -> term .)
    AND             reduce using rule 78 (x -> term .)
    SEMICOLON       reduce using rule 78 (x -> term .)
    R_SQUARE_BRACKET reduce using rule 78 (x -> term .)
    R_PARENS        reduce using rule 78 (x -> term .)
    COMMA           reduce using rule 78 (x -> term .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    x_aux                          shift and go to state 96

state 55

    (89) term -> factor . term_aux
    (90) term -> factor .
    (91) term_aux -> . TIMES factor term_aux
    (92) term_aux -> . TIMES factor
    (93) term_aux -> . DIVIDE factor term_aux
    (94) term_aux -> . DIVIDE factor

    PLUS            reduce using rule 90 (term -> factor .)
    MINUS           reduce using rule 90 (term -> factor .)
    NOT_EQUAL       reduce using rule 90 (term -> factor .)
    IS_EQUAL        reduce using rule 90 (term -> factor .)
    GREATER         reduce using rule 90 (term -> factor .)
    GREATER_EQ      reduce using rule 90 (term -> factor .)
    LESS            reduce using rule 90 (term -> factor .)
    LESS_EQ         reduce using rule 90 (term -> factor .)
    OR              reduce using rule 90 (term -> factor .)
    AND             reduce using rule 90 (term -> factor .)
    SEMICOLON       reduce using rule 90 (term -> factor .)
    R_SQUARE_BRACKET reduce using rule 90 (term -> factor .)
    R_PARENS        reduce using rule 90 (term -> factor .)
    COMMA           reduce using rule 90 (term -> factor .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

    term_aux                       shift and go to state 99

state 56

    (95) factor -> NOT . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    factor_aux                     shift and go to state 102
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 57

    (96) factor -> factor_aux .

    TIMES           reduce using rule 96 (factor -> factor_aux .)
    DIVIDE          reduce using rule 96 (factor -> factor_aux .)
    PLUS            reduce using rule 96 (factor -> factor_aux .)
    MINUS           reduce using rule 96 (factor -> factor_aux .)
    NOT_EQUAL       reduce using rule 96 (factor -> factor_aux .)
    IS_EQUAL        reduce using rule 96 (factor -> factor_aux .)
    GREATER         reduce using rule 96 (factor -> factor_aux .)
    GREATER_EQ      reduce using rule 96 (factor -> factor_aux .)
    LESS            reduce using rule 96 (factor -> factor_aux .)
    LESS_EQ         reduce using rule 96 (factor -> factor_aux .)
    OR              reduce using rule 96 (factor -> factor_aux .)
    AND             reduce using rule 96 (factor -> factor_aux .)
    SEMICOLON       reduce using rule 96 (factor -> factor_aux .)
    R_SQUARE_BRACKET reduce using rule 96 (factor -> factor_aux .)
    R_PARENS        reduce using rule 96 (factor -> factor_aux .)
    COMMA           reduce using rule 96 (factor -> factor_aux .)


state 58

    (97) factor_aux -> L_PARENS . expression R_PARENS
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 103
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 59

    (98) factor_aux -> PLUS . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    const                          shift and go to state 104
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 60

    (100) factor_aux -> const .

    TIMES           reduce using rule 100 (factor_aux -> const .)
    DIVIDE          reduce using rule 100 (factor_aux -> const .)
    PLUS            reduce using rule 100 (factor_aux -> const .)
    MINUS           reduce using rule 100 (factor_aux -> const .)
    NOT_EQUAL       reduce using rule 100 (factor_aux -> const .)
    IS_EQUAL        reduce using rule 100 (factor_aux -> const .)
    GREATER         reduce using rule 100 (factor_aux -> const .)
    GREATER_EQ      reduce using rule 100 (factor_aux -> const .)
    LESS            reduce using rule 100 (factor_aux -> const .)
    LESS_EQ         reduce using rule 100 (factor_aux -> const .)
    OR              reduce using rule 100 (factor_aux -> const .)
    AND             reduce using rule 100 (factor_aux -> const .)
    SEMICOLON       reduce using rule 100 (factor_aux -> const .)
    R_SQUARE_BRACKET reduce using rule 100 (factor_aux -> const .)
    R_PARENS        reduce using rule 100 (factor_aux -> const .)
    COMMA           reduce using rule 100 (factor_aux -> const .)


state 61

    (99) factor_aux -> MINUS . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    const                          shift and go to state 105
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 62

    (101) const -> ID .
    (48) function_call -> ID . params_pass
    (107) array_access -> ID . array_index
    (67) params_pass -> . L_PARENS expression params_pass_aux R_PARENS
    (68) params_pass -> . L_PARENS expression R_PARENS
    (69) params_pass -> . L_PARENS R_PARENS
    (40) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    TIMES           reduce using rule 101 (const -> ID .)
    DIVIDE          reduce using rule 101 (const -> ID .)
    PLUS            reduce using rule 101 (const -> ID .)
    MINUS           reduce using rule 101 (const -> ID .)
    NOT_EQUAL       reduce using rule 101 (const -> ID .)
    IS_EQUAL        reduce using rule 101 (const -> ID .)
    GREATER         reduce using rule 101 (const -> ID .)
    GREATER_EQ      reduce using rule 101 (const -> ID .)
    LESS            reduce using rule 101 (const -> ID .)
    LESS_EQ         reduce using rule 101 (const -> ID .)
    OR              reduce using rule 101 (const -> ID .)
    AND             reduce using rule 101 (const -> ID .)
    SEMICOLON       reduce using rule 101 (const -> ID .)
    R_SQUARE_BRACKET reduce using rule 101 (const -> ID .)
    R_PARENS        reduce using rule 101 (const -> ID .)
    COMMA           reduce using rule 101 (const -> ID .)
    L_PARENS        shift and go to state 48
    L_SQUARE_BRACKET shift and go to state 47

    params_pass                    shift and go to state 46
    array_index                    shift and go to state 106

state 63

    (102) const -> CONST_I .

    TIMES           reduce using rule 102 (const -> CONST_I .)
    DIVIDE          reduce using rule 102 (const -> CONST_I .)
    PLUS            reduce using rule 102 (const -> CONST_I .)
    MINUS           reduce using rule 102 (const -> CONST_I .)
    NOT_EQUAL       reduce using rule 102 (const -> CONST_I .)
    IS_EQUAL        reduce using rule 102 (const -> CONST_I .)
    GREATER         reduce using rule 102 (const -> CONST_I .)
    GREATER_EQ      reduce using rule 102 (const -> CONST_I .)
    LESS            reduce using rule 102 (const -> CONST_I .)
    LESS_EQ         reduce using rule 102 (const -> CONST_I .)
    OR              reduce using rule 102 (const -> CONST_I .)
    AND             reduce using rule 102 (const -> CONST_I .)
    SEMICOLON       reduce using rule 102 (const -> CONST_I .)
    R_SQUARE_BRACKET reduce using rule 102 (const -> CONST_I .)
    R_PARENS        reduce using rule 102 (const -> CONST_I .)
    COMMA           reduce using rule 102 (const -> CONST_I .)


state 64

    (103) const -> CONST_F .

    TIMES           reduce using rule 103 (const -> CONST_F .)
    DIVIDE          reduce using rule 103 (const -> CONST_F .)
    PLUS            reduce using rule 103 (const -> CONST_F .)
    MINUS           reduce using rule 103 (const -> CONST_F .)
    NOT_EQUAL       reduce using rule 103 (const -> CONST_F .)
    IS_EQUAL        reduce using rule 103 (const -> CONST_F .)
    GREATER         reduce using rule 103 (const -> CONST_F .)
    GREATER_EQ      reduce using rule 103 (const -> CONST_F .)
    LESS            reduce using rule 103 (const -> CONST_F .)
    LESS_EQ         reduce using rule 103 (const -> CONST_F .)
    OR              reduce using rule 103 (const -> CONST_F .)
    AND             reduce using rule 103 (const -> CONST_F .)
    SEMICOLON       reduce using rule 103 (const -> CONST_F .)
    R_SQUARE_BRACKET reduce using rule 103 (const -> CONST_F .)
    R_PARENS        reduce using rule 103 (const -> CONST_F .)
    COMMA           reduce using rule 103 (const -> CONST_F .)


state 65

    (104) const -> CONST_STRING .

    TIMES           reduce using rule 104 (const -> CONST_STRING .)
    DIVIDE          reduce using rule 104 (const -> CONST_STRING .)
    PLUS            reduce using rule 104 (const -> CONST_STRING .)
    MINUS           reduce using rule 104 (const -> CONST_STRING .)
    NOT_EQUAL       reduce using rule 104 (const -> CONST_STRING .)
    IS_EQUAL        reduce using rule 104 (const -> CONST_STRING .)
    GREATER         reduce using rule 104 (const -> CONST_STRING .)
    GREATER_EQ      reduce using rule 104 (const -> CONST_STRING .)
    LESS            reduce using rule 104 (const -> CONST_STRING .)
    LESS_EQ         reduce using rule 104 (const -> CONST_STRING .)
    OR              reduce using rule 104 (const -> CONST_STRING .)
    AND             reduce using rule 104 (const -> CONST_STRING .)
    SEMICOLON       reduce using rule 104 (const -> CONST_STRING .)
    R_SQUARE_BRACKET reduce using rule 104 (const -> CONST_STRING .)
    R_PARENS        reduce using rule 104 (const -> CONST_STRING .)
    COMMA           reduce using rule 104 (const -> CONST_STRING .)


state 66

    (105) const -> function_call .

    TIMES           reduce using rule 105 (const -> function_call .)
    DIVIDE          reduce using rule 105 (const -> function_call .)
    PLUS            reduce using rule 105 (const -> function_call .)
    MINUS           reduce using rule 105 (const -> function_call .)
    NOT_EQUAL       reduce using rule 105 (const -> function_call .)
    IS_EQUAL        reduce using rule 105 (const -> function_call .)
    GREATER         reduce using rule 105 (const -> function_call .)
    GREATER_EQ      reduce using rule 105 (const -> function_call .)
    LESS            reduce using rule 105 (const -> function_call .)
    LESS_EQ         reduce using rule 105 (const -> function_call .)
    OR              reduce using rule 105 (const -> function_call .)
    AND             reduce using rule 105 (const -> function_call .)
    SEMICOLON       reduce using rule 105 (const -> function_call .)
    R_SQUARE_BRACKET reduce using rule 105 (const -> function_call .)
    R_PARENS        reduce using rule 105 (const -> function_call .)
    COMMA           reduce using rule 105 (const -> function_call .)


state 67

    (106) const -> array_access .

    TIMES           reduce using rule 106 (const -> array_access .)
    DIVIDE          reduce using rule 106 (const -> array_access .)
    PLUS            reduce using rule 106 (const -> array_access .)
    MINUS           reduce using rule 106 (const -> array_access .)
    NOT_EQUAL       reduce using rule 106 (const -> array_access .)
    IS_EQUAL        reduce using rule 106 (const -> array_access .)
    GREATER         reduce using rule 106 (const -> array_access .)
    GREATER_EQ      reduce using rule 106 (const -> array_access .)
    LESS            reduce using rule 106 (const -> array_access .)
    LESS_EQ         reduce using rule 106 (const -> array_access .)
    OR              reduce using rule 106 (const -> array_access .)
    AND             reduce using rule 106 (const -> array_access .)
    SEMICOLON       reduce using rule 106 (const -> array_access .)
    R_SQUARE_BRACKET reduce using rule 106 (const -> array_access .)
    R_PARENS        reduce using rule 106 (const -> array_access .)
    COMMA           reduce using rule 106 (const -> array_access .)


state 68

    (58) print -> PRINT L_PARENS . print_aux R_PARENS
    (59) print -> PRINT L_PARENS . R_PARENS
    (60) print_aux -> . CONST_STRING COMMA print_aux
    (61) print_aux -> . CONST_STRING
    (62) print_aux -> . ID COMMA print_aux
    (63) print_aux -> . ID

    R_PARENS        shift and go to state 108
    CONST_STRING    shift and go to state 109
    ID              shift and go to state 110

    print_aux                      shift and go to state 107

state 69

    (50) if -> IF L_PARENS . expression R_PARENS block elif else
    (51) if -> IF L_PARENS . expression R_PARENS block elif
    (52) if -> IF L_PARENS . expression R_PARENS block else
    (53) if -> IF L_PARENS . expression R_PARENS block
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 111
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 70

    (57) while -> WHILE L_PARENS . expression R_PARENS block
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 112
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 71

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS . COLON function_type

    COLON           shift and go to state 113


state 72

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS COLON . function_type
    (19) function_type -> . type
    (20) function_type -> . VOID
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    VOID            shift and go to state 116
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    function_type                  shift and go to state 114
    type                           shift and go to state 115

state 73

    (15) function_params -> type ID . array_index COMMA function_params
    (16) function_params -> type ID . array_index
    (17) function_params -> type ID . COMMA function_params
    (18) function_params -> type ID .
    (40) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> . L_SQUARE_BRACKET expression R_SQUARE_BRACKET

    COMMA           shift and go to state 118
    R_PARENS        reduce using rule 18 (function_params -> type ID .)
    L_SQUARE_BRACKET shift and go to state 47

    array_index                    shift and go to state 117

state 74

    (9) function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .

    FUNCTION        reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .)
    $end            reduce using rule 9 (function_body -> L_KEY_BRACKET function_body_aux function_body_aux_2 R_KEY_BRACKET .)


state 75

    (21) var -> type ID array_dim . var_aux SEMICOLON
    (22) var -> type ID array_dim . SEMICOLON
    (25) var_aux -> . COMMA ID array_dim var_aux
    (26) var_aux -> . COMMA ID array_dim
    (27) var_aux -> . COMMA ID var_aux
    (28) var_aux -> . COMMA ID

    SEMICOLON       shift and go to state 120
    COMMA           shift and go to state 79

    var_aux                        shift and go to state 119

state 76

    (23) var -> type ID var_aux . SEMICOLON

    SEMICOLON       shift and go to state 121


state 77

    (24) var -> type ID SEMICOLON .

    INT             reduce using rule 24 (var -> type ID SEMICOLON .)
    FLOAT           reduce using rule 24 (var -> type ID SEMICOLON .)
    STRING          reduce using rule 24 (var -> type ID SEMICOLON .)
    ID              reduce using rule 24 (var -> type ID SEMICOLON .)
    RETURN          reduce using rule 24 (var -> type ID SEMICOLON .)
    PRINT           reduce using rule 24 (var -> type ID SEMICOLON .)
    IF              reduce using rule 24 (var -> type ID SEMICOLON .)
    WHILE           reduce using rule 24 (var -> type ID SEMICOLON .)


state 78

    (42) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (43) array_dim -> L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 122


state 79

    (25) var_aux -> COMMA . ID array_dim var_aux
    (26) var_aux -> COMMA . ID array_dim
    (27) var_aux -> COMMA . ID var_aux
    (28) var_aux -> COMMA . ID

    ID              shift and go to state 123


state 80

    (44) assignment -> ID array_index EQUALS . expression
    (45) assignment -> ID array_index EQUALS . read
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (66) read -> . READ ID
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    READ            shift and go to state 83
    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 124
    read                           shift and go to state 125
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 81

    (46) assignment -> ID EQUALS expression .

    SEMICOLON       reduce using rule 46 (assignment -> ID EQUALS expression .)


state 82

    (47) assignment -> ID EQUALS read .

    SEMICOLON       reduce using rule 47 (assignment -> ID EQUALS read .)


state 83

    (66) read -> READ . ID

    ID              shift and go to state 126


state 84

    (40) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 127


state 85

    (67) params_pass -> L_PARENS expression . params_pass_aux R_PARENS
    (68) params_pass -> L_PARENS expression . R_PARENS
    (70) params_pass_aux -> . COMMA expression params_pass_aux
    (71) params_pass_aux -> . COMMA expression

    R_PARENS        shift and go to state 129
    COMMA           shift and go to state 130

    params_pass_aux                shift and go to state 128

state 86

    (69) params_pass -> L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    TIMES           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    DIVIDE          reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    PLUS            reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    MINUS           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    NOT_EQUAL       reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    IS_EQUAL        reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    GREATER         reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    GREATER_EQ      reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    LESS            reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    LESS_EQ         reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    OR              reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    AND             reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    R_PARENS        reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)
    COMMA           reduce using rule 69 (params_pass -> L_PARENS R_PARENS .)


state 87

    (64) expression -> exp AND . expression
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    exp                            shift and go to state 51
    expression                     shift and go to state 131
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 88

    (73) exp -> xp OR . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    xp                             shift and go to state 52
    exp                            shift and go to state 132
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 89

    (75) xp -> x log_op . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    x                              shift and go to state 133
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 90

    (83) log_op -> NOT_EQUAL .

    NOT             reduce using rule 83 (log_op -> NOT_EQUAL .)
    L_PARENS        reduce using rule 83 (log_op -> NOT_EQUAL .)
    PLUS            reduce using rule 83 (log_op -> NOT_EQUAL .)
    MINUS           reduce using rule 83 (log_op -> NOT_EQUAL .)
    ID              reduce using rule 83 (log_op -> NOT_EQUAL .)
    CONST_I         reduce using rule 83 (log_op -> NOT_EQUAL .)
    CONST_F         reduce using rule 83 (log_op -> NOT_EQUAL .)
    CONST_STRING    reduce using rule 83 (log_op -> NOT_EQUAL .)


state 91

    (84) log_op -> IS_EQUAL .

    NOT             reduce using rule 84 (log_op -> IS_EQUAL .)
    L_PARENS        reduce using rule 84 (log_op -> IS_EQUAL .)
    PLUS            reduce using rule 84 (log_op -> IS_EQUAL .)
    MINUS           reduce using rule 84 (log_op -> IS_EQUAL .)
    ID              reduce using rule 84 (log_op -> IS_EQUAL .)
    CONST_I         reduce using rule 84 (log_op -> IS_EQUAL .)
    CONST_F         reduce using rule 84 (log_op -> IS_EQUAL .)
    CONST_STRING    reduce using rule 84 (log_op -> IS_EQUAL .)


state 92

    (85) log_op -> GREATER .

    NOT             reduce using rule 85 (log_op -> GREATER .)
    L_PARENS        reduce using rule 85 (log_op -> GREATER .)
    PLUS            reduce using rule 85 (log_op -> GREATER .)
    MINUS           reduce using rule 85 (log_op -> GREATER .)
    ID              reduce using rule 85 (log_op -> GREATER .)
    CONST_I         reduce using rule 85 (log_op -> GREATER .)
    CONST_F         reduce using rule 85 (log_op -> GREATER .)
    CONST_STRING    reduce using rule 85 (log_op -> GREATER .)


state 93

    (86) log_op -> GREATER_EQ .

    NOT             reduce using rule 86 (log_op -> GREATER_EQ .)
    L_PARENS        reduce using rule 86 (log_op -> GREATER_EQ .)
    PLUS            reduce using rule 86 (log_op -> GREATER_EQ .)
    MINUS           reduce using rule 86 (log_op -> GREATER_EQ .)
    ID              reduce using rule 86 (log_op -> GREATER_EQ .)
    CONST_I         reduce using rule 86 (log_op -> GREATER_EQ .)
    CONST_F         reduce using rule 86 (log_op -> GREATER_EQ .)
    CONST_STRING    reduce using rule 86 (log_op -> GREATER_EQ .)


state 94

    (87) log_op -> LESS .

    NOT             reduce using rule 87 (log_op -> LESS .)
    L_PARENS        reduce using rule 87 (log_op -> LESS .)
    PLUS            reduce using rule 87 (log_op -> LESS .)
    MINUS           reduce using rule 87 (log_op -> LESS .)
    ID              reduce using rule 87 (log_op -> LESS .)
    CONST_I         reduce using rule 87 (log_op -> LESS .)
    CONST_F         reduce using rule 87 (log_op -> LESS .)
    CONST_STRING    reduce using rule 87 (log_op -> LESS .)


state 95

    (88) log_op -> LESS_EQ .

    NOT             reduce using rule 88 (log_op -> LESS_EQ .)
    L_PARENS        reduce using rule 88 (log_op -> LESS_EQ .)
    PLUS            reduce using rule 88 (log_op -> LESS_EQ .)
    MINUS           reduce using rule 88 (log_op -> LESS_EQ .)
    ID              reduce using rule 88 (log_op -> LESS_EQ .)
    CONST_I         reduce using rule 88 (log_op -> LESS_EQ .)
    CONST_F         reduce using rule 88 (log_op -> LESS_EQ .)
    CONST_STRING    reduce using rule 88 (log_op -> LESS_EQ .)


state 96

    (77) x -> term x_aux .

    NOT_EQUAL       reduce using rule 77 (x -> term x_aux .)
    IS_EQUAL        reduce using rule 77 (x -> term x_aux .)
    GREATER         reduce using rule 77 (x -> term x_aux .)
    GREATER_EQ      reduce using rule 77 (x -> term x_aux .)
    LESS            reduce using rule 77 (x -> term x_aux .)
    LESS_EQ         reduce using rule 77 (x -> term x_aux .)
    OR              reduce using rule 77 (x -> term x_aux .)
    AND             reduce using rule 77 (x -> term x_aux .)
    SEMICOLON       reduce using rule 77 (x -> term x_aux .)
    R_SQUARE_BRACKET reduce using rule 77 (x -> term x_aux .)
    R_PARENS        reduce using rule 77 (x -> term x_aux .)
    COMMA           reduce using rule 77 (x -> term x_aux .)


state 97

    (79) x_aux -> PLUS . term x_aux
    (80) x_aux -> PLUS . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    term                           shift and go to state 134
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 98

    (81) x_aux -> MINUS . term x_aux
    (82) x_aux -> MINUS . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    term                           shift and go to state 135
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 99

    (89) term -> factor term_aux .

    PLUS            reduce using rule 89 (term -> factor term_aux .)
    MINUS           reduce using rule 89 (term -> factor term_aux .)
    NOT_EQUAL       reduce using rule 89 (term -> factor term_aux .)
    IS_EQUAL        reduce using rule 89 (term -> factor term_aux .)
    GREATER         reduce using rule 89 (term -> factor term_aux .)
    GREATER_EQ      reduce using rule 89 (term -> factor term_aux .)
    LESS            reduce using rule 89 (term -> factor term_aux .)
    LESS_EQ         reduce using rule 89 (term -> factor term_aux .)
    OR              reduce using rule 89 (term -> factor term_aux .)
    AND             reduce using rule 89 (term -> factor term_aux .)
    SEMICOLON       reduce using rule 89 (term -> factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 89 (term -> factor term_aux .)
    R_PARENS        reduce using rule 89 (term -> factor term_aux .)
    COMMA           reduce using rule 89 (term -> factor term_aux .)


state 100

    (91) term_aux -> TIMES . factor term_aux
    (92) term_aux -> TIMES . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    factor                         shift and go to state 136
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 101

    (93) term_aux -> DIVIDE . factor term_aux
    (94) term_aux -> DIVIDE . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    factor                         shift and go to state 137
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 102

    (95) factor -> NOT factor_aux .

    TIMES           reduce using rule 95 (factor -> NOT factor_aux .)
    DIVIDE          reduce using rule 95 (factor -> NOT factor_aux .)
    PLUS            reduce using rule 95 (factor -> NOT factor_aux .)
    MINUS           reduce using rule 95 (factor -> NOT factor_aux .)
    NOT_EQUAL       reduce using rule 95 (factor -> NOT factor_aux .)
    IS_EQUAL        reduce using rule 95 (factor -> NOT factor_aux .)
    GREATER         reduce using rule 95 (factor -> NOT factor_aux .)
    GREATER_EQ      reduce using rule 95 (factor -> NOT factor_aux .)
    LESS            reduce using rule 95 (factor -> NOT factor_aux .)
    LESS_EQ         reduce using rule 95 (factor -> NOT factor_aux .)
    OR              reduce using rule 95 (factor -> NOT factor_aux .)
    AND             reduce using rule 95 (factor -> NOT factor_aux .)
    SEMICOLON       reduce using rule 95 (factor -> NOT factor_aux .)
    R_SQUARE_BRACKET reduce using rule 95 (factor -> NOT factor_aux .)
    R_PARENS        reduce using rule 95 (factor -> NOT factor_aux .)
    COMMA           reduce using rule 95 (factor -> NOT factor_aux .)


state 103

    (97) factor_aux -> L_PARENS expression . R_PARENS

    R_PARENS        shift and go to state 138


state 104

    (98) factor_aux -> PLUS const .

    TIMES           reduce using rule 98 (factor_aux -> PLUS const .)
    DIVIDE          reduce using rule 98 (factor_aux -> PLUS const .)
    PLUS            reduce using rule 98 (factor_aux -> PLUS const .)
    MINUS           reduce using rule 98 (factor_aux -> PLUS const .)
    NOT_EQUAL       reduce using rule 98 (factor_aux -> PLUS const .)
    IS_EQUAL        reduce using rule 98 (factor_aux -> PLUS const .)
    GREATER         reduce using rule 98 (factor_aux -> PLUS const .)
    GREATER_EQ      reduce using rule 98 (factor_aux -> PLUS const .)
    LESS            reduce using rule 98 (factor_aux -> PLUS const .)
    LESS_EQ         reduce using rule 98 (factor_aux -> PLUS const .)
    OR              reduce using rule 98 (factor_aux -> PLUS const .)
    AND             reduce using rule 98 (factor_aux -> PLUS const .)
    SEMICOLON       reduce using rule 98 (factor_aux -> PLUS const .)
    R_SQUARE_BRACKET reduce using rule 98 (factor_aux -> PLUS const .)
    R_PARENS        reduce using rule 98 (factor_aux -> PLUS const .)
    COMMA           reduce using rule 98 (factor_aux -> PLUS const .)


state 105

    (99) factor_aux -> MINUS const .

    TIMES           reduce using rule 99 (factor_aux -> MINUS const .)
    DIVIDE          reduce using rule 99 (factor_aux -> MINUS const .)
    PLUS            reduce using rule 99 (factor_aux -> MINUS const .)
    MINUS           reduce using rule 99 (factor_aux -> MINUS const .)
    NOT_EQUAL       reduce using rule 99 (factor_aux -> MINUS const .)
    IS_EQUAL        reduce using rule 99 (factor_aux -> MINUS const .)
    GREATER         reduce using rule 99 (factor_aux -> MINUS const .)
    GREATER_EQ      reduce using rule 99 (factor_aux -> MINUS const .)
    LESS            reduce using rule 99 (factor_aux -> MINUS const .)
    LESS_EQ         reduce using rule 99 (factor_aux -> MINUS const .)
    OR              reduce using rule 99 (factor_aux -> MINUS const .)
    AND             reduce using rule 99 (factor_aux -> MINUS const .)
    SEMICOLON       reduce using rule 99 (factor_aux -> MINUS const .)
    R_SQUARE_BRACKET reduce using rule 99 (factor_aux -> MINUS const .)
    R_PARENS        reduce using rule 99 (factor_aux -> MINUS const .)
    COMMA           reduce using rule 99 (factor_aux -> MINUS const .)


state 106

    (107) array_access -> ID array_index .

    TIMES           reduce using rule 107 (array_access -> ID array_index .)
    DIVIDE          reduce using rule 107 (array_access -> ID array_index .)
    PLUS            reduce using rule 107 (array_access -> ID array_index .)
    MINUS           reduce using rule 107 (array_access -> ID array_index .)
    NOT_EQUAL       reduce using rule 107 (array_access -> ID array_index .)
    IS_EQUAL        reduce using rule 107 (array_access -> ID array_index .)
    GREATER         reduce using rule 107 (array_access -> ID array_index .)
    GREATER_EQ      reduce using rule 107 (array_access -> ID array_index .)
    LESS            reduce using rule 107 (array_access -> ID array_index .)
    LESS_EQ         reduce using rule 107 (array_access -> ID array_index .)
    OR              reduce using rule 107 (array_access -> ID array_index .)
    AND             reduce using rule 107 (array_access -> ID array_index .)
    SEMICOLON       reduce using rule 107 (array_access -> ID array_index .)
    R_SQUARE_BRACKET reduce using rule 107 (array_access -> ID array_index .)
    R_PARENS        reduce using rule 107 (array_access -> ID array_index .)
    COMMA           reduce using rule 107 (array_access -> ID array_index .)


state 107

    (58) print -> PRINT L_PARENS print_aux . R_PARENS

    R_PARENS        shift and go to state 139


state 108

    (59) print -> PRINT L_PARENS R_PARENS .

    SEMICOLON       reduce using rule 59 (print -> PRINT L_PARENS R_PARENS .)


state 109

    (60) print_aux -> CONST_STRING . COMMA print_aux
    (61) print_aux -> CONST_STRING .

    COMMA           shift and go to state 140
    R_PARENS        reduce using rule 61 (print_aux -> CONST_STRING .)


state 110

    (62) print_aux -> ID . COMMA print_aux
    (63) print_aux -> ID .

    COMMA           shift and go to state 141
    R_PARENS        reduce using rule 63 (print_aux -> ID .)


state 111

    (50) if -> IF L_PARENS expression . R_PARENS block elif else
    (51) if -> IF L_PARENS expression . R_PARENS block elif
    (52) if -> IF L_PARENS expression . R_PARENS block else
    (53) if -> IF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 142


state 112

    (57) while -> WHILE L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 143


state 113

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON . function_type
    (19) function_type -> . type
    (20) function_type -> . VOID
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    VOID            shift and go to state 116
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    function_type                  shift and go to state 144
    type                           shift and go to state 115

state 114

    (8) function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 8 (function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type .)


state 115

    (19) function_type -> type .

    L_KEY_BRACKET   reduce using rule 19 (function_type -> type .)


state 116

    (20) function_type -> VOID .

    L_KEY_BRACKET   reduce using rule 20 (function_type -> VOID .)


state 117

    (15) function_params -> type ID array_index . COMMA function_params
    (16) function_params -> type ID array_index .

    COMMA           shift and go to state 145
    R_PARENS        reduce using rule 16 (function_params -> type ID array_index .)


state 118

    (17) function_params -> type ID COMMA . function_params
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    type                           shift and go to state 38
    function_params                shift and go to state 146

state 119

    (21) var -> type ID array_dim var_aux . SEMICOLON

    SEMICOLON       shift and go to state 147


state 120

    (22) var -> type ID array_dim SEMICOLON .

    INT             reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    FLOAT           reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    STRING          reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    ID              reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    RETURN          reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    PRINT           reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    IF              reduce using rule 22 (var -> type ID array_dim SEMICOLON .)
    WHILE           reduce using rule 22 (var -> type ID array_dim SEMICOLON .)


state 121

    (23) var -> type ID var_aux SEMICOLON .

    INT             reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    FLOAT           reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    STRING          reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    ID              reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    RETURN          reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    PRINT           reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    IF              reduce using rule 23 (var -> type ID var_aux SEMICOLON .)
    WHILE           reduce using rule 23 (var -> type ID var_aux SEMICOLON .)


state 122

    (42) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (43) array_dim -> L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 148


state 123

    (25) var_aux -> COMMA ID . array_dim var_aux
    (26) var_aux -> COMMA ID . array_dim
    (27) var_aux -> COMMA ID . var_aux
    (28) var_aux -> COMMA ID .
    (42) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (43) array_dim -> . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (25) var_aux -> . COMMA ID array_dim var_aux
    (26) var_aux -> . COMMA ID array_dim
    (27) var_aux -> . COMMA ID var_aux
    (28) var_aux -> . COMMA ID

    SEMICOLON       reduce using rule 28 (var_aux -> COMMA ID .)
    L_SQUARE_BRACKET shift and go to state 78
    COMMA           shift and go to state 79

    array_dim                      shift and go to state 149
    var_aux                        shift and go to state 150

state 124

    (44) assignment -> ID array_index EQUALS expression .

    SEMICOLON       reduce using rule 44 (assignment -> ID array_index EQUALS expression .)


state 125

    (45) assignment -> ID array_index EQUALS read .

    SEMICOLON       reduce using rule 45 (assignment -> ID array_index EQUALS read .)


state 126

    (66) read -> READ ID .

    SEMICOLON       reduce using rule 66 (read -> READ ID .)


state 127

    (40) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET . L_SQUARE_BRACKET expression R_SQUARE_BRACKET
    (41) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 151
    EQUALS          reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    IS_EQUAL        reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 41 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 128

    (67) params_pass -> L_PARENS expression params_pass_aux . R_PARENS

    R_PARENS        shift and go to state 152


state 129

    (68) params_pass -> L_PARENS expression R_PARENS .

    SEMICOLON       reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    TIMES           reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    IS_EQUAL        reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 68 (params_pass -> L_PARENS expression R_PARENS .)


state 130

    (70) params_pass_aux -> COMMA . expression params_pass_aux
    (71) params_pass_aux -> COMMA . expression
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 153
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 131

    (64) expression -> exp AND expression .

    SEMICOLON       reduce using rule 64 (expression -> exp AND expression .)
    R_SQUARE_BRACKET reduce using rule 64 (expression -> exp AND expression .)
    R_PARENS        reduce using rule 64 (expression -> exp AND expression .)
    COMMA           reduce using rule 64 (expression -> exp AND expression .)


state 132

    (73) exp -> xp OR exp .

    AND             reduce using rule 73 (exp -> xp OR exp .)
    SEMICOLON       reduce using rule 73 (exp -> xp OR exp .)
    R_SQUARE_BRACKET reduce using rule 73 (exp -> xp OR exp .)
    R_PARENS        reduce using rule 73 (exp -> xp OR exp .)
    COMMA           reduce using rule 73 (exp -> xp OR exp .)


state 133

    (75) xp -> x log_op x .

    OR              reduce using rule 75 (xp -> x log_op x .)
    AND             reduce using rule 75 (xp -> x log_op x .)
    SEMICOLON       reduce using rule 75 (xp -> x log_op x .)
    R_SQUARE_BRACKET reduce using rule 75 (xp -> x log_op x .)
    R_PARENS        reduce using rule 75 (xp -> x log_op x .)
    COMMA           reduce using rule 75 (xp -> x log_op x .)


state 134

    (79) x_aux -> PLUS term . x_aux
    (80) x_aux -> PLUS term .
    (79) x_aux -> . PLUS term x_aux
    (80) x_aux -> . PLUS term
    (81) x_aux -> . MINUS term x_aux
    (82) x_aux -> . MINUS term

    NOT_EQUAL       reduce using rule 80 (x_aux -> PLUS term .)
    IS_EQUAL        reduce using rule 80 (x_aux -> PLUS term .)
    GREATER         reduce using rule 80 (x_aux -> PLUS term .)
    GREATER_EQ      reduce using rule 80 (x_aux -> PLUS term .)
    LESS            reduce using rule 80 (x_aux -> PLUS term .)
    LESS_EQ         reduce using rule 80 (x_aux -> PLUS term .)
    OR              reduce using rule 80 (x_aux -> PLUS term .)
    AND             reduce using rule 80 (x_aux -> PLUS term .)
    SEMICOLON       reduce using rule 80 (x_aux -> PLUS term .)
    R_SQUARE_BRACKET reduce using rule 80 (x_aux -> PLUS term .)
    R_PARENS        reduce using rule 80 (x_aux -> PLUS term .)
    COMMA           reduce using rule 80 (x_aux -> PLUS term .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    x_aux                          shift and go to state 154

state 135

    (81) x_aux -> MINUS term . x_aux
    (82) x_aux -> MINUS term .
    (79) x_aux -> . PLUS term x_aux
    (80) x_aux -> . PLUS term
    (81) x_aux -> . MINUS term x_aux
    (82) x_aux -> . MINUS term

    NOT_EQUAL       reduce using rule 82 (x_aux -> MINUS term .)
    IS_EQUAL        reduce using rule 82 (x_aux -> MINUS term .)
    GREATER         reduce using rule 82 (x_aux -> MINUS term .)
    GREATER_EQ      reduce using rule 82 (x_aux -> MINUS term .)
    LESS            reduce using rule 82 (x_aux -> MINUS term .)
    LESS_EQ         reduce using rule 82 (x_aux -> MINUS term .)
    OR              reduce using rule 82 (x_aux -> MINUS term .)
    AND             reduce using rule 82 (x_aux -> MINUS term .)
    SEMICOLON       reduce using rule 82 (x_aux -> MINUS term .)
    R_SQUARE_BRACKET reduce using rule 82 (x_aux -> MINUS term .)
    R_PARENS        reduce using rule 82 (x_aux -> MINUS term .)
    COMMA           reduce using rule 82 (x_aux -> MINUS term .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98

    x_aux                          shift and go to state 155

state 136

    (91) term_aux -> TIMES factor . term_aux
    (92) term_aux -> TIMES factor .
    (91) term_aux -> . TIMES factor term_aux
    (92) term_aux -> . TIMES factor
    (93) term_aux -> . DIVIDE factor term_aux
    (94) term_aux -> . DIVIDE factor

    PLUS            reduce using rule 92 (term_aux -> TIMES factor .)
    MINUS           reduce using rule 92 (term_aux -> TIMES factor .)
    NOT_EQUAL       reduce using rule 92 (term_aux -> TIMES factor .)
    IS_EQUAL        reduce using rule 92 (term_aux -> TIMES factor .)
    GREATER         reduce using rule 92 (term_aux -> TIMES factor .)
    GREATER_EQ      reduce using rule 92 (term_aux -> TIMES factor .)
    LESS            reduce using rule 92 (term_aux -> TIMES factor .)
    LESS_EQ         reduce using rule 92 (term_aux -> TIMES factor .)
    OR              reduce using rule 92 (term_aux -> TIMES factor .)
    AND             reduce using rule 92 (term_aux -> TIMES factor .)
    SEMICOLON       reduce using rule 92 (term_aux -> TIMES factor .)
    R_SQUARE_BRACKET reduce using rule 92 (term_aux -> TIMES factor .)
    R_PARENS        reduce using rule 92 (term_aux -> TIMES factor .)
    COMMA           reduce using rule 92 (term_aux -> TIMES factor .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

    term_aux                       shift and go to state 156

state 137

    (93) term_aux -> DIVIDE factor . term_aux
    (94) term_aux -> DIVIDE factor .
    (91) term_aux -> . TIMES factor term_aux
    (92) term_aux -> . TIMES factor
    (93) term_aux -> . DIVIDE factor term_aux
    (94) term_aux -> . DIVIDE factor

    PLUS            reduce using rule 94 (term_aux -> DIVIDE factor .)
    MINUS           reduce using rule 94 (term_aux -> DIVIDE factor .)
    NOT_EQUAL       reduce using rule 94 (term_aux -> DIVIDE factor .)
    IS_EQUAL        reduce using rule 94 (term_aux -> DIVIDE factor .)
    GREATER         reduce using rule 94 (term_aux -> DIVIDE factor .)
    GREATER_EQ      reduce using rule 94 (term_aux -> DIVIDE factor .)
    LESS            reduce using rule 94 (term_aux -> DIVIDE factor .)
    LESS_EQ         reduce using rule 94 (term_aux -> DIVIDE factor .)
    OR              reduce using rule 94 (term_aux -> DIVIDE factor .)
    AND             reduce using rule 94 (term_aux -> DIVIDE factor .)
    SEMICOLON       reduce using rule 94 (term_aux -> DIVIDE factor .)
    R_SQUARE_BRACKET reduce using rule 94 (term_aux -> DIVIDE factor .)
    R_PARENS        reduce using rule 94 (term_aux -> DIVIDE factor .)
    COMMA           reduce using rule 94 (term_aux -> DIVIDE factor .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101

    term_aux                       shift and go to state 157

state 138

    (97) factor_aux -> L_PARENS expression R_PARENS .

    TIMES           reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    DIVIDE          reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    PLUS            reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    MINUS           reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    NOT_EQUAL       reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    IS_EQUAL        reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER         reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    GREATER_EQ      reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS            reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    LESS_EQ         reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    OR              reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    AND             reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    SEMICOLON       reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    R_PARENS        reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)
    COMMA           reduce using rule 97 (factor_aux -> L_PARENS expression R_PARENS .)


state 139

    (58) print -> PRINT L_PARENS print_aux R_PARENS .

    SEMICOLON       reduce using rule 58 (print -> PRINT L_PARENS print_aux R_PARENS .)


state 140

    (60) print_aux -> CONST_STRING COMMA . print_aux
    (60) print_aux -> . CONST_STRING COMMA print_aux
    (61) print_aux -> . CONST_STRING
    (62) print_aux -> . ID COMMA print_aux
    (63) print_aux -> . ID

    CONST_STRING    shift and go to state 109
    ID              shift and go to state 110

    print_aux                      shift and go to state 158

state 141

    (62) print_aux -> ID COMMA . print_aux
    (60) print_aux -> . CONST_STRING COMMA print_aux
    (61) print_aux -> . CONST_STRING
    (62) print_aux -> . ID COMMA print_aux
    (63) print_aux -> . ID

    CONST_STRING    shift and go to state 109
    ID              shift and go to state 110

    print_aux                      shift and go to state 159

state 142

    (50) if -> IF L_PARENS expression R_PARENS . block elif else
    (51) if -> IF L_PARENS expression R_PARENS . block elif
    (52) if -> IF L_PARENS expression R_PARENS . block else
    (53) if -> IF L_PARENS expression R_PARENS . block
    (72) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 161

    block                          shift and go to state 160

state 143

    (57) while -> WHILE L_PARENS expression R_PARENS . block
    (72) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 161

    block                          shift and go to state 162

state 144

    (7) function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type .

    L_KEY_BRACKET   reduce using rule 7 (function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type .)


state 145

    (15) function_params -> type ID array_index COMMA . function_params
    (15) function_params -> . type ID array_index COMMA function_params
    (16) function_params -> . type ID array_index
    (17) function_params -> . type ID COMMA function_params
    (18) function_params -> . type ID
    (37) type -> . INT
    (38) type -> . FLOAT
    (39) type -> . STRING

    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    STRING          shift and go to state 25

    type                           shift and go to state 38
    function_params                shift and go to state 163

state 146

    (17) function_params -> type ID COMMA function_params .

    R_PARENS        reduce using rule 17 (function_params -> type ID COMMA function_params .)


state 147

    (21) var -> type ID array_dim var_aux SEMICOLON .

    INT             reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    FLOAT           reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    STRING          reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    ID              reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    RETURN          reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    PRINT           reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    IF              reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)
    WHILE           reduce using rule 21 (var -> type ID array_dim var_aux SEMICOLON .)


state 148

    (42) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET . L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET
    (43) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    L_SQUARE_BRACKET shift and go to state 164
    SEMICOLON       reduce using rule 43 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 43 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 149

    (25) var_aux -> COMMA ID array_dim . var_aux
    (26) var_aux -> COMMA ID array_dim .
    (25) var_aux -> . COMMA ID array_dim var_aux
    (26) var_aux -> . COMMA ID array_dim
    (27) var_aux -> . COMMA ID var_aux
    (28) var_aux -> . COMMA ID

    SEMICOLON       reduce using rule 26 (var_aux -> COMMA ID array_dim .)
    COMMA           shift and go to state 79

    var_aux                        shift and go to state 165

state 150

    (27) var_aux -> COMMA ID var_aux .

    SEMICOLON       reduce using rule 27 (var_aux -> COMMA ID var_aux .)


state 151

    (40) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET . expression R_SQUARE_BRACKET
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 166
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 152

    (67) params_pass -> L_PARENS expression params_pass_aux R_PARENS .

    SEMICOLON       reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    TIMES           reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    DIVIDE          reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    PLUS            reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    MINUS           reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    NOT_EQUAL       reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    IS_EQUAL        reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER         reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    GREATER_EQ      reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS            reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    LESS_EQ         reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    OR              reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    AND             reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_SQUARE_BRACKET reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    R_PARENS        reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)
    COMMA           reduce using rule 67 (params_pass -> L_PARENS expression params_pass_aux R_PARENS .)


state 153

    (70) params_pass_aux -> COMMA expression . params_pass_aux
    (71) params_pass_aux -> COMMA expression .
    (70) params_pass_aux -> . COMMA expression params_pass_aux
    (71) params_pass_aux -> . COMMA expression

    R_PARENS        reduce using rule 71 (params_pass_aux -> COMMA expression .)
    COMMA           shift and go to state 130

    params_pass_aux                shift and go to state 167

state 154

    (79) x_aux -> PLUS term x_aux .

    NOT_EQUAL       reduce using rule 79 (x_aux -> PLUS term x_aux .)
    IS_EQUAL        reduce using rule 79 (x_aux -> PLUS term x_aux .)
    GREATER         reduce using rule 79 (x_aux -> PLUS term x_aux .)
    GREATER_EQ      reduce using rule 79 (x_aux -> PLUS term x_aux .)
    LESS            reduce using rule 79 (x_aux -> PLUS term x_aux .)
    LESS_EQ         reduce using rule 79 (x_aux -> PLUS term x_aux .)
    OR              reduce using rule 79 (x_aux -> PLUS term x_aux .)
    AND             reduce using rule 79 (x_aux -> PLUS term x_aux .)
    SEMICOLON       reduce using rule 79 (x_aux -> PLUS term x_aux .)
    R_SQUARE_BRACKET reduce using rule 79 (x_aux -> PLUS term x_aux .)
    R_PARENS        reduce using rule 79 (x_aux -> PLUS term x_aux .)
    COMMA           reduce using rule 79 (x_aux -> PLUS term x_aux .)


state 155

    (81) x_aux -> MINUS term x_aux .

    NOT_EQUAL       reduce using rule 81 (x_aux -> MINUS term x_aux .)
    IS_EQUAL        reduce using rule 81 (x_aux -> MINUS term x_aux .)
    GREATER         reduce using rule 81 (x_aux -> MINUS term x_aux .)
    GREATER_EQ      reduce using rule 81 (x_aux -> MINUS term x_aux .)
    LESS            reduce using rule 81 (x_aux -> MINUS term x_aux .)
    LESS_EQ         reduce using rule 81 (x_aux -> MINUS term x_aux .)
    OR              reduce using rule 81 (x_aux -> MINUS term x_aux .)
    AND             reduce using rule 81 (x_aux -> MINUS term x_aux .)
    SEMICOLON       reduce using rule 81 (x_aux -> MINUS term x_aux .)
    R_SQUARE_BRACKET reduce using rule 81 (x_aux -> MINUS term x_aux .)
    R_PARENS        reduce using rule 81 (x_aux -> MINUS term x_aux .)
    COMMA           reduce using rule 81 (x_aux -> MINUS term x_aux .)


state 156

    (91) term_aux -> TIMES factor term_aux .

    PLUS            reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    MINUS           reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    NOT_EQUAL       reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    IS_EQUAL        reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    GREATER         reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    GREATER_EQ      reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    LESS            reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    LESS_EQ         reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    OR              reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    AND             reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    SEMICOLON       reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    R_PARENS        reduce using rule 91 (term_aux -> TIMES factor term_aux .)
    COMMA           reduce using rule 91 (term_aux -> TIMES factor term_aux .)


state 157

    (93) term_aux -> DIVIDE factor term_aux .

    PLUS            reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    MINUS           reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    NOT_EQUAL       reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    IS_EQUAL        reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    GREATER         reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    GREATER_EQ      reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    LESS            reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    LESS_EQ         reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    OR              reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    AND             reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    SEMICOLON       reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    R_SQUARE_BRACKET reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    R_PARENS        reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)
    COMMA           reduce using rule 93 (term_aux -> DIVIDE factor term_aux .)


state 158

    (60) print_aux -> CONST_STRING COMMA print_aux .

    R_PARENS        reduce using rule 60 (print_aux -> CONST_STRING COMMA print_aux .)


state 159

    (62) print_aux -> ID COMMA print_aux .

    R_PARENS        reduce using rule 62 (print_aux -> ID COMMA print_aux .)


state 160

    (50) if -> IF L_PARENS expression R_PARENS block . elif else
    (51) if -> IF L_PARENS expression R_PARENS block . elif
    (52) if -> IF L_PARENS expression R_PARENS block . else
    (53) if -> IF L_PARENS expression R_PARENS block .
    (54) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (55) elif -> . ELIF L_PARENS expression R_PARENS block
    (56) else -> . ELSE block

    ID              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 53 (if -> IF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 170
    ELSE            shift and go to state 171

    elif                           shift and go to state 168
    else                           shift and go to state 169

state 161

    (72) block -> L_KEY_BRACKET . statement R_KEY_BRACKET
    (29) statement -> . statement_aux SEMICOLON
    (30) statement -> . statement_aux_2
    (31) statement_aux -> . assignment
    (32) statement_aux -> . function_call
    (33) statement_aux -> . return
    (34) statement_aux -> . print
    (35) statement_aux_2 -> . if
    (36) statement_aux_2 -> . while
    (44) assignment -> . ID array_index EQUALS expression
    (45) assignment -> . ID array_index EQUALS read
    (46) assignment -> . ID EQUALS expression
    (47) assignment -> . ID EQUALS read
    (48) function_call -> . ID params_pass
    (49) return -> . RETURN expression
    (58) print -> . PRINT L_PARENS print_aux R_PARENS
    (59) print -> . PRINT L_PARENS R_PARENS
    (50) if -> . IF L_PARENS expression R_PARENS block elif else
    (51) if -> . IF L_PARENS expression R_PARENS block elif
    (52) if -> . IF L_PARENS expression R_PARENS block else
    (53) if -> . IF L_PARENS expression R_PARENS block
    (57) while -> . WHILE L_PARENS expression R_PARENS block

    ID              shift and go to state 20
    RETURN          shift and go to state 32
    PRINT           shift and go to state 33
    IF              shift and go to state 34
    WHILE           shift and go to state 35

    statement                      shift and go to state 172
    statement_aux                  shift and go to state 21
    statement_aux_2                shift and go to state 22
    assignment                     shift and go to state 26
    function_call                  shift and go to state 27
    return                         shift and go to state 28
    print                          shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 162

    (57) while -> WHILE L_PARENS expression R_PARENS block .

    ID              reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)
    IF              reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 57 (while -> WHILE L_PARENS expression R_PARENS block .)


state 163

    (15) function_params -> type ID array_index COMMA function_params .

    R_PARENS        reduce using rule 15 (function_params -> type ID array_index COMMA function_params .)


state 164

    (42) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET . CONST_I R_SQUARE_BRACKET

    CONST_I         shift and go to state 173


state 165

    (25) var_aux -> COMMA ID array_dim var_aux .

    SEMICOLON       reduce using rule 25 (var_aux -> COMMA ID array_dim var_aux .)


state 166

    (40) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 174


state 167

    (70) params_pass_aux -> COMMA expression params_pass_aux .

    R_PARENS        reduce using rule 70 (params_pass_aux -> COMMA expression params_pass_aux .)


state 168

    (50) if -> IF L_PARENS expression R_PARENS block elif . else
    (51) if -> IF L_PARENS expression R_PARENS block elif .
    (56) else -> . ELSE block

    ID              reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 51 (if -> IF L_PARENS expression R_PARENS block elif .)
    ELSE            shift and go to state 171

    else                           shift and go to state 175

state 169

    (52) if -> IF L_PARENS expression R_PARENS block else .

    ID              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)
    RETURN          reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)
    PRINT           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)
    IF              reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)
    WHILE           reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)
    R_KEY_BRACKET   reduce using rule 52 (if -> IF L_PARENS expression R_PARENS block else .)


state 170

    (54) elif -> ELIF . L_PARENS expression R_PARENS block elif
    (55) elif -> ELIF . L_PARENS expression R_PARENS block

    L_PARENS        shift and go to state 176


state 171

    (56) else -> ELSE . block
    (72) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 161

    block                          shift and go to state 177

state 172

    (72) block -> L_KEY_BRACKET statement . R_KEY_BRACKET

    R_KEY_BRACKET   shift and go to state 178


state 173

    (42) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 179


state 174

    (40) array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .

    EQUALS          reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    TIMES           reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    PLUS            reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    IS_EQUAL        reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    GREATER_EQ      reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS            reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    LESS_EQ         reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    OR              reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    AND             reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    R_PARENS        reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 40 (array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET .)


state 175

    (50) if -> IF L_PARENS expression R_PARENS block elif else .

    ID              reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)
    RETURN          reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)
    PRINT           reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)
    IF              reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)
    WHILE           reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)
    R_KEY_BRACKET   reduce using rule 50 (if -> IF L_PARENS expression R_PARENS block elif else .)


state 176

    (54) elif -> ELIF L_PARENS . expression R_PARENS block elif
    (55) elif -> ELIF L_PARENS . expression R_PARENS block
    (64) expression -> . exp AND expression
    (65) expression -> . exp
    (73) exp -> . xp OR exp
    (74) exp -> . xp
    (75) xp -> . x log_op x
    (76) xp -> . x
    (77) x -> . term x_aux
    (78) x -> . term
    (89) term -> . factor term_aux
    (90) term -> . factor
    (95) factor -> . NOT factor_aux
    (96) factor -> . factor_aux
    (97) factor_aux -> . L_PARENS expression R_PARENS
    (98) factor_aux -> . PLUS const
    (99) factor_aux -> . MINUS const
    (100) factor_aux -> . const
    (101) const -> . ID
    (102) const -> . CONST_I
    (103) const -> . CONST_F
    (104) const -> . CONST_STRING
    (105) const -> . function_call
    (106) const -> . array_access
    (48) function_call -> . ID params_pass
    (107) array_access -> . ID array_index

    NOT             shift and go to state 56
    L_PARENS        shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 61
    ID              shift and go to state 62
    CONST_I         shift and go to state 63
    CONST_F         shift and go to state 64
    CONST_STRING    shift and go to state 65

    expression                     shift and go to state 180
    exp                            shift and go to state 51
    xp                             shift and go to state 52
    x                              shift and go to state 53
    term                           shift and go to state 54
    factor                         shift and go to state 55
    factor_aux                     shift and go to state 57
    const                          shift and go to state 60
    function_call                  shift and go to state 66
    array_access                   shift and go to state 67

state 177

    (56) else -> ELSE block .

    ID              reduce using rule 56 (else -> ELSE block .)
    RETURN          reduce using rule 56 (else -> ELSE block .)
    PRINT           reduce using rule 56 (else -> ELSE block .)
    IF              reduce using rule 56 (else -> ELSE block .)
    WHILE           reduce using rule 56 (else -> ELSE block .)
    R_KEY_BRACKET   reduce using rule 56 (else -> ELSE block .)


state 178

    (72) block -> L_KEY_BRACKET statement R_KEY_BRACKET .

    ELIF            reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    ELSE            reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    ID              reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    RETURN          reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    PRINT           reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    IF              reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    WHILE           reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)
    R_KEY_BRACKET   reduce using rule 72 (block -> L_KEY_BRACKET statement R_KEY_BRACKET .)


state 179

    (42) array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 42 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)
    COMMA           reduce using rule 42 (array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET .)


state 180

    (54) elif -> ELIF L_PARENS expression . R_PARENS block elif
    (55) elif -> ELIF L_PARENS expression . R_PARENS block

    R_PARENS        shift and go to state 181


state 181

    (54) elif -> ELIF L_PARENS expression R_PARENS . block elif
    (55) elif -> ELIF L_PARENS expression R_PARENS . block
    (72) block -> . L_KEY_BRACKET statement R_KEY_BRACKET

    L_KEY_BRACKET   shift and go to state 161

    block                          shift and go to state 182

state 182

    (54) elif -> ELIF L_PARENS expression R_PARENS block . elif
    (55) elif -> ELIF L_PARENS expression R_PARENS block .
    (54) elif -> . ELIF L_PARENS expression R_PARENS block elif
    (55) elif -> . ELIF L_PARENS expression R_PARENS block

    ELSE            reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ID              reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    RETURN          reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    PRINT           reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    IF              reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    WHILE           reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    R_KEY_BRACKET   reduce using rule 55 (elif -> ELIF L_PARENS expression R_PARENS block .)
    ELIF            shift and go to state 170

    elif                           shift and go to state 183

state 183

    (54) elif -> ELIF L_PARENS expression R_PARENS block elif .

    ELSE            reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    ID              reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    RETURN          reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    PRINT           reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    IF              reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    WHILE           reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)
    R_KEY_BRACKET   reduce using rule 54 (elif -> ELIF L_PARENS expression R_PARENS block elif .)

