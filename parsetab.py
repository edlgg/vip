
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN COLON COMMA CONST_F CONST_I CONST_STRING DIVIDE ELIF ELSE EQUALS FLOAT FUNCTION GLOBAL GREATER GREATER_EQ ID IF INT LESS LESS_EQ L_KEY_BRACKET L_PARENS L_SQUARE_BRACKET MAIN MINUS NOT NOT_EQUAL OR PLUS PRINT READ RETURN R_KEY_BRACKET R_PARENS R_SQUARE_BRACKET SEMICOLON STRING TIMES VOID WHILEprogram : program_aux main\n               | mainprogram_aux : program_aux function\n                   | functionfunction : function_header function_body n_end_functionmain : FUNCTION MAIN n_start_main function_body n_end_functionfunction_header : FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type\n                       | FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_typefunction_body : L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET\n                     | L_KEY_BRACKET statements R_KEY_BRACKETfunction_body_aux : var function_body_aux\n                         | varstatements : statement statements\n                           | statementfunction_params : type ID n_add_var array_index COMMA function_params\n                       | type ID n_add_var array_index\n                       | type ID n_add_var COMMA function_params\n                       | type ID n_add_varfunction_type : INT n_add_function_type\n                     | FLOAT n_add_function_type\n                     | STRING n_add_function_type\n                     | VOID n_add_function_typevar : type_aux ID n_add_var array_dim var_aux SEMICOLON\n           | type_aux ID n_add_var array_dim SEMICOLON\n           | type_aux ID n_add_var var_aux SEMICOLON\n           | type_aux ID n_add_var SEMICOLONtype_aux : GLOBAL type\n                | typevar_aux : COMMA ID n_add_var array_dim var_aux\n               | COMMA ID n_add_var array_dim\n               | COMMA ID n_add_var var_aux\n               | COMMA ID n_add_varstatement : statement_aux SEMICOLON\n                 | statement_aux_2statement_aux : assignment\n                     | function_call\n                     | return\n                     | printstatement_aux_2 : if\n                       | whiletype : INT n_record_last_type\n            | FLOAT n_record_last_type\n            | STRING n_record_last_typearray_index : L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET\n                   | L_SQUARE_BRACKET expression R_SQUARE_BRACKETarray_dim : L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET\n                 | L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKETassignment : ID n_make_assignment array_index ASSIGN  expression\n                  | ID n_make_assignment array_index ASSIGN  read\n                  | ID n_make_assignment ASSIGN expression\n                  | ID n_make_assignment ASSIGN readfunction_call : ID params_passreturn : RETURN expressionif : IF L_PARENS expression R_PARENS block elif else\n          | IF L_PARENS expression R_PARENS block elif\n          | IF L_PARENS expression R_PARENS block else\n          | IF L_PARENS expression R_PARENS blockelif : ELIF L_PARENS expression R_PARENS block elif\n            | ELIF L_PARENS expression R_PARENS blockelse : ELSE blockwhile : WHILE L_PARENS expression R_PARENS blockprint : PRINT L_PARENS print_aux R_PARENS\n             | PRINT L_PARENS R_PARENSprint_aux : CONST_STRING COMMA print_aux\n                 | CONST_STRING\n                 | ID COMMA print_aux\n                 | IDexpression : exp n_eval_exp AND n_add_operator expression\n                  | exp n_eval_expread : READ IDparams_pass : L_PARENS expression params_pass_aux R_PARENS\n                   | L_PARENS expression R_PARENS\n                   | L_PARENS R_PARENSparams_pass_aux : COMMA expression params_pass_aux\n                       | COMMA expressionblock : L_KEY_BRACKET statements R_KEY_BRACKETexp : xp n_eval_xp OR n_add_operator exp\n           | xp n_eval_xpxp : x n_eval_x log_op n_add_operator x\n          | x n_eval_xx : term n_eval_term PLUS n_add_operator x\n         | term n_eval_term MINUS n_add_operator x\n         | term n_eval_termlog_op : NOT_EQUAL\n              | EQUALS\n              | GREATER\n              | GREATER_EQ\n              | LESS\n              | LESS_EQterm : factor n_eval_factor TIMES n_add_operator term\n            | factor n_eval_factor DIVIDE n_add_operator term\n            | factor n_eval_factorfactor : NOT factor_aux\n              | factor_auxfactor_aux : L_PARENS expression R_PARENS\n                  | PLUS const\n                  | MINUS const\n                  | constconst : ID n_add_operand\n             | CONST_I n_add_operand\n             | CONST_F n_add_operand\n             | CONST_STRING n_add_operand\n             | function_call\n             | array_accessarray_access : ID array_indexn_start_main : n_add_function_name : n_add_function_type : n_end_function : n_add_var : n_record_last_type : n_eval_exp : n_eval_xp : n_eval_x : n_eval_factor : n_eval_term : n_add_operand : n_add_operator : n_make_assignment : '
    
_lr_action_items = {'FUNCTION':([0,2,4,8,11,15,42,79,],[5,5,-4,-3,-109,-5,-10,-9,]),'$end':([1,3,7,39,42,75,79,],[0,-2,-1,-109,-10,-6,-9,]),'MAIN':([5,],[9,]),'ID':([5,12,16,18,19,20,23,25,30,31,32,33,34,35,43,48,49,50,51,52,53,59,60,62,64,72,73,74,78,82,83,111,113,114,117,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,149,150,159,160,161,162,163,164,165,168,169,170,178,181,190,191,201,202,203,204,212,213,],[10,21,21,-12,21,45,-34,-28,-39,-40,-111,-111,-111,66,-11,66,-33,-27,-41,-42,-43,66,66,66,66,103,66,66,108,66,66,-26,152,66,155,66,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,103,103,-24,-25,66,66,66,66,66,66,66,-57,21,-61,-23,66,-55,-56,-54,66,-60,-76,-59,-58,]),'L_KEY_BRACKET':([6,9,13,139,140,142,143,144,145,146,171,172,173,174,175,193,211,],[12,-106,12,169,169,-8,-108,-108,-108,-108,-7,-19,-20,-21,-22,169,169,]),'L_PARENS':([10,14,21,35,36,37,38,48,62,64,66,73,74,82,83,114,121,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,181,192,202,],[-107,40,48,64,72,73,74,64,64,64,48,64,64,64,64,64,64,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,64,64,64,64,64,64,64,64,202,64,]),'GLOBAL':([12,18,111,149,150,178,],[24,24,-26,-24,-25,-23,]),'INT':([12,18,24,40,107,111,141,149,150,177,178,195,],[32,32,32,32,143,-26,143,-24,-25,32,-23,32,]),'FLOAT':([12,18,24,40,107,111,141,149,150,177,178,195,],[33,33,33,33,144,-26,144,-24,-25,33,-23,33,]),'STRING':([12,18,24,40,107,111,141,149,150,177,178,195,],[34,34,34,34,145,-26,145,-24,-25,34,-23,34,]),'RETURN':([12,16,18,19,23,30,31,43,49,111,149,150,168,169,170,178,190,191,201,203,204,212,213,],[35,35,-12,35,-34,-39,-40,-11,-33,-26,-24,-25,-57,35,-61,-23,-55,-56,-54,-60,-76,-59,-58,]),'PRINT':([12,16,18,19,23,30,31,43,49,111,149,150,168,169,170,178,190,191,201,203,204,212,213,],[36,36,-12,36,-34,-39,-40,-11,-33,-26,-24,-25,-57,36,-61,-23,-55,-56,-54,-60,-76,-59,-58,]),'IF':([12,16,18,19,23,30,31,43,49,111,149,150,168,169,170,178,190,191,201,203,204,212,213,],[37,37,-12,37,-34,-39,-40,-11,-33,-26,-24,-25,-57,37,-61,-23,-55,-56,-54,-60,-76,-59,-58,]),'WHILE':([12,16,18,19,23,30,31,43,49,111,149,150,168,169,170,178,190,191,201,203,204,212,213,],[38,38,-12,38,-34,-39,-40,-11,-33,-26,-24,-25,-57,38,-61,-23,-55,-56,-54,-60,-76,-59,-58,]),'R_KEY_BRACKET':([17,19,23,30,31,41,44,49,168,170,190,191,194,201,203,204,212,213,],[42,-14,-34,-39,-40,79,-13,-33,-57,-61,-55,-56,204,-54,-60,-76,-59,-58,]),'ASSIGN':([21,46,81,156,208,],[-119,82,114,-45,-44,]),'L_SQUARE_BRACKET':([21,45,46,66,80,108,147,152,156,179,180,],[-119,-110,83,83,112,-110,83,-110,181,197,112,]),'SEMICOLON':([22,26,27,28,29,45,47,54,55,56,57,58,61,63,65,66,67,68,69,70,71,80,85,86,87,88,89,90,91,92,93,95,96,97,98,99,101,109,110,115,116,120,135,136,148,152,153,154,155,156,157,179,180,183,184,185,186,187,188,189,198,199,207,208,210,],[49,-35,-36,-37,-38,-110,-52,-53,-112,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,111,-73,-69,-78,-80,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-63,149,150,-50,-51,-72,-95,-62,178,-110,-48,-49,-70,-45,-71,-47,-32,-68,-77,-79,-81,-82,-90,-91,-30,-31,-29,-44,-46,]),'NOT':([35,48,64,73,74,82,83,114,121,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,181,202,],[62,62,62,62,62,62,62,62,62,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,62,62,62,62,62,62,62,62,62,]),'PLUS':([35,47,48,58,61,62,63,64,65,66,67,68,69,70,71,73,74,82,83,85,89,90,91,92,93,95,96,97,98,99,114,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,156,157,159,160,161,162,163,164,165,181,188,189,202,208,],[59,-52,59,-116,-115,59,-94,59,-98,-117,-117,-117,-117,-103,-104,59,59,59,59,-73,131,-96,-97,-92,-93,-99,-105,-100,-101,-102,59,-72,59,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,-95,-45,-71,59,59,59,59,59,59,59,59,-90,-91,59,-44,]),'MINUS':([35,47,48,58,61,62,63,64,65,66,67,68,69,70,71,73,74,82,83,85,89,90,91,92,93,95,96,97,98,99,114,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,156,157,159,160,161,162,163,164,165,181,188,189,202,208,],[60,-52,60,-116,-115,60,-94,60,-98,-117,-117,-117,-117,-103,-104,60,60,60,60,-73,132,-96,-97,-92,-93,-99,-105,-100,-101,-102,60,-72,60,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,-95,-45,-71,60,60,60,60,60,60,60,60,-90,-91,60,-44,]),'CONST_I':([35,48,59,60,62,64,73,74,82,83,112,114,121,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,181,197,202,],[67,67,67,67,67,67,67,67,67,67,151,67,67,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,67,67,67,67,67,67,67,67,206,67,]),'CONST_F':([35,48,59,60,62,64,73,74,82,83,114,121,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,181,202,],[68,68,68,68,68,68,68,68,68,68,68,68,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,68,68,68,68,68,68,68,68,68,]),'CONST_STRING':([35,48,59,60,62,64,72,73,74,82,83,114,121,122,123,124,125,126,127,128,129,130,131,132,133,134,137,138,159,160,161,162,163,164,165,181,202,],[69,69,69,69,69,69,102,69,69,69,69,69,69,-118,-118,-118,-84,-85,-86,-87,-88,-89,-118,-118,-118,-118,102,102,69,69,69,69,69,69,69,69,69,]),'R_PARENS':([40,47,48,55,56,57,58,61,63,65,66,67,68,69,70,71,72,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,108,119,120,135,147,156,157,158,166,167,176,182,183,184,185,186,187,188,189,196,205,208,209,],[77,-52,85,-112,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,101,106,120,-73,-69,-78,-80,-83,-96,-97,-92,-93,135,-99,-105,-100,-101,-102,136,-65,-67,139,140,-110,157,-72,-95,-18,-45,-71,-75,-64,-66,-16,-74,-68,-77,-79,-81,-82,-90,-91,-17,-15,-44,211,]),'COMMA':([45,47,55,56,57,58,61,63,65,66,67,68,69,70,71,80,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,102,103,108,109,120,135,147,152,156,157,158,176,179,180,183,184,185,186,187,188,189,198,208,210,],[-110,-52,-112,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,113,121,-73,-69,-78,-80,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,137,138,-110,113,-72,-95,177,-110,-45,-71,121,195,-47,113,-68,-77,-79,-81,-82,-90,-91,113,-44,-46,]),'TIMES':([47,61,63,65,66,67,68,69,70,71,85,90,91,92,93,95,96,97,98,99,120,135,156,157,208,],[-52,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,-96,-97,133,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-44,]),'DIVIDE':([47,61,63,65,66,67,68,69,70,71,85,90,91,92,93,95,96,97,98,99,120,135,156,157,208,],[-52,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,-96,-97,134,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-44,]),'NOT_EQUAL':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,125,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'EQUALS':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,126,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'GREATER':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,127,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'GREATER_EQ':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,128,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'LESS':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,129,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'LESS_EQ':([47,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,186,187,188,189,208,],[-52,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,130,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-81,-82,-90,-91,-44,]),'OR':([47,56,57,58,61,63,65,66,67,68,69,70,71,85,87,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,185,186,187,188,189,208,],[-52,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,123,-80,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-79,-81,-82,-90,-91,-44,]),'AND':([47,55,56,57,58,61,63,65,66,67,68,69,70,71,85,86,87,88,89,90,91,92,93,95,96,97,98,99,120,135,156,157,184,185,186,187,188,189,208,],[-52,-112,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,122,-78,-80,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,-72,-95,-45,-71,-77,-79,-81,-82,-90,-91,-44,]),'R_SQUARE_BRACKET':([47,55,56,57,58,61,63,65,66,67,68,69,70,71,85,86,87,88,89,90,91,92,93,95,96,97,98,99,118,120,135,151,156,157,183,184,185,186,187,188,189,200,206,208,],[-52,-112,-113,-114,-116,-115,-94,-98,-117,-117,-117,-117,-103,-104,-73,-69,-78,-80,-83,-96,-97,-92,-93,-99,-105,-100,-101,-102,156,-72,-95,179,-45,-71,-68,-77,-79,-81,-82,-90,-91,208,210,-44,]),'COLON':([77,106,],[107,141,]),'READ':([82,114,],[117,117,]),'VOID':([107,141,],[146,146,]),'ELIF':([168,204,212,],[192,-76,192,]),'ELSE':([168,190,204,212,213,],[193,193,-76,-59,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([0,],[2,]),'main':([0,2,],[3,7,]),'function':([0,2,],[4,8,]),'function_header':([0,2,],[6,6,]),'function_body':([6,13,],[11,39,]),'n_start_main':([9,],[13,]),'n_add_function_name':([10,],[14,]),'n_end_function':([11,39,],[15,75,]),'function_body_aux':([12,18,],[16,43,]),'statements':([12,16,19,169,],[17,41,44,194,]),'var':([12,18,],[18,18,]),'statement':([12,16,19,169,],[19,19,19,19,]),'type_aux':([12,18,],[20,20,]),'statement_aux':([12,16,19,169,],[22,22,22,22,]),'statement_aux_2':([12,16,19,169,],[23,23,23,23,]),'type':([12,18,24,40,177,195,],[25,25,50,78,78,78,]),'assignment':([12,16,19,169,],[26,26,26,26,]),'function_call':([12,16,19,35,48,59,60,62,64,73,74,82,83,114,121,159,160,161,162,163,164,165,169,181,202,],[27,27,27,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,27,70,70,]),'return':([12,16,19,169,],[28,28,28,28,]),'print':([12,16,19,169,],[29,29,29,29,]),'if':([12,16,19,169,],[30,30,30,30,]),'while':([12,16,19,169,],[31,31,31,31,]),'n_make_assignment':([21,],[46,]),'params_pass':([21,66,],[47,47,]),'n_record_last_type':([32,33,34,],[51,52,53,]),'expression':([35,48,64,73,74,82,83,114,121,159,181,202,],[54,84,94,104,105,115,118,153,158,183,200,209,]),'exp':([35,48,64,73,74,82,83,114,121,159,160,181,202,],[55,55,55,55,55,55,55,55,55,55,184,55,55,]),'xp':([35,48,64,73,74,82,83,114,121,159,160,181,202,],[56,56,56,56,56,56,56,56,56,56,56,56,56,]),'x':([35,48,64,73,74,82,83,114,121,159,160,161,162,163,181,202,],[57,57,57,57,57,57,57,57,57,57,57,185,186,187,57,57,]),'term':([35,48,64,73,74,82,83,114,121,159,160,161,162,163,164,165,181,202,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,188,189,58,58,]),'factor':([35,48,64,73,74,82,83,114,121,159,160,161,162,163,164,165,181,202,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'factor_aux':([35,48,62,64,73,74,82,83,114,121,159,160,161,162,163,164,165,181,202,],[63,63,93,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'const':([35,48,59,60,62,64,73,74,82,83,114,121,159,160,161,162,163,164,165,181,202,],[65,65,90,91,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'array_access':([35,48,59,60,62,64,73,74,82,83,114,121,159,160,161,162,163,164,165,181,202,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'function_params':([40,177,195,],[76,196,205,]),'n_add_var':([45,108,152,],[80,147,180,]),'array_index':([46,66,147,],[81,96,176,]),'n_eval_exp':([55,],[86,]),'n_eval_xp':([56,],[87,]),'n_eval_x':([57,],[88,]),'n_eval_term':([58,],[89,]),'n_eval_factor':([61,],[92,]),'n_add_operand':([66,67,68,69,],[95,97,98,99,]),'print_aux':([72,137,138,],[100,166,167,]),'array_dim':([80,180,],[109,198,]),'var_aux':([80,109,180,198,],[110,148,199,207,]),'read':([82,114,],[116,154,]),'params_pass_aux':([84,158,],[119,182,]),'log_op':([88,],[124,]),'function_type':([107,141,],[142,171,]),'n_add_operator':([122,123,124,131,132,133,134,],[159,160,161,162,163,164,165,]),'block':([139,140,193,211,],[168,170,203,212,]),'n_add_function_type':([143,144,145,146,],[172,173,174,175,]),'elif':([168,212,],[190,213,]),'else':([168,190,],[191,201,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_aux main','program',2,'p_program','parser.py',18),
  ('program -> main','program',1,'p_program','parser.py',19),
  ('program_aux -> program_aux function','program_aux',2,'p_program_aux','parser.py',23),
  ('program_aux -> function','program_aux',1,'p_program_aux','parser.py',24),
  ('function -> function_header function_body n_end_function','function',3,'p_function','parser.py',28),
  ('main -> FUNCTION MAIN n_start_main function_body n_end_function','main',5,'p_main','parser.py',32),
  ('function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type','function_header',8,'p_function_header','parser.py',36),
  ('function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type','function_header',7,'p_function_header','parser.py',37),
  ('function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET','function_body',4,'p_function_body','parser.py',41),
  ('function_body -> L_KEY_BRACKET statements R_KEY_BRACKET','function_body',3,'p_function_body','parser.py',42),
  ('function_body_aux -> var function_body_aux','function_body_aux',2,'p_function_body_aux','parser.py',46),
  ('function_body_aux -> var','function_body_aux',1,'p_function_body_aux','parser.py',47),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',51),
  ('statements -> statement','statements',1,'p_statements','parser.py',52),
  ('function_params -> type ID n_add_var array_index COMMA function_params','function_params',6,'p_function_params','parser.py',56),
  ('function_params -> type ID n_add_var array_index','function_params',4,'p_function_params','parser.py',57),
  ('function_params -> type ID n_add_var COMMA function_params','function_params',5,'p_function_params','parser.py',58),
  ('function_params -> type ID n_add_var','function_params',3,'p_function_params','parser.py',59),
  ('function_type -> INT n_add_function_type','function_type',2,'p_function_type','parser.py',63),
  ('function_type -> FLOAT n_add_function_type','function_type',2,'p_function_type','parser.py',64),
  ('function_type -> STRING n_add_function_type','function_type',2,'p_function_type','parser.py',65),
  ('function_type -> VOID n_add_function_type','function_type',2,'p_function_type','parser.py',66),
  ('var -> type_aux ID n_add_var array_dim var_aux SEMICOLON','var',6,'p_var','parser.py',70),
  ('var -> type_aux ID n_add_var array_dim SEMICOLON','var',5,'p_var','parser.py',71),
  ('var -> type_aux ID n_add_var var_aux SEMICOLON','var',5,'p_var','parser.py',72),
  ('var -> type_aux ID n_add_var SEMICOLON','var',4,'p_var','parser.py',73),
  ('type_aux -> GLOBAL type','type_aux',2,'p_type_aux','parser.py',77),
  ('type_aux -> type','type_aux',1,'p_type_aux','parser.py',78),
  ('var_aux -> COMMA ID n_add_var array_dim var_aux','var_aux',5,'p_var_aux','parser.py',82),
  ('var_aux -> COMMA ID n_add_var array_dim','var_aux',4,'p_var_aux','parser.py',83),
  ('var_aux -> COMMA ID n_add_var var_aux','var_aux',4,'p_var_aux','parser.py',84),
  ('var_aux -> COMMA ID n_add_var','var_aux',3,'p_var_aux','parser.py',85),
  ('statement -> statement_aux SEMICOLON','statement',2,'p_statement','parser.py',89),
  ('statement -> statement_aux_2','statement',1,'p_statement','parser.py',90),
  ('statement_aux -> assignment','statement_aux',1,'p_statement_aux','parser.py',94),
  ('statement_aux -> function_call','statement_aux',1,'p_statement_aux','parser.py',95),
  ('statement_aux -> return','statement_aux',1,'p_statement_aux','parser.py',96),
  ('statement_aux -> print','statement_aux',1,'p_statement_aux','parser.py',97),
  ('statement_aux_2 -> if','statement_aux_2',1,'p_statement_aux_2','parser.py',101),
  ('statement_aux_2 -> while','statement_aux_2',1,'p_statement_aux_2','parser.py',102),
  ('type -> INT n_record_last_type','type',2,'p_type','parser.py',106),
  ('type -> FLOAT n_record_last_type','type',2,'p_type','parser.py',107),
  ('type -> STRING n_record_last_type','type',2,'p_type','parser.py',108),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',6,'p_array_index','parser.py',112),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',3,'p_array_index','parser.py',113),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',6,'p_array_dim','parser.py',117),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',3,'p_array_dim','parser.py',118),
  ('assignment -> ID n_make_assignment array_index ASSIGN expression','assignment',5,'p_assignment','parser.py',122),
  ('assignment -> ID n_make_assignment array_index ASSIGN read','assignment',5,'p_assignment','parser.py',123),
  ('assignment -> ID n_make_assignment ASSIGN expression','assignment',4,'p_assignment','parser.py',124),
  ('assignment -> ID n_make_assignment ASSIGN read','assignment',4,'p_assignment','parser.py',125),
  ('function_call -> ID params_pass','function_call',2,'p_function_call','parser.py',129),
  ('return -> RETURN expression','return',2,'p_return','parser.py',133),
  ('if -> IF L_PARENS expression R_PARENS block elif else','if',7,'p_if','parser.py',137),
  ('if -> IF L_PARENS expression R_PARENS block elif','if',6,'p_if','parser.py',138),
  ('if -> IF L_PARENS expression R_PARENS block else','if',6,'p_if','parser.py',139),
  ('if -> IF L_PARENS expression R_PARENS block','if',5,'p_if','parser.py',140),
  ('elif -> ELIF L_PARENS expression R_PARENS block elif','elif',6,'p_elif','parser.py',144),
  ('elif -> ELIF L_PARENS expression R_PARENS block','elif',5,'p_elif','parser.py',145),
  ('else -> ELSE block','else',2,'p_else','parser.py',149),
  ('while -> WHILE L_PARENS expression R_PARENS block','while',5,'p_while','parser.py',153),
  ('print -> PRINT L_PARENS print_aux R_PARENS','print',4,'p_print','parser.py',157),
  ('print -> PRINT L_PARENS R_PARENS','print',3,'p_print','parser.py',158),
  ('print_aux -> CONST_STRING COMMA print_aux','print_aux',3,'p_print_aux','parser.py',162),
  ('print_aux -> CONST_STRING','print_aux',1,'p_print_aux','parser.py',163),
  ('print_aux -> ID COMMA print_aux','print_aux',3,'p_print_aux','parser.py',164),
  ('print_aux -> ID','print_aux',1,'p_print_aux','parser.py',165),
  ('expression -> exp n_eval_exp AND n_add_operator expression','expression',5,'p_expression','parser.py',169),
  ('expression -> exp n_eval_exp','expression',2,'p_expression','parser.py',170),
  ('read -> READ ID','read',2,'p_read','parser.py',174),
  ('params_pass -> L_PARENS expression params_pass_aux R_PARENS','params_pass',4,'p_params_pass','parser.py',178),
  ('params_pass -> L_PARENS expression R_PARENS','params_pass',3,'p_params_pass','parser.py',179),
  ('params_pass -> L_PARENS R_PARENS','params_pass',2,'p_params_pass','parser.py',180),
  ('params_pass_aux -> COMMA expression params_pass_aux','params_pass_aux',3,'p_params_pass_aux','parser.py',184),
  ('params_pass_aux -> COMMA expression','params_pass_aux',2,'p_params_pass_aux','parser.py',185),
  ('block -> L_KEY_BRACKET statements R_KEY_BRACKET','block',3,'p_block','parser.py',189),
  ('exp -> xp n_eval_xp OR n_add_operator exp','exp',5,'p_exp','parser.py',193),
  ('exp -> xp n_eval_xp','exp',2,'p_exp','parser.py',194),
  ('xp -> x n_eval_x log_op n_add_operator x','xp',5,'p_xp','parser.py',198),
  ('xp -> x n_eval_x','xp',2,'p_xp','parser.py',199),
  ('x -> term n_eval_term PLUS n_add_operator x','x',5,'p_x','parser.py',203),
  ('x -> term n_eval_term MINUS n_add_operator x','x',5,'p_x','parser.py',204),
  ('x -> term n_eval_term','x',2,'p_x','parser.py',205),
  ('log_op -> NOT_EQUAL','log_op',1,'p_log_op','parser.py',209),
  ('log_op -> EQUALS','log_op',1,'p_log_op','parser.py',210),
  ('log_op -> GREATER','log_op',1,'p_log_op','parser.py',211),
  ('log_op -> GREATER_EQ','log_op',1,'p_log_op','parser.py',212),
  ('log_op -> LESS','log_op',1,'p_log_op','parser.py',213),
  ('log_op -> LESS_EQ','log_op',1,'p_log_op','parser.py',214),
  ('term -> factor n_eval_factor TIMES n_add_operator term','term',5,'p_term','parser.py',218),
  ('term -> factor n_eval_factor DIVIDE n_add_operator term','term',5,'p_term','parser.py',219),
  ('term -> factor n_eval_factor','term',2,'p_term','parser.py',220),
  ('factor -> NOT factor_aux','factor',2,'p_factor','parser.py',224),
  ('factor -> factor_aux','factor',1,'p_factor','parser.py',225),
  ('factor_aux -> L_PARENS expression R_PARENS','factor_aux',3,'p_factor_aux','parser.py',229),
  ('factor_aux -> PLUS const','factor_aux',2,'p_factor_aux','parser.py',230),
  ('factor_aux -> MINUS const','factor_aux',2,'p_factor_aux','parser.py',231),
  ('factor_aux -> const','factor_aux',1,'p_factor_aux','parser.py',232),
  ('const -> ID n_add_operand','const',2,'p_const','parser.py',236),
  ('const -> CONST_I n_add_operand','const',2,'p_const','parser.py',237),
  ('const -> CONST_F n_add_operand','const',2,'p_const','parser.py',238),
  ('const -> CONST_STRING n_add_operand','const',2,'p_const','parser.py',239),
  ('const -> function_call','const',1,'p_const','parser.py',240),
  ('const -> array_access','const',1,'p_const','parser.py',241),
  ('array_access -> ID array_index','array_access',2,'p_array_access','parser.py',245),
  ('n_start_main -> <empty>','n_start_main',0,'p_n_start_main','parser.py',251),
  ('n_add_function_name -> <empty>','n_add_function_name',0,'p_n_add_function_name','parser.py',256),
  ('n_add_function_type -> <empty>','n_add_function_type',0,'p_n_add_function_type','parser.py',261),
  ('n_end_function -> <empty>','n_end_function',0,'p_n_end_function','parser.py',267),
  ('n_add_var -> <empty>','n_add_var',0,'p_n_add_var','parser.py',272),
  ('n_record_last_type -> <empty>','n_record_last_type',0,'p_n_record_last_type','parser.py',278),
  ('n_eval_exp -> <empty>','n_eval_exp',0,'p_n_eval_exp','parser.py',284),
  ('n_eval_xp -> <empty>','n_eval_xp',0,'p_n_eval_xp','parser.py',289),
  ('n_eval_x -> <empty>','n_eval_x',0,'p_n_eval_x','parser.py',294),
  ('n_eval_factor -> <empty>','n_eval_factor',0,'p_n_eval_factor','parser.py',299),
  ('n_eval_term -> <empty>','n_eval_term',0,'p_n_eval_term','parser.py',304),
  ('n_add_operand -> <empty>','n_add_operand',0,'p_n_add_operand','parser.py',309),
  ('n_add_operator -> <empty>','n_add_operator',0,'p_n_add_operator','parser.py',316),
  ('n_make_assignment -> <empty>','n_make_assignment',0,'p_n_make_assignment','parser.py',321),
]
