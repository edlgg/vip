
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN COLON COMMA CONST_F CONST_I CONST_STRING DIVIDE ELIF ELSE EQUALS FLOAT FUNCTION GLOBAL GREATER GREATER_EQ ID IF INT LESS LESS_EQ L_KEY_BRACKET L_PARENS L_SQUARE_BRACKET MAIN MINUS NOT NOT_EQUAL OR PLUS PRINT READ RETURN R_KEY_BRACKET R_PARENS R_SQUARE_BRACKET SEMICOLON STRING TIMES VOID WHILEprogram : program_aux main\n               | mainprogram_aux : program_aux function\n                   | functionfunction : function_header function_bodymain : FUNCTION MAIN function_bodyfunction_header : FUNCTION ID L_PARENS function_params R_PARENS COLON function_type\n                       | FUNCTION ID L_PARENS R_PARENS COLON function_typefunction_body : L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET\n                     | L_KEY_BRACKET statements R_KEY_BRACKETfunction_body_aux : var function_body_aux\n                         | varstatements : statement statements\n                           | statementfunction_params : type ID array_index COMMA function_params\n                       | type ID array_index\n                       | type ID COMMA function_params\n                       | type IDfunction_type : type\n                     | VOIDvar : type_aux ID n_var_name array_dim var_aux SEMICOLON\n           | type_aux ID n_var_name array_dim SEMICOLON\n           | type_aux ID n_var_name var_aux SEMICOLON\n           | type_aux ID n_var_name SEMICOLONtype_aux : GLOBAL type\n                | typevar_aux : COMMA ID array_dim var_aux\n               | COMMA ID array_dim\n               | COMMA ID var_aux\n               | COMMA IDstatement : statement_aux SEMICOLON\n                 | statement_aux_2statement_aux : assignment\n                     | function_call\n                     | return\n                     | printstatement_aux_2 : if\n                       | whiletype : INT\n            | FLOAT\n            | STRINGarray_index : L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET\n                   | L_SQUARE_BRACKET expression R_SQUARE_BRACKETarray_dim : L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET\n                 | L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKETassignment : ID array_index ASSIGN expression\n                  | ID array_index ASSIGN read\n                  | ID ASSIGN expression\n                  | ID ASSIGN readfunction_call : ID params_passreturn : RETURN expressionif : IF L_PARENS expression R_PARENS block elif else\n          | IF L_PARENS expression R_PARENS block elif\n          | IF L_PARENS expression R_PARENS block else\n          | IF L_PARENS expression R_PARENS blockelif : ELIF L_PARENS expression R_PARENS block elif\n            | ELIF L_PARENS expression R_PARENS blockelse : ELSE blockwhile : WHILE L_PARENS expression R_PARENS blockprint : PRINT L_PARENS print_aux R_PARENS\n             | PRINT L_PARENS R_PARENSprint_aux : CONST_STRING COMMA print_aux\n                 | CONST_STRING\n                 | ID COMMA print_aux\n                 | IDexpression : exp n_eval_exp AND n_add_operator expression\n                  | exp n_eval_expread : READ IDparams_pass : L_PARENS expression params_pass_aux R_PARENS\n                   | L_PARENS expression R_PARENS\n                   | L_PARENS R_PARENSparams_pass_aux : COMMA expression params_pass_aux\n                       | COMMA expressionblock : L_KEY_BRACKET statements R_KEY_BRACKETexp : xp n_eval_xp OR n_add_operator exp\n           | xp n_eval_xpxp : x n_eval_x log_op n_add_operator x\n          | x n_eval_xx : term n_eval_term x_aux\n         | term n_eval_termx_aux : PLUS n_add_operator term x_aux\n             | PLUS n_add_operator term\n             | MINUS n_add_operator term x_aux\n             | MINUS n_add_operator termlog_op : NOT_EQUAL\n              | EQUALS\n              | GREATER\n              | GREATER_EQ\n              | LESS\n              | LESS_EQterm : factor n_eval_factor term_aux\n            | factor n_eval_factorterm_aux : TIMES n_add_operator factor term_aux\n                | TIMES n_add_operator factor\n                | DIVIDE n_add_operator factor term_aux\n                | DIVIDE n_add_operator factorfactor : NOT factor_aux\n              | factor_auxfactor_aux : L_PARENS expression R_PARENS\n                  | PLUS const\n                  | MINUS const\n                  | constconst : ID n_add_operand\n             | CONST_I n_add_operand\n             | CONST_F n_add_operand\n             | CONST_STRING n_add_operand\n             | function_call\n             | array_accessarray_access : ID array_indexn_var_name : n_eval_exp : n_eval_xp : n_eval_x : n_eval_factor : n_eval_term : n_add_operand : n_add_operator : '
    
_lr_action_items = {'FUNCTION':([0,2,4,8,11,42,77,],[5,5,-4,-3,-5,-10,-9,]),'$end':([1,3,7,13,42,77,],[0,-2,-1,-6,-10,-9,]),'MAIN':([5,],[9,]),'ID':([5,12,15,17,18,19,22,24,29,30,31,32,33,34,40,43,47,49,50,51,52,59,61,62,64,71,72,73,79,82,114,116,123,124,125,126,127,128,129,130,131,132,134,135,137,138,141,142,149,150,153,156,157,158,159,160,161,162,165,166,167,169,182,183,194,195,196,197,202,203,],[10,20,20,-12,20,45,-32,-26,-37,-38,-39,-40,-41,65,76,-11,65,65,65,-31,-25,65,65,65,65,103,65,65,65,119,-24,152,65,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,103,103,-22,-23,65,65,65,65,65,65,65,65,-55,20,-59,-21,-53,-54,-52,65,-58,-74,-57,-56,]),'L_KEY_BRACKET':([6,9,31,32,33,107,108,109,143,144,145,185,201,],[12,12,-39,-40,-41,-8,-19,-20,166,166,-7,166,166,]),'L_PARENS':([10,20,34,35,36,37,47,49,50,59,61,65,72,73,79,123,124,125,126,127,128,129,130,131,132,134,135,137,138,153,156,157,158,159,160,161,162,184,195,],[14,50,61,71,72,73,61,61,61,61,61,50,61,61,61,61,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,61,61,61,61,61,61,61,61,195,61,]),'GLOBAL':([12,17,114,149,150,169,],[23,23,-24,-22,-23,-21,]),'INT':([12,14,17,23,75,106,111,114,146,149,150,169,],[31,31,31,31,31,31,31,-24,31,-22,-23,-21,]),'FLOAT':([12,14,17,23,75,106,111,114,146,149,150,169,],[32,32,32,32,32,32,32,-24,32,-22,-23,-21,]),'STRING':([12,14,17,23,75,106,111,114,146,149,150,169,],[33,33,33,33,33,33,33,-24,33,-22,-23,-21,]),'RETURN':([12,15,17,18,22,29,30,43,51,114,149,150,165,166,167,169,182,183,194,196,197,202,203,],[34,34,-12,34,-32,-37,-38,-11,-31,-24,-22,-23,-55,34,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'PRINT':([12,15,17,18,22,29,30,43,51,114,149,150,165,166,167,169,182,183,194,196,197,202,203,],[35,35,-12,35,-32,-37,-38,-11,-31,-24,-22,-23,-55,35,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'IF':([12,15,17,18,22,29,30,43,51,114,149,150,165,166,167,169,182,183,194,196,197,202,203,],[36,36,-12,36,-32,-37,-38,-11,-31,-24,-22,-23,-55,36,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'WHILE':([12,15,17,18,22,29,30,43,51,114,149,150,165,166,167,169,182,183,194,196,197,202,203,],[37,37,-12,37,-32,-37,-38,-11,-31,-24,-22,-23,-55,37,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'R_PARENS':([14,38,48,50,54,55,56,57,58,60,63,65,66,67,68,69,70,71,76,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,110,120,121,122,133,136,139,147,154,155,163,164,168,174,175,176,177,178,179,180,181,189,190,191,192,193,199,],[39,74,-50,85,-111,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,101,-18,122,-71,-67,-76,-78,-80,-92,-97,139,-100,-101,-103,-109,-104,-105,-106,140,-63,-65,143,144,-16,-43,154,-70,-79,-91,-99,-17,-69,-73,-62,-64,-15,-72,-66,-75,-77,-82,-84,-94,-96,-42,-81,-83,-93,-95,201,]),'R_KEY_BRACKET':([16,18,22,29,30,41,44,51,165,167,182,183,186,194,196,197,202,203,],[42,-14,-32,-37,-38,77,-13,-31,-55,-59,-53,-54,197,-52,-58,-74,-57,-56,]),'ASSIGN':([20,46,120,189,],[47,79,-43,-42,]),'L_SQUARE_BRACKET':([20,45,65,76,78,120,152,170,],[49,-110,49,49,115,153,115,187,]),'SEMICOLON':([21,25,26,27,28,45,48,53,54,55,56,57,58,60,63,65,66,67,68,69,70,78,80,81,85,86,87,88,89,90,91,93,94,95,96,97,98,99,101,112,113,117,118,119,120,122,133,136,139,140,148,152,154,170,171,172,175,176,177,178,179,180,181,188,189,190,191,192,193,200,],[51,-33,-34,-35,-36,-110,-50,-51,-111,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,114,-48,-49,-71,-67,-76,-78,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-61,149,150,-46,-47,-68,-43,-70,-79,-91,-99,-60,169,-30,-69,-45,-28,-29,-66,-75,-77,-82,-84,-94,-96,-27,-42,-81,-83,-93,-95,-44,]),'NOT':([34,47,49,50,61,72,73,79,123,124,125,126,127,128,129,130,131,132,134,135,137,138,153,156,157,158,159,160,161,162,195,],[59,59,59,59,59,59,59,59,59,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,59,59,59,59,59,59,59,59,59,]),'PLUS':([34,47,48,49,50,57,58,59,60,61,63,65,66,67,68,69,70,72,73,79,85,89,90,91,93,94,95,96,97,98,99,120,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,153,154,156,157,158,159,160,161,162,178,179,180,181,189,192,193,195,],[62,62,-50,62,62,-115,-114,62,-98,62,-102,-116,-116,-116,-116,-107,-108,62,62,62,-71,134,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,62,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-91,-117,-117,-99,62,-69,62,62,62,62,62,62,62,134,134,-94,-96,-42,-93,-95,62,]),'MINUS':([34,47,48,49,50,57,58,59,60,61,63,65,66,67,68,69,70,72,73,79,85,89,90,91,93,94,95,96,97,98,99,120,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,153,154,156,157,158,159,160,161,162,178,179,180,181,189,192,193,195,],[64,64,-50,64,64,-115,-114,64,-98,64,-102,-116,-116,-116,-116,-107,-108,64,64,64,-71,135,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,64,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-91,-117,-117,-99,64,-69,64,64,64,64,64,64,64,135,135,-94,-96,-42,-93,-95,64,]),'CONST_I':([34,47,49,50,59,61,62,64,72,73,79,115,123,124,125,126,127,128,129,130,131,132,134,135,137,138,153,156,157,158,159,160,161,162,187,195,],[66,66,66,66,66,66,66,66,66,66,66,151,66,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,66,66,66,66,66,66,66,66,198,66,]),'CONST_F':([34,47,49,50,59,61,62,64,72,73,79,123,124,125,126,127,128,129,130,131,132,134,135,137,138,153,156,157,158,159,160,161,162,195,],[67,67,67,67,67,67,67,67,67,67,67,67,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,67,67,67,67,67,67,67,67,67,]),'CONST_STRING':([34,47,49,50,59,61,62,64,71,72,73,79,123,124,125,126,127,128,129,130,131,132,134,135,137,138,141,142,153,156,157,158,159,160,161,162,195,],[68,68,68,68,68,68,68,68,102,68,68,68,68,-117,-117,-117,-85,-86,-87,-88,-89,-90,-117,-117,-117,-117,102,102,68,68,68,68,68,68,68,68,68,]),'COLON':([39,74,],[75,106,]),'COMMA':([45,48,54,55,56,57,58,60,63,65,66,67,68,69,70,76,78,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,102,103,110,112,120,122,133,136,139,152,154,155,170,171,175,176,177,178,179,180,181,189,190,191,192,193,200,],[-110,-50,-111,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,111,116,123,-71,-67,-76,-78,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,141,142,146,116,-43,-70,-79,-91,-99,116,-69,123,-45,116,-66,-75,-77,-82,-84,-94,-96,-42,-81,-83,-93,-95,-44,]),'READ':([47,79,],[82,82,]),'TIMES':([48,58,60,63,65,66,67,68,69,70,85,90,91,93,94,95,96,97,98,99,120,122,139,154,180,181,189,],[-50,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,137,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-99,-69,137,137,-42,]),'DIVIDE':([48,58,60,63,65,66,67,68,69,70,85,90,91,93,94,95,96,97,98,99,120,122,139,154,180,181,189,],[-50,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,138,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-99,-69,138,138,-42,]),'NOT_EQUAL':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,127,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'EQUALS':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,128,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'GREATER':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,129,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'GREATER_EQ':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,130,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'LESS':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,131,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'LESS_EQ':([48,56,57,58,60,63,65,66,67,68,69,70,85,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,178,179,180,181,189,190,191,192,193,],[-50,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,132,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'OR':([48,55,56,57,58,60,63,65,66,67,68,69,70,85,87,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,177,178,179,180,181,189,190,191,192,193,],[-50,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,125,-78,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-77,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'AND':([48,54,55,56,57,58,60,63,65,66,67,68,69,70,85,86,87,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,154,176,177,178,179,180,181,189,190,191,192,193,],[-50,-111,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,-71,124,-76,-78,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,-69,-75,-77,-82,-84,-94,-96,-42,-81,-83,-93,-95,]),'R_SQUARE_BRACKET':([48,54,55,56,57,58,60,63,65,66,67,68,69,70,83,85,86,87,88,89,90,91,93,94,95,96,97,98,99,120,122,133,136,139,151,154,173,175,176,177,178,179,180,181,189,190,191,192,193,198,],[-50,-111,-112,-113,-115,-114,-98,-102,-116,-116,-116,-116,-107,-108,120,-71,-67,-76,-78,-80,-92,-97,-100,-101,-103,-109,-104,-105,-106,-43,-70,-79,-91,-99,170,-69,189,-66,-75,-77,-82,-84,-94,-96,-42,-81,-83,-93,-95,200,]),'VOID':([75,106,],[109,109,]),'ELIF':([165,197,202,],[184,-74,184,]),'ELSE':([165,182,197,202,203,],[185,185,-74,-57,-56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([0,],[2,]),'main':([0,2,],[3,7,]),'function':([0,2,],[4,8,]),'function_header':([0,2,],[6,6,]),'function_body':([6,9,],[11,13,]),'function_body_aux':([12,17,],[15,43,]),'statements':([12,15,18,166,],[16,41,44,186,]),'var':([12,17,],[17,17,]),'statement':([12,15,18,166,],[18,18,18,18,]),'type_aux':([12,17,],[19,19,]),'statement_aux':([12,15,18,166,],[21,21,21,21,]),'statement_aux_2':([12,15,18,166,],[22,22,22,22,]),'type':([12,14,17,23,75,106,111,146,],[24,40,24,52,108,108,40,40,]),'assignment':([12,15,18,166,],[25,25,25,25,]),'function_call':([12,15,18,34,47,49,50,59,61,62,64,72,73,79,123,153,156,157,158,159,160,161,162,166,195,],[26,26,26,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,26,69,]),'return':([12,15,18,166,],[27,27,27,27,]),'print':([12,15,18,166,],[28,28,28,28,]),'if':([12,15,18,166,],[29,29,29,29,]),'while':([12,15,18,166,],[30,30,30,30,]),'function_params':([14,111,146,],[38,147,168,]),'array_index':([20,65,76,],[46,96,110,]),'params_pass':([20,65,],[48,48,]),'expression':([34,47,49,50,61,72,73,79,123,153,156,195,],[53,80,83,84,92,104,105,117,155,173,175,199,]),'exp':([34,47,49,50,61,72,73,79,123,153,156,157,195,],[54,54,54,54,54,54,54,54,54,54,54,176,54,]),'xp':([34,47,49,50,61,72,73,79,123,153,156,157,195,],[55,55,55,55,55,55,55,55,55,55,55,55,55,]),'x':([34,47,49,50,61,72,73,79,123,153,156,157,158,195,],[56,56,56,56,56,56,56,56,56,56,56,56,177,56,]),'term':([34,47,49,50,61,72,73,79,123,153,156,157,158,159,160,195,],[57,57,57,57,57,57,57,57,57,57,57,57,57,178,179,57,]),'factor':([34,47,49,50,61,72,73,79,123,153,156,157,158,159,160,161,162,195,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,180,181,58,]),'factor_aux':([34,47,49,50,59,61,72,73,79,123,153,156,157,158,159,160,161,162,195,],[60,60,60,60,91,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'const':([34,47,49,50,59,61,62,64,72,73,79,123,153,156,157,158,159,160,161,162,195,],[63,63,63,63,63,63,93,94,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'array_access':([34,47,49,50,59,61,62,64,72,73,79,123,153,156,157,158,159,160,161,162,195,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'n_var_name':([45,],[78,]),'read':([47,79,],[81,118,]),'n_eval_exp':([54,],[86,]),'n_eval_xp':([55,],[87,]),'n_eval_x':([56,],[88,]),'n_eval_term':([57,],[89,]),'n_eval_factor':([58,],[90,]),'n_add_operand':([65,66,67,68,],[95,97,98,99,]),'print_aux':([71,141,142,],[100,163,164,]),'function_type':([75,106,],[107,145,]),'array_dim':([78,152,],[112,171,]),'var_aux':([78,112,152,171,],[113,148,172,188,]),'params_pass_aux':([84,155,],[121,174,]),'log_op':([88,],[126,]),'x_aux':([89,178,179,],[133,190,191,]),'term_aux':([90,180,181,],[136,192,193,]),'n_add_operator':([124,125,126,134,135,137,138,],[156,157,158,159,160,161,162,]),'block':([143,144,185,201,],[165,167,196,202,]),'elif':([165,202,],[182,203,]),'else':([165,182,],[183,194,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_aux main','program',2,'p_program','parser.py',16),
  ('program -> main','program',1,'p_program','parser.py',17),
  ('program_aux -> program_aux function','program_aux',2,'p_program_aux','parser.py',20),
  ('program_aux -> function','program_aux',1,'p_program_aux','parser.py',21),
  ('function -> function_header function_body','function',2,'p_function','parser.py',24),
  ('main -> FUNCTION MAIN function_body','main',3,'p_main','parser.py',27),
  ('function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type','function_header',7,'p_function_header','parser.py',30),
  ('function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type','function_header',6,'p_function_header','parser.py',31),
  ('function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET','function_body',4,'p_function_body','parser.py',34),
  ('function_body -> L_KEY_BRACKET statements R_KEY_BRACKET','function_body',3,'p_function_body','parser.py',35),
  ('function_body_aux -> var function_body_aux','function_body_aux',2,'p_function_body_aux','parser.py',38),
  ('function_body_aux -> var','function_body_aux',1,'p_function_body_aux','parser.py',39),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',42),
  ('statements -> statement','statements',1,'p_statements','parser.py',43),
  ('function_params -> type ID array_index COMMA function_params','function_params',5,'p_function_params','parser.py',46),
  ('function_params -> type ID array_index','function_params',3,'p_function_params','parser.py',47),
  ('function_params -> type ID COMMA function_params','function_params',4,'p_function_params','parser.py',48),
  ('function_params -> type ID','function_params',2,'p_function_params','parser.py',49),
  ('function_type -> type','function_type',1,'p_function_type','parser.py',52),
  ('function_type -> VOID','function_type',1,'p_function_type','parser.py',53),
  ('var -> type_aux ID n_var_name array_dim var_aux SEMICOLON','var',6,'p_var','parser.py',56),
  ('var -> type_aux ID n_var_name array_dim SEMICOLON','var',5,'p_var','parser.py',57),
  ('var -> type_aux ID n_var_name var_aux SEMICOLON','var',5,'p_var','parser.py',58),
  ('var -> type_aux ID n_var_name SEMICOLON','var',4,'p_var','parser.py',59),
  ('type_aux -> GLOBAL type','type_aux',2,'p_type_aux','parser.py',62),
  ('type_aux -> type','type_aux',1,'p_type_aux','parser.py',63),
  ('var_aux -> COMMA ID array_dim var_aux','var_aux',4,'p_var_aux','parser.py',66),
  ('var_aux -> COMMA ID array_dim','var_aux',3,'p_var_aux','parser.py',67),
  ('var_aux -> COMMA ID var_aux','var_aux',3,'p_var_aux','parser.py',68),
  ('var_aux -> COMMA ID','var_aux',2,'p_var_aux','parser.py',69),
  ('statement -> statement_aux SEMICOLON','statement',2,'p_statement','parser.py',72),
  ('statement -> statement_aux_2','statement',1,'p_statement','parser.py',73),
  ('statement_aux -> assignment','statement_aux',1,'p_statement_aux','parser.py',76),
  ('statement_aux -> function_call','statement_aux',1,'p_statement_aux','parser.py',77),
  ('statement_aux -> return','statement_aux',1,'p_statement_aux','parser.py',78),
  ('statement_aux -> print','statement_aux',1,'p_statement_aux','parser.py',79),
  ('statement_aux_2 -> if','statement_aux_2',1,'p_statement_aux_2','parser.py',82),
  ('statement_aux_2 -> while','statement_aux_2',1,'p_statement_aux_2','parser.py',83),
  ('type -> INT','type',1,'p_type','parser.py',86),
  ('type -> FLOAT','type',1,'p_type','parser.py',87),
  ('type -> STRING','type',1,'p_type','parser.py',88),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',6,'p_array_index','parser.py',91),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',3,'p_array_index','parser.py',92),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',6,'p_array_dim','parser.py',95),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',3,'p_array_dim','parser.py',96),
  ('assignment -> ID array_index ASSIGN expression','assignment',4,'p_assignment','parser.py',99),
  ('assignment -> ID array_index ASSIGN read','assignment',4,'p_assignment','parser.py',100),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',101),
  ('assignment -> ID ASSIGN read','assignment',3,'p_assignment','parser.py',102),
  ('function_call -> ID params_pass','function_call',2,'p_function_call','parser.py',105),
  ('return -> RETURN expression','return',2,'p_return','parser.py',108),
  ('if -> IF L_PARENS expression R_PARENS block elif else','if',7,'p_if','parser.py',111),
  ('if -> IF L_PARENS expression R_PARENS block elif','if',6,'p_if','parser.py',112),
  ('if -> IF L_PARENS expression R_PARENS block else','if',6,'p_if','parser.py',113),
  ('if -> IF L_PARENS expression R_PARENS block','if',5,'p_if','parser.py',114),
  ('elif -> ELIF L_PARENS expression R_PARENS block elif','elif',6,'p_elif','parser.py',117),
  ('elif -> ELIF L_PARENS expression R_PARENS block','elif',5,'p_elif','parser.py',118),
  ('else -> ELSE block','else',2,'p_else','parser.py',121),
  ('while -> WHILE L_PARENS expression R_PARENS block','while',5,'p_while','parser.py',124),
  ('print -> PRINT L_PARENS print_aux R_PARENS','print',4,'p_print','parser.py',127),
  ('print -> PRINT L_PARENS R_PARENS','print',3,'p_print','parser.py',128),
  ('print_aux -> CONST_STRING COMMA print_aux','print_aux',3,'p_print_aux','parser.py',131),
  ('print_aux -> CONST_STRING','print_aux',1,'p_print_aux','parser.py',132),
  ('print_aux -> ID COMMA print_aux','print_aux',3,'p_print_aux','parser.py',133),
  ('print_aux -> ID','print_aux',1,'p_print_aux','parser.py',134),
  ('expression -> exp n_eval_exp AND n_add_operator expression','expression',5,'p_expression','parser.py',137),
  ('expression -> exp n_eval_exp','expression',2,'p_expression','parser.py',138),
  ('read -> READ ID','read',2,'p_read','parser.py',141),
  ('params_pass -> L_PARENS expression params_pass_aux R_PARENS','params_pass',4,'p_params_pass','parser.py',144),
  ('params_pass -> L_PARENS expression R_PARENS','params_pass',3,'p_params_pass','parser.py',145),
  ('params_pass -> L_PARENS R_PARENS','params_pass',2,'p_params_pass','parser.py',146),
  ('params_pass_aux -> COMMA expression params_pass_aux','params_pass_aux',3,'p_params_pass_aux','parser.py',149),
  ('params_pass_aux -> COMMA expression','params_pass_aux',2,'p_params_pass_aux','parser.py',150),
  ('block -> L_KEY_BRACKET statements R_KEY_BRACKET','block',3,'p_block','parser.py',153),
  ('exp -> xp n_eval_xp OR n_add_operator exp','exp',5,'p_exp','parser.py',156),
  ('exp -> xp n_eval_xp','exp',2,'p_exp','parser.py',157),
  ('xp -> x n_eval_x log_op n_add_operator x','xp',5,'p_xp','parser.py',160),
  ('xp -> x n_eval_x','xp',2,'p_xp','parser.py',161),
  ('x -> term n_eval_term x_aux','x',3,'p_x','parser.py',164),
  ('x -> term n_eval_term','x',2,'p_x','parser.py',165),
  ('x_aux -> PLUS n_add_operator term x_aux','x_aux',4,'p_x_aux','parser.py',168),
  ('x_aux -> PLUS n_add_operator term','x_aux',3,'p_x_aux','parser.py',169),
  ('x_aux -> MINUS n_add_operator term x_aux','x_aux',4,'p_x_aux','parser.py',170),
  ('x_aux -> MINUS n_add_operator term','x_aux',3,'p_x_aux','parser.py',171),
  ('log_op -> NOT_EQUAL','log_op',1,'p_log_op','parser.py',174),
  ('log_op -> EQUALS','log_op',1,'p_log_op','parser.py',175),
  ('log_op -> GREATER','log_op',1,'p_log_op','parser.py',176),
  ('log_op -> GREATER_EQ','log_op',1,'p_log_op','parser.py',177),
  ('log_op -> LESS','log_op',1,'p_log_op','parser.py',178),
  ('log_op -> LESS_EQ','log_op',1,'p_log_op','parser.py',179),
  ('term -> factor n_eval_factor term_aux','term',3,'p_term','parser.py',182),
  ('term -> factor n_eval_factor','term',2,'p_term','parser.py',183),
  ('term_aux -> TIMES n_add_operator factor term_aux','term_aux',4,'p_term_aux','parser.py',186),
  ('term_aux -> TIMES n_add_operator factor','term_aux',3,'p_term_aux','parser.py',187),
  ('term_aux -> DIVIDE n_add_operator factor term_aux','term_aux',4,'p_term_aux','parser.py',188),
  ('term_aux -> DIVIDE n_add_operator factor','term_aux',3,'p_term_aux','parser.py',189),
  ('factor -> NOT factor_aux','factor',2,'p_factor','parser.py',192),
  ('factor -> factor_aux','factor',1,'p_factor','parser.py',193),
  ('factor_aux -> L_PARENS expression R_PARENS','factor_aux',3,'p_factor_aux','parser.py',196),
  ('factor_aux -> PLUS const','factor_aux',2,'p_factor_aux','parser.py',197),
  ('factor_aux -> MINUS const','factor_aux',2,'p_factor_aux','parser.py',198),
  ('factor_aux -> const','factor_aux',1,'p_factor_aux','parser.py',199),
  ('const -> ID n_add_operand','const',2,'p_const','parser.py',202),
  ('const -> CONST_I n_add_operand','const',2,'p_const','parser.py',203),
  ('const -> CONST_F n_add_operand','const',2,'p_const','parser.py',204),
  ('const -> CONST_STRING n_add_operand','const',2,'p_const','parser.py',205),
  ('const -> function_call','const',1,'p_const','parser.py',206),
  ('const -> array_access','const',1,'p_const','parser.py',207),
  ('array_access -> ID array_index','array_access',2,'p_array_access','parser.py',210),
  ('n_var_name -> <empty>','n_var_name',0,'p_n_var_name','parser.py',215),
  ('n_eval_exp -> <empty>','n_eval_exp',0,'p_n_eval_exp','parser.py',219),
  ('n_eval_xp -> <empty>','n_eval_xp',0,'p_n_eval_xp','parser.py',223),
  ('n_eval_x -> <empty>','n_eval_x',0,'p_n_eval_x','parser.py',227),
  ('n_eval_factor -> <empty>','n_eval_factor',0,'p_n_eval_factor','parser.py',231),
  ('n_eval_term -> <empty>','n_eval_term',0,'p_n_eval_term','parser.py',235),
  ('n_add_operand -> <empty>','n_add_operand',0,'p_n_add_operand','parser.py',239),
  ('n_add_operator -> <empty>','n_add_operator',0,'p_n_add_operator','parser.py',243),
]
