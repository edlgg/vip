
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN COLON COMMA CONST_F CONST_I CONST_STRING DIVIDE ELIF ELSE EQUALS FLOAT FUNCTION GLOBAL GREATER GREATER_EQ ID IF INT LESS LESS_EQ L_KEY_BRACKET L_PARENS L_SQUARE_BRACKET MAIN MINUS NOT NOT_EQUAL OR PLUS PRINT READ RETURN R_KEY_BRACKET R_PARENS R_SQUARE_BRACKET SEMICOLON STRING TIMES VOID WHILEprogram : program_aux main\n               | mainprogram_aux : program_aux function\n                   | functionfunction : function_header function_body n_end_functionmain : FUNCTION MAIN n_start_main function_body n_end_functionfunction_header : FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type\n                       | FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_typefunction_body : L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET\n                     | L_KEY_BRACKET statements R_KEY_BRACKETfunction_body_aux : var function_body_aux\n                         | varstatements : statement statements\n                           | statementfunction_params : type ID n_add_var array_index COMMA function_params\n                       | type ID n_add_var array_index\n                       | type ID n_add_var COMMA function_params\n                       | type ID n_add_varfunction_type : INT n_add_function_type\n                     | FLOAT n_add_function_type\n                     | STRING n_add_function_type\n                     | VOID n_add_function_typevar : type_aux ID n_add_var array_dim var_aux SEMICOLON\n           | type_aux ID n_add_var array_dim SEMICOLON\n           | type_aux ID n_add_var var_aux SEMICOLON\n           | type_aux ID n_add_var SEMICOLONtype_aux : GLOBAL type\n                | typevar_aux : COMMA ID n_add_var array_dim var_aux\n               | COMMA ID n_add_var array_dim\n               | COMMA ID n_add_var var_aux\n               | COMMA ID n_add_varstatement : statement_aux SEMICOLON\n                 | statement_aux_2statement_aux : assignment\n                     | function_call\n                     | return\n                     | printstatement_aux_2 : if\n                       | whiletype : INT n_record_last_type\n            | FLOAT n_record_last_type\n            | STRING n_record_last_typearray_index : L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET\n                   | L_SQUARE_BRACKET expression R_SQUARE_BRACKETarray_dim : L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET\n                 | L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKETassignment : ID n_make_assignment array_index ASSIGN  expression\n                  | ID n_make_assignment array_index ASSIGN  read\n                  | ID n_make_assignment ASSIGN expression\n                  | ID n_make_assignment ASSIGN readfunction_call : ID params_passreturn : RETURN expression n_returnif : IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if\n          | IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if\n          | IF L_PARENS expression R_PARENS n_end_condition block else n_end_if\n          | IF L_PARENS expression R_PARENS n_end_condition block n_end_ifelif : ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif\n            | ELIF n_start_else L_PARENS expression R_PARENS n_end_condition blockelse : ELSE n_start_else blockwhile : WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_whileprint : PRINT L_PARENS print_aux R_PARENS\n             | PRINT L_PARENS R_PARENSprint_aux : CONST_STRING n_print_str COMMA print_aux\n                 | CONST_STRING n_print_str\n                 | expression n_print COMMA print_aux\n                 | expression n_printexpression : exp n_eval_exp AND n_add_operator expression\n                  | exp n_eval_expread : READ IDparams_pass : L_PARENS expression params_pass_aux R_PARENS\n                   | L_PARENS expression R_PARENS\n                   | L_PARENS R_PARENSparams_pass_aux : COMMA expression params_pass_aux\n                       | COMMA expressionblock : L_KEY_BRACKET statements R_KEY_BRACKETexp : xp n_eval_xp OR n_add_operator exp\n           | xp n_eval_xpxp : x n_eval_x NOT_EQUAL n_add_operator xp\n          | x n_eval_x EQUALS n_add_operator xp\n          | x n_eval_x GREATER n_add_operator xp\n          | x n_eval_x GREATER_EQ n_add_operator xp\n          | x n_eval_x LESS n_add_operator xp\n          | x n_eval_x LESS_EQ n_add_operator xp\n          | x n_eval_xx : term n_eval_term PLUS n_add_operator x\n         | term n_eval_term MINUS n_add_operator x\n         | term n_eval_termterm : factor n_eval_factor TIMES  n_add_operator term\n            | factor n_eval_factor DIVIDE n_add_operator term\n            | factor n_eval_factorfactor : NOT factor_aux\n              | factor_auxfactor_aux : L_PARENS expression R_PARENS\n                  | PLUS const\n                  | MINUS const\n                  | constconst : ID n_add_operand\n             | CONST_I n_add_operand\n             | CONST_F n_add_operand\n             | CONST_STRING n_add_operand\n             | function_call\n             | array_accessarray_access : ID array_indexn_start_main : n_add_function_name : n_add_function_type : n_end_function : n_add_var : n_record_last_type : n_eval_exp : n_eval_xp : n_eval_x : n_eval_factor : n_eval_term : n_end_condition : n_start_else : n_end_if : n_start_while : n_end_while : n_add_operand : n_add_operator : n_make_assignment : n_print_str : n_print : n_return : '
    
_lr_action_items = {'FUNCTION':([0,2,4,8,11,15,42,79,],[5,5,-4,-3,-108,-5,-10,-9,]),'$end':([1,3,7,39,42,75,79,],[0,-2,-1,-108,-10,-6,-9,]),'MAIN':([5,],[9,]),'ID':([5,12,16,18,19,20,23,25,30,31,32,33,34,35,43,48,49,50,51,52,53,59,60,62,64,72,73,78,82,83,106,112,114,115,118,122,123,124,125,126,127,128,129,130,131,132,133,134,149,150,159,160,161,162,163,164,165,166,167,168,169,170,171,172,182,185,201,202,210,211,212,216,221,222,223,226,227,229,230,231,235,236,],[10,21,21,-12,21,45,-34,-28,-39,-40,-110,-110,-110,66,-11,66,-33,-27,-41,-42,-43,66,66,66,66,66,66,109,66,66,66,-26,152,66,155,66,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-24,-25,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-23,66,-118,21,-118,-118,-57,-120,-118,-55,-56,-76,-61,-54,66,-60,-59,-58,]),'L_KEY_BRACKET':([6,9,13,139,142,143,144,145,146,173,174,175,176,177,178,179,203,214,225,233,234,],[12,-105,12,-116,-8,-107,-107,-107,-107,202,-116,-7,-19,-20,-21,-22,202,-117,202,-116,202,]),'L_PARENS':([10,14,21,35,36,37,38,48,62,64,66,72,73,74,82,83,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,213,224,230,],[-106,40,48,64,72,73,-119,64,64,64,48,64,64,106,64,64,64,64,64,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-117,230,64,]),'GLOBAL':([12,18,112,149,150,182,],[24,24,-26,-24,-25,-23,]),'INT':([12,18,24,40,108,112,141,149,150,181,182,204,],[32,32,32,32,143,-26,143,-24,-25,32,-23,32,]),'FLOAT':([12,18,24,40,108,112,141,149,150,181,182,204,],[33,33,33,33,144,-26,144,-24,-25,33,-23,33,]),'STRING':([12,18,24,40,108,112,141,149,150,181,182,204,],[34,34,34,34,145,-26,145,-24,-25,34,-23,34,]),'RETURN':([12,16,18,19,23,30,31,43,49,112,149,150,182,201,202,210,211,212,216,221,222,223,226,227,229,231,235,236,],[35,35,-12,35,-34,-39,-40,-11,-33,-26,-24,-25,-23,-118,35,-118,-118,-57,-120,-118,-55,-56,-76,-61,-54,-60,-59,-58,]),'PRINT':([12,16,18,19,23,30,31,43,49,112,149,150,182,201,202,210,211,212,216,221,222,223,226,227,229,231,235,236,],[36,36,-12,36,-34,-39,-40,-11,-33,-26,-24,-25,-23,-118,36,-118,-118,-57,-120,-118,-55,-56,-76,-61,-54,-60,-59,-58,]),'IF':([12,16,18,19,23,30,31,43,49,112,149,150,182,201,202,210,211,212,216,221,222,223,226,227,229,231,235,236,],[37,37,-12,37,-34,-39,-40,-11,-33,-26,-24,-25,-23,-118,37,-118,-118,-57,-120,-118,-55,-56,-76,-61,-54,-60,-59,-58,]),'WHILE':([12,16,18,19,23,30,31,43,49,112,149,150,182,201,202,210,211,212,216,221,222,223,226,227,229,231,235,236,],[38,38,-12,38,-34,-39,-40,-11,-33,-26,-24,-25,-23,-118,38,-118,-118,-57,-120,-118,-55,-56,-76,-61,-54,-60,-59,-58,]),'R_KEY_BRACKET':([17,19,23,30,31,41,44,49,201,210,211,212,215,216,221,222,223,226,227,229,231,235,236,],[42,-14,-34,-39,-40,79,-13,-33,-118,-118,-118,-57,226,-120,-118,-55,-56,-76,-61,-54,-60,-59,-58,]),'ASSIGN':([21,46,81,156,220,],[-123,82,115,-45,-44,]),'L_SQUARE_BRACKET':([21,45,46,66,80,109,147,152,156,183,184,],[-123,-109,83,83,113,-109,83,-109,185,206,113,]),'SEMICOLON':([22,26,27,28,29,45,47,54,55,56,57,58,61,63,65,66,67,68,69,70,71,80,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,102,110,111,116,117,121,135,136,148,152,153,154,155,156,157,183,184,187,188,189,190,191,192,193,194,195,196,197,198,207,208,219,220,228,],[49,-35,-36,-37,-38,-109,-52,-126,-111,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,112,-73,-53,-69,-78,-85,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-63,149,150,-50,-51,-72,-94,-62,182,-109,-48,-49,-70,-45,-71,-47,-32,-68,-77,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,-30,-31,-29,-44,-46,]),'NOT':([35,48,64,72,73,82,83,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[62,62,62,62,62,62,62,62,62,62,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'PLUS':([35,47,48,58,61,62,63,64,65,66,67,68,69,70,71,72,73,82,83,85,90,91,92,93,94,96,97,98,99,100,103,106,115,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,197,198,220,230,],[59,-52,59,-115,-114,59,-93,59,-97,-121,-121,-121,-121,-102,-103,59,59,59,59,-73,131,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,59,59,-72,59,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-94,-45,-71,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-89,-90,-44,59,]),'MINUS':([35,47,48,58,61,62,63,64,65,66,67,68,69,70,71,72,73,82,83,85,90,91,92,93,94,96,97,98,99,100,103,106,115,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,156,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,197,198,220,230,],[60,-52,60,-115,-114,60,-93,60,-97,-121,-121,-121,-121,-102,-103,60,60,60,60,-73,132,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,60,60,-72,60,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-94,-45,-71,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-89,-90,-44,60,]),'CONST_I':([35,48,59,60,62,64,72,73,82,83,106,113,115,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,206,230,],[67,67,67,67,67,67,67,67,67,67,67,151,67,67,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,218,67,]),'CONST_F':([35,48,59,60,62,64,72,73,82,83,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[68,68,68,68,68,68,68,68,68,68,68,68,68,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'CONST_STRING':([35,48,59,60,62,64,72,73,82,83,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[69,69,69,69,69,69,103,69,69,69,69,69,69,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,-122,69,69,69,69,69,69,69,69,69,69,69,69,103,103,69,69,]),'R_PARENS':([40,47,48,55,56,57,58,61,63,65,66,67,68,69,70,71,72,76,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,109,120,121,135,137,138,140,147,156,157,158,180,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,205,217,220,232,],[77,-52,85,-111,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,102,107,121,-73,-69,-78,-85,-88,-95,-96,-91,-92,135,-98,-104,-99,-100,-101,136,-121,-125,139,-109,157,-72,-94,-65,-67,174,-18,-45,-71,-75,-16,-74,-68,-77,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,-64,-66,-17,-15,-44,233,]),'COMMA':([45,47,55,56,57,58,61,63,65,66,67,68,69,70,71,80,84,85,87,88,89,90,91,92,93,94,96,97,98,99,100,103,104,109,110,121,135,137,138,147,152,156,157,158,180,183,184,187,188,189,190,191,192,193,194,195,196,197,198,207,220,228,],[-109,-52,-111,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,114,122,-73,-69,-78,-85,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-125,-109,114,-72,-94,171,172,181,-109,-45,-71,122,204,-47,114,-68,-77,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,114,-44,-46,]),'TIMES':([47,61,63,65,66,67,68,69,70,71,85,91,92,93,94,96,97,98,99,100,103,121,135,156,157,220,],[-52,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,-95,-96,133,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-44,]),'DIVIDE':([47,61,63,65,66,67,68,69,70,71,85,91,92,93,94,96,97,98,99,100,103,121,135,156,157,220,],[-52,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,-95,-96,134,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-44,]),'NOT_EQUAL':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,125,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'EQUALS':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,126,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'GREATER':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,127,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'GREATER_EQ':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,128,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'LESS':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,129,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'LESS_EQ':([47,57,58,61,63,65,66,67,68,69,70,71,85,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,195,196,197,198,220,],[-52,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,130,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-86,-87,-89,-90,-44,]),'OR':([47,56,57,58,61,63,65,66,67,68,69,70,71,85,88,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,189,190,191,192,193,194,195,196,197,198,220,],[-52,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,124,-85,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,-44,]),'AND':([47,55,56,57,58,61,63,65,66,67,68,69,70,71,85,87,88,89,90,91,92,93,94,96,97,98,99,100,103,121,135,156,157,188,189,190,191,192,193,194,195,196,197,198,220,],[-52,-111,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,123,-78,-85,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,-121,-72,-94,-45,-71,-77,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,-44,]),'R_SQUARE_BRACKET':([47,55,56,57,58,61,63,65,66,67,68,69,70,71,85,87,88,89,90,91,92,93,94,96,97,98,99,100,119,121,135,151,156,157,187,188,189,190,191,192,193,194,195,196,197,198,209,218,220,],[-52,-111,-112,-113,-115,-114,-93,-97,-121,-121,-121,-121,-102,-103,-73,-69,-78,-85,-88,-95,-96,-91,-92,-98,-104,-99,-100,-101,156,-72,-94,183,-45,-71,-68,-77,-79,-80,-81,-82,-83,-84,-86,-87,-89,-90,220,228,-44,]),'COLON':([77,107,],[108,141,]),'READ':([82,115,],[118,118,]),'VOID':([108,141,],[146,146,]),'ELIF':([201,226,235,],[213,-76,213,]),'ELSE':([201,210,226,235,236,],[214,214,-76,-59,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([0,],[2,]),'main':([0,2,],[3,7,]),'function':([0,2,],[4,8,]),'function_header':([0,2,],[6,6,]),'function_body':([6,13,],[11,39,]),'n_start_main':([9,],[13,]),'n_add_function_name':([10,],[14,]),'n_end_function':([11,39,],[15,75,]),'function_body_aux':([12,18,],[16,43,]),'statements':([12,16,19,202,],[17,41,44,215,]),'var':([12,18,],[18,18,]),'statement':([12,16,19,202,],[19,19,19,19,]),'type_aux':([12,18,],[20,20,]),'statement_aux':([12,16,19,202,],[22,22,22,22,]),'statement_aux_2':([12,16,19,202,],[23,23,23,23,]),'type':([12,18,24,40,181,204,],[25,25,50,78,78,78,]),'assignment':([12,16,19,202,],[26,26,26,26,]),'function_call':([12,16,19,35,48,59,60,62,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,202,230,],[27,27,27,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,27,70,]),'return':([12,16,19,202,],[28,28,28,28,]),'print':([12,16,19,202,],[29,29,29,29,]),'if':([12,16,19,202,],[30,30,30,30,]),'while':([12,16,19,202,],[31,31,31,31,]),'n_make_assignment':([21,],[46,]),'params_pass':([21,66,],[47,47,]),'n_record_last_type':([32,33,34,],[51,52,53,]),'expression':([35,48,64,72,73,82,83,106,115,122,159,171,172,185,230,],[54,84,95,104,105,116,119,140,153,158,187,104,104,209,232,]),'exp':([35,48,64,72,73,82,83,106,115,122,159,160,171,172,185,230,],[55,55,55,55,55,55,55,55,55,55,55,188,55,55,55,55,]),'xp':([35,48,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,171,172,185,230,],[56,56,56,56,56,56,56,56,56,56,56,56,189,190,191,192,193,194,56,56,56,56,]),'x':([35,48,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,171,172,185,230,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,195,196,57,57,57,57,]),'term':([35,48,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,197,198,58,58,58,58,]),'factor':([35,48,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'factor_aux':([35,48,62,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[63,63,94,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'const':([35,48,59,60,62,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[65,65,91,92,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'array_access':([35,48,59,60,62,64,72,73,82,83,106,115,122,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,230,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'n_start_while':([38,],[74,]),'function_params':([40,181,204,],[76,205,217,]),'n_add_var':([45,109,152,],[80,147,184,]),'array_index':([46,66,147,],[81,97,180,]),'n_return':([54,],[86,]),'n_eval_exp':([55,],[87,]),'n_eval_xp':([56,],[88,]),'n_eval_x':([57,],[89,]),'n_eval_term':([58,],[90,]),'n_eval_factor':([61,],[93,]),'n_add_operand':([66,67,68,69,103,],[96,98,99,100,100,]),'print_aux':([72,171,172,],[101,199,200,]),'array_dim':([80,184,],[110,207,]),'var_aux':([80,110,184,207,],[111,148,208,219,]),'read':([82,115,],[117,154,]),'params_pass_aux':([84,158,],[120,186,]),'n_print_str':([103,],[137,]),'n_print':([104,],[138,]),'function_type':([108,141,],[142,175,]),'n_add_operator':([123,124,125,126,127,128,129,130,131,132,133,134,],[159,160,161,162,163,164,165,166,167,168,169,170,]),'n_end_condition':([139,174,233,],[173,203,234,]),'n_add_function_type':([143,144,145,146,],[176,177,178,179,]),'block':([173,203,225,234,],[201,216,231,235,]),'elif':([201,235,],[210,236,]),'else':([201,210,],[211,221,]),'n_end_if':([201,210,211,221,],[212,222,223,229,]),'n_start_else':([213,214,],[224,225,]),'n_end_while':([216,],[227,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_aux main','program',2,'p_program','parser.py',18),
  ('program -> main','program',1,'p_program','parser.py',19),
  ('program_aux -> program_aux function','program_aux',2,'p_program_aux','parser.py',23),
  ('program_aux -> function','program_aux',1,'p_program_aux','parser.py',24),
  ('function -> function_header function_body n_end_function','function',3,'p_function','parser.py',28),
  ('main -> FUNCTION MAIN n_start_main function_body n_end_function','main',5,'p_main','parser.py',32),
  ('function_header -> FUNCTION ID n_add_function_name L_PARENS function_params R_PARENS COLON function_type','function_header',8,'p_function_header','parser.py',36),
  ('function_header -> FUNCTION ID n_add_function_name L_PARENS R_PARENS COLON function_type','function_header',7,'p_function_header','parser.py',37),
  ('function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET','function_body',4,'p_function_body','parser.py',41),
  ('function_body -> L_KEY_BRACKET statements R_KEY_BRACKET','function_body',3,'p_function_body','parser.py',42),
  ('function_body_aux -> var function_body_aux','function_body_aux',2,'p_function_body_aux','parser.py',46),
  ('function_body_aux -> var','function_body_aux',1,'p_function_body_aux','parser.py',47),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',51),
  ('statements -> statement','statements',1,'p_statements','parser.py',52),
  ('function_params -> type ID n_add_var array_index COMMA function_params','function_params',6,'p_function_params','parser.py',56),
  ('function_params -> type ID n_add_var array_index','function_params',4,'p_function_params','parser.py',57),
  ('function_params -> type ID n_add_var COMMA function_params','function_params',5,'p_function_params','parser.py',58),
  ('function_params -> type ID n_add_var','function_params',3,'p_function_params','parser.py',59),
  ('function_type -> INT n_add_function_type','function_type',2,'p_function_type','parser.py',63),
  ('function_type -> FLOAT n_add_function_type','function_type',2,'p_function_type','parser.py',64),
  ('function_type -> STRING n_add_function_type','function_type',2,'p_function_type','parser.py',65),
  ('function_type -> VOID n_add_function_type','function_type',2,'p_function_type','parser.py',66),
  ('var -> type_aux ID n_add_var array_dim var_aux SEMICOLON','var',6,'p_var','parser.py',70),
  ('var -> type_aux ID n_add_var array_dim SEMICOLON','var',5,'p_var','parser.py',71),
  ('var -> type_aux ID n_add_var var_aux SEMICOLON','var',5,'p_var','parser.py',72),
  ('var -> type_aux ID n_add_var SEMICOLON','var',4,'p_var','parser.py',73),
  ('type_aux -> GLOBAL type','type_aux',2,'p_type_aux','parser.py',77),
  ('type_aux -> type','type_aux',1,'p_type_aux','parser.py',78),
  ('var_aux -> COMMA ID n_add_var array_dim var_aux','var_aux',5,'p_var_aux','parser.py',82),
  ('var_aux -> COMMA ID n_add_var array_dim','var_aux',4,'p_var_aux','parser.py',83),
  ('var_aux -> COMMA ID n_add_var var_aux','var_aux',4,'p_var_aux','parser.py',84),
  ('var_aux -> COMMA ID n_add_var','var_aux',3,'p_var_aux','parser.py',85),
  ('statement -> statement_aux SEMICOLON','statement',2,'p_statement','parser.py',89),
  ('statement -> statement_aux_2','statement',1,'p_statement','parser.py',90),
  ('statement_aux -> assignment','statement_aux',1,'p_statement_aux','parser.py',94),
  ('statement_aux -> function_call','statement_aux',1,'p_statement_aux','parser.py',95),
  ('statement_aux -> return','statement_aux',1,'p_statement_aux','parser.py',96),
  ('statement_aux -> print','statement_aux',1,'p_statement_aux','parser.py',97),
  ('statement_aux_2 -> if','statement_aux_2',1,'p_statement_aux_2','parser.py',101),
  ('statement_aux_2 -> while','statement_aux_2',1,'p_statement_aux_2','parser.py',102),
  ('type -> INT n_record_last_type','type',2,'p_type','parser.py',106),
  ('type -> FLOAT n_record_last_type','type',2,'p_type','parser.py',107),
  ('type -> STRING n_record_last_type','type',2,'p_type','parser.py',108),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',6,'p_array_index','parser.py',112),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',3,'p_array_index','parser.py',113),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',6,'p_array_dim','parser.py',117),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',3,'p_array_dim','parser.py',118),
  ('assignment -> ID n_make_assignment array_index ASSIGN expression','assignment',5,'p_assignment','parser.py',122),
  ('assignment -> ID n_make_assignment array_index ASSIGN read','assignment',5,'p_assignment','parser.py',123),
  ('assignment -> ID n_make_assignment ASSIGN expression','assignment',4,'p_assignment','parser.py',124),
  ('assignment -> ID n_make_assignment ASSIGN read','assignment',4,'p_assignment','parser.py',125),
  ('function_call -> ID params_pass','function_call',2,'p_function_call','parser.py',130),
  ('return -> RETURN expression n_return','return',3,'p_return','parser.py',134),
  ('if -> IF L_PARENS expression R_PARENS n_end_condition block elif else n_end_if','if',9,'p_if','parser.py',138),
  ('if -> IF L_PARENS expression R_PARENS n_end_condition block elif n_end_if','if',8,'p_if','parser.py',139),
  ('if -> IF L_PARENS expression R_PARENS n_end_condition block else n_end_if','if',8,'p_if','parser.py',140),
  ('if -> IF L_PARENS expression R_PARENS n_end_condition block n_end_if','if',7,'p_if','parser.py',141),
  ('elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block elif','elif',8,'p_elif','parser.py',145),
  ('elif -> ELIF n_start_else L_PARENS expression R_PARENS n_end_condition block','elif',7,'p_elif','parser.py',146),
  ('else -> ELSE n_start_else block','else',3,'p_else','parser.py',150),
  ('while -> WHILE n_start_while L_PARENS expression R_PARENS n_end_condition block n_end_while','while',8,'p_while','parser.py',154),
  ('print -> PRINT L_PARENS print_aux R_PARENS','print',4,'p_print','parser.py',158),
  ('print -> PRINT L_PARENS R_PARENS','print',3,'p_print','parser.py',159),
  ('print_aux -> CONST_STRING n_print_str COMMA print_aux','print_aux',4,'p_print_aux','parser.py',163),
  ('print_aux -> CONST_STRING n_print_str','print_aux',2,'p_print_aux','parser.py',164),
  ('print_aux -> expression n_print COMMA print_aux','print_aux',4,'p_print_aux','parser.py',165),
  ('print_aux -> expression n_print','print_aux',2,'p_print_aux','parser.py',166),
  ('expression -> exp n_eval_exp AND n_add_operator expression','expression',5,'p_expression','parser.py',170),
  ('expression -> exp n_eval_exp','expression',2,'p_expression','parser.py',171),
  ('read -> READ ID','read',2,'p_read','parser.py',175),
  ('params_pass -> L_PARENS expression params_pass_aux R_PARENS','params_pass',4,'p_params_pass','parser.py',179),
  ('params_pass -> L_PARENS expression R_PARENS','params_pass',3,'p_params_pass','parser.py',180),
  ('params_pass -> L_PARENS R_PARENS','params_pass',2,'p_params_pass','parser.py',181),
  ('params_pass_aux -> COMMA expression params_pass_aux','params_pass_aux',3,'p_params_pass_aux','parser.py',185),
  ('params_pass_aux -> COMMA expression','params_pass_aux',2,'p_params_pass_aux','parser.py',186),
  ('block -> L_KEY_BRACKET statements R_KEY_BRACKET','block',3,'p_block','parser.py',190),
  ('exp -> xp n_eval_xp OR n_add_operator exp','exp',5,'p_exp','parser.py',194),
  ('exp -> xp n_eval_xp','exp',2,'p_exp','parser.py',195),
  ('xp -> x n_eval_x NOT_EQUAL n_add_operator xp','xp',5,'p_xp','parser.py',199),
  ('xp -> x n_eval_x EQUALS n_add_operator xp','xp',5,'p_xp','parser.py',200),
  ('xp -> x n_eval_x GREATER n_add_operator xp','xp',5,'p_xp','parser.py',201),
  ('xp -> x n_eval_x GREATER_EQ n_add_operator xp','xp',5,'p_xp','parser.py',202),
  ('xp -> x n_eval_x LESS n_add_operator xp','xp',5,'p_xp','parser.py',203),
  ('xp -> x n_eval_x LESS_EQ n_add_operator xp','xp',5,'p_xp','parser.py',204),
  ('xp -> x n_eval_x','xp',2,'p_xp','parser.py',205),
  ('x -> term n_eval_term PLUS n_add_operator x','x',5,'p_x','parser.py',209),
  ('x -> term n_eval_term MINUS n_add_operator x','x',5,'p_x','parser.py',210),
  ('x -> term n_eval_term','x',2,'p_x','parser.py',211),
  ('term -> factor n_eval_factor TIMES n_add_operator term','term',5,'p_term','parser.py',215),
  ('term -> factor n_eval_factor DIVIDE n_add_operator term','term',5,'p_term','parser.py',216),
  ('term -> factor n_eval_factor','term',2,'p_term','parser.py',217),
  ('factor -> NOT factor_aux','factor',2,'p_factor','parser.py',220),
  ('factor -> factor_aux','factor',1,'p_factor','parser.py',221),
  ('factor_aux -> L_PARENS expression R_PARENS','factor_aux',3,'p_factor_aux','parser.py',225),
  ('factor_aux -> PLUS const','factor_aux',2,'p_factor_aux','parser.py',226),
  ('factor_aux -> MINUS const','factor_aux',2,'p_factor_aux','parser.py',227),
  ('factor_aux -> const','factor_aux',1,'p_factor_aux','parser.py',228),
  ('const -> ID n_add_operand','const',2,'p_const','parser.py',231),
  ('const -> CONST_I n_add_operand','const',2,'p_const','parser.py',232),
  ('const -> CONST_F n_add_operand','const',2,'p_const','parser.py',233),
  ('const -> CONST_STRING n_add_operand','const',2,'p_const','parser.py',234),
  ('const -> function_call','const',1,'p_const','parser.py',235),
  ('const -> array_access','const',1,'p_const','parser.py',236),
  ('array_access -> ID array_index','array_access',2,'p_array_access','parser.py',240),
  ('n_start_main -> <empty>','n_start_main',0,'p_n_start_main','parser.py',246),
  ('n_add_function_name -> <empty>','n_add_function_name',0,'p_n_add_function_name','parser.py',251),
  ('n_add_function_type -> <empty>','n_add_function_type',0,'p_n_add_function_type','parser.py',256),
  ('n_end_function -> <empty>','n_end_function',0,'p_n_end_function','parser.py',262),
  ('n_add_var -> <empty>','n_add_var',0,'p_n_add_var','parser.py',267),
  ('n_record_last_type -> <empty>','n_record_last_type',0,'p_n_record_last_type','parser.py',273),
  ('n_eval_exp -> <empty>','n_eval_exp',0,'p_n_eval_exp','parser.py',279),
  ('n_eval_xp -> <empty>','n_eval_xp',0,'p_n_eval_xp','parser.py',284),
  ('n_eval_x -> <empty>','n_eval_x',0,'p_n_eval_x','parser.py',289),
  ('n_eval_factor -> <empty>','n_eval_factor',0,'p_n_eval_factor','parser.py',294),
  ('n_eval_term -> <empty>','n_eval_term',0,'p_n_eval_term','parser.py',299),
  ('n_end_condition -> <empty>','n_end_condition',0,'p_n_end_condition','parser.py',303),
  ('n_start_else -> <empty>','n_start_else',0,'p_n_start_else','parser.py',308),
  ('n_end_if -> <empty>','n_end_if',0,'p_n_end_if','parser.py',312),
  ('n_start_while -> <empty>','n_start_while',0,'p_n_start_while','parser.py',317),
  ('n_end_while -> <empty>','n_end_while',0,'p_n_end_while','parser.py',321),
  ('n_add_operand -> <empty>','n_add_operand',0,'p_n_add_operand','parser.py',325),
  ('n_add_operator -> <empty>','n_add_operator',0,'p_n_add_operator','parser.py',331),
  ('n_make_assignment -> <empty>','n_make_assignment',0,'p_n_make_assignment','parser.py',336),
  ('n_print_str -> <empty>','n_print_str',0,'p_n_print_str','parser.py',342),
  ('n_print -> <empty>','n_print',0,'p_n_print','parser.py',346),
  ('n_return -> <empty>','n_return',0,'p_n_return','parser.py',350),
]
