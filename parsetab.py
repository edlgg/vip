
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN COLON COMMA CONST_F CONST_I CONST_STRING DIVIDE ELIF ELSE EQUALS FLOAT FUNCTION GLOBAL GREATER GREATER_EQ ID IF INT LESS LESS_EQ L_KEY_BRACKET L_PARENS L_SQUARE_BRACKET MAIN MINUS NOT NOT_EQUAL OR PLUS PRINT READ RETURN R_KEY_BRACKET R_PARENS R_SQUARE_BRACKET SEMICOLON STRING TIMES VOID WHILEprogram : program_aux main\n               | mainprogram_aux : program_aux function\n                   | functionfunction : function_header function_bodymain : FUNCTION MAIN function_bodyfunction_header : FUNCTION ID L_PARENS function_params R_PARENS COLON function_type\n                       | FUNCTION ID L_PARENS R_PARENS COLON function_typefunction_body : L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET\n                     | L_KEY_BRACKET statements R_KEY_BRACKETfunction_body_aux : var function_body_aux\n                         | varstatements : statement statements\n                           | statementfunction_params : type ID array_index COMMA function_params\n                       | type ID array_index\n                       | type ID COMMA function_params\n                       | type IDfunction_type : type\n                     | VOIDvar : type_aux ID get_var_name array_dim var_aux SEMICOLON\n           | type_aux ID get_var_name array_dim SEMICOLON\n           | type_aux ID get_var_name var_aux SEMICOLON\n           | type_aux ID get_var_name SEMICOLONtype_aux : GLOBAL type\n                | typevar_aux : COMMA ID array_dim var_aux\n               | COMMA ID array_dim\n               | COMMA ID var_aux\n               | COMMA IDstatement : statement_aux SEMICOLON\n                 | statement_aux_2statement_aux : assignment\n                     | function_call\n                     | return\n                     | printstatement_aux_2 : if\n                       | whiletype : INT\n            | FLOAT\n            | STRINGarray_index : L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET\n                   | L_SQUARE_BRACKET expression R_SQUARE_BRACKETarray_dim : L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET\n                 | L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKETassignment : ID array_index ASSIGN expression\n                  | ID array_index ASSIGN read\n                  | ID ASSIGN expression\n                  | ID ASSIGN readfunction_call : ID params_passreturn : RETURN expressionif : IF L_PARENS expression R_PARENS block elif else\n          | IF L_PARENS expression R_PARENS block elif\n          | IF L_PARENS expression R_PARENS block else\n          | IF L_PARENS expression R_PARENS blockelif : ELIF L_PARENS expression R_PARENS block elif\n            | ELIF L_PARENS expression R_PARENS blockelse : ELSE blockwhile : WHILE L_PARENS expression R_PARENS blockprint : PRINT L_PARENS print_aux R_PARENS\n             | PRINT L_PARENS R_PARENSprint_aux : CONST_STRING COMMA print_aux\n                 | CONST_STRING\n                 | ID COMMA print_aux\n                 | IDexpression : exp AND expression\n                  | expread : READ IDparams_pass : L_PARENS expression params_pass_aux R_PARENS\n                   | L_PARENS expression R_PARENS\n                   | L_PARENS R_PARENSparams_pass_aux : COMMA expression params_pass_aux\n                       | COMMA expressionblock : L_KEY_BRACKET statements R_KEY_BRACKETexp : xp OR exp\n           | xpxp : x log_op x\n          | xx : term x_aux\n         | termx_aux : PLUS term x_aux\n             | PLUS term\n             | MINUS term x_aux\n             | MINUS termlog_op : NOT_EQUAL\n              | EQUALS\n              | GREATER\n              | GREATER_EQ\n              | LESS\n              | LESS_EQterm : factor term_aux\n            | factorterm_aux : TIMES factor term_aux\n                | TIMES factor\n                | DIVIDE factor term_aux\n                | DIVIDE factorfactor : NOT factor_aux\n              | factor_auxfactor_aux : L_PARENS expression R_PARENS\n                  | PLUS const\n                  | MINUS const\n                  | constconst : ID\n             | CONST_I\n             | CONST_F\n             | CONST_STRING\n             | function_call\n             | array_accessarray_access : ID array_indexget_var_name : '
    
_lr_action_items = {'FUNCTION':([0,2,4,8,11,42,77,],[5,5,-4,-3,-5,-10,-9,]),'$end':([1,3,7,13,42,77,],[0,-2,-1,-6,-10,-9,]),'MAIN':([5,],[9,]),'ID':([5,12,15,17,18,19,22,24,29,30,31,32,33,34,40,43,47,49,50,51,52,59,61,62,64,71,72,73,79,82,86,87,88,89,90,91,92,93,94,96,97,99,100,120,122,129,139,140,147,148,151,160,161,162,164,170,171,178,179,180,181,186,187,],[10,20,20,-12,20,45,-32,-26,-37,-38,-39,-40,-41,65,76,-11,65,65,65,-31,-25,65,65,65,65,109,65,65,65,125,65,65,65,-85,-86,-87,-88,-89,-90,65,65,65,65,-24,150,65,109,109,-22,-23,65,-55,20,-59,-21,-53,-54,-52,65,-58,-74,-57,-56,]),'L_KEY_BRACKET':([6,9,31,32,33,113,114,115,141,142,143,173,185,],[12,12,-39,-40,-41,-8,-19,-20,161,161,-7,161,161,]),'L_PARENS':([10,20,34,35,36,37,47,49,50,59,61,65,72,73,79,86,87,88,89,90,91,92,93,94,96,97,99,100,129,151,172,179,],[14,50,61,71,72,73,61,61,61,61,61,50,61,61,61,61,61,61,-85,-86,-87,-88,-89,-90,61,61,61,61,61,61,179,61,]),'GLOBAL':([12,17,120,147,148,164,],[23,23,-24,-22,-23,-21,]),'INT':([12,14,17,23,75,112,117,120,144,147,148,164,],[31,31,31,31,31,31,31,-24,31,-22,-23,-21,]),'FLOAT':([12,14,17,23,75,112,117,120,144,147,148,164,],[32,32,32,32,32,32,32,-24,32,-22,-23,-21,]),'STRING':([12,14,17,23,75,112,117,120,144,147,148,164,],[33,33,33,33,33,33,33,-24,33,-22,-23,-21,]),'RETURN':([12,15,17,18,22,29,30,43,51,120,147,148,160,161,162,164,170,171,178,180,181,186,187,],[34,34,-12,34,-32,-37,-38,-11,-31,-24,-22,-23,-55,34,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'PRINT':([12,15,17,18,22,29,30,43,51,120,147,148,160,161,162,164,170,171,178,180,181,186,187,],[35,35,-12,35,-32,-37,-38,-11,-31,-24,-22,-23,-55,35,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'IF':([12,15,17,18,22,29,30,43,51,120,147,148,160,161,162,164,170,171,178,180,181,186,187,],[36,36,-12,36,-32,-37,-38,-11,-31,-24,-22,-23,-55,36,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'WHILE':([12,15,17,18,22,29,30,43,51,120,147,148,160,161,162,164,170,171,178,180,181,186,187,],[37,37,-12,37,-32,-37,-38,-11,-31,-24,-22,-23,-55,37,-59,-21,-53,-54,-52,-58,-74,-57,-56,]),'R_PARENS':([14,38,48,50,54,55,56,57,58,60,63,65,66,67,68,69,70,71,76,84,85,95,98,101,102,103,104,105,106,108,109,110,111,116,126,127,128,130,131,132,133,134,135,136,137,145,152,153,154,155,156,157,158,159,163,169,177,183,],[39,74,-50,85,-67,-76,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,107,-18,128,-71,-79,-91,-97,137,-100,-101,-109,138,-63,-65,141,142,-16,-43,152,-70,-66,-75,-77,-82,-84,-94,-96,-99,-17,-69,-73,-81,-83,-93,-95,-62,-64,-15,-72,-42,185,]),'R_KEY_BRACKET':([16,18,22,29,30,41,44,51,160,162,170,171,174,178,180,181,186,187,],[42,-14,-32,-37,-38,77,-13,-31,-55,-59,-53,-54,181,-52,-58,-74,-57,-56,]),'ASSIGN':([20,46,126,177,],[47,79,-43,-42,]),'L_SQUARE_BRACKET':([20,45,65,76,78,126,150,165,],[49,-110,49,49,121,151,121,175,]),'SEMICOLON':([21,25,26,27,28,45,48,53,54,55,56,57,58,60,63,65,66,67,68,69,70,78,80,81,85,95,98,101,103,104,105,107,118,119,123,124,125,126,128,130,131,132,133,134,135,136,137,138,146,150,152,154,155,156,157,165,166,167,176,177,184,],[51,-33,-34,-35,-36,-110,-50,-51,-67,-76,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,120,-48,-49,-71,-79,-91,-97,-100,-101,-109,-61,147,148,-46,-47,-68,-43,-70,-66,-75,-77,-82,-84,-94,-96,-99,-60,164,-30,-69,-81,-83,-93,-95,-45,-28,-29,-27,-42,-44,]),'NOT':([34,47,49,50,61,72,73,79,86,87,88,89,90,91,92,93,94,96,97,99,100,129,151,179,],[59,59,59,59,59,59,59,59,59,59,59,-85,-86,-87,-88,-89,-90,59,59,59,59,59,59,59,]),'PLUS':([34,47,48,49,50,57,58,59,60,61,63,65,66,67,68,69,70,72,73,79,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,103,104,105,126,128,129,133,134,135,136,137,151,152,156,157,177,179,],[62,62,-50,62,62,96,-92,62,-98,62,-102,-103,-104,-105,-106,-107,-108,62,62,62,-71,62,62,62,-85,-86,-87,-88,-89,-90,62,62,-91,62,62,-97,-100,-101,-109,-43,-70,62,96,96,-94,-96,-99,62,-69,-93,-95,-42,62,]),'MINUS':([34,47,48,49,50,57,58,59,60,61,63,65,66,67,68,69,70,72,73,79,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,103,104,105,126,128,129,133,134,135,136,137,151,152,156,157,177,179,],[64,64,-50,64,64,97,-92,64,-98,64,-102,-103,-104,-105,-106,-107,-108,64,64,64,-71,64,64,64,-85,-86,-87,-88,-89,-90,64,64,-91,64,64,-97,-100,-101,-109,-43,-70,64,97,97,-94,-96,-99,64,-69,-93,-95,-42,64,]),'CONST_I':([34,47,49,50,59,61,62,64,72,73,79,86,87,88,89,90,91,92,93,94,96,97,99,100,121,129,151,175,179,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,-85,-86,-87,-88,-89,-90,66,66,66,66,149,66,66,182,66,]),'CONST_F':([34,47,49,50,59,61,62,64,72,73,79,86,87,88,89,90,91,92,93,94,96,97,99,100,129,151,179,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,-85,-86,-87,-88,-89,-90,67,67,67,67,67,67,67,]),'CONST_STRING':([34,47,49,50,59,61,62,64,71,72,73,79,86,87,88,89,90,91,92,93,94,96,97,99,100,129,139,140,151,179,],[68,68,68,68,68,68,68,68,108,68,68,68,68,68,68,-85,-86,-87,-88,-89,-90,68,68,68,68,68,108,108,68,68,]),'COLON':([39,74,],[75,112,]),'COMMA':([45,48,54,55,56,57,58,60,63,65,66,67,68,69,70,76,78,84,85,95,98,101,103,104,105,108,109,116,118,126,128,130,131,132,133,134,135,136,137,150,152,153,154,155,156,157,165,166,177,184,],[-110,-50,-67,-76,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,117,122,129,-71,-79,-91,-97,-100,-101,-109,139,140,144,122,-43,-70,-66,-75,-77,-82,-84,-94,-96,-99,122,-69,129,-81,-83,-93,-95,-45,122,-42,-44,]),'READ':([47,79,],[82,82,]),'TIMES':([48,58,60,63,65,66,67,68,69,70,85,101,103,104,105,126,128,135,136,137,152,177,],[-50,99,-98,-102,-103,-104,-105,-106,-107,-108,-71,-97,-100,-101,-109,-43,-70,99,99,-99,-69,-42,]),'DIVIDE':([48,58,60,63,65,66,67,68,69,70,85,101,103,104,105,126,128,135,136,137,152,177,],[-50,100,-98,-102,-103,-104,-105,-106,-107,-108,-71,-97,-100,-101,-109,-43,-70,100,100,-99,-69,-42,]),'NOT_EQUAL':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,89,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'EQUALS':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,90,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'GREATER':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,91,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'GREATER_EQ':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,92,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'LESS':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,93,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'LESS_EQ':([48,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,133,134,135,136,137,152,154,155,156,157,177,],[-50,94,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'OR':([48,55,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,132,133,134,135,136,137,152,154,155,156,157,177,],[-50,87,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-77,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'AND':([48,54,55,56,57,58,60,63,65,66,67,68,69,70,85,95,98,101,103,104,105,126,128,131,132,133,134,135,136,137,152,154,155,156,157,177,],[-50,86,-76,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,-71,-79,-91,-97,-100,-101,-109,-43,-70,-75,-77,-82,-84,-94,-96,-99,-69,-81,-83,-93,-95,-42,]),'R_SQUARE_BRACKET':([48,54,55,56,57,58,60,63,65,66,67,68,69,70,83,85,95,98,101,103,104,105,126,128,130,131,132,133,134,135,136,137,149,152,154,155,156,157,168,177,182,],[-50,-67,-76,-78,-80,-92,-98,-102,-103,-104,-105,-106,-107,-108,126,-71,-79,-91,-97,-100,-101,-109,-43,-70,-66,-75,-77,-82,-84,-94,-96,-99,165,-69,-81,-83,-93,-95,177,-42,184,]),'VOID':([75,112,],[115,115,]),'ELIF':([160,181,186,],[172,-74,172,]),'ELSE':([160,170,181,186,187,],[173,173,-74,-57,-56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_aux':([0,],[2,]),'main':([0,2,],[3,7,]),'function':([0,2,],[4,8,]),'function_header':([0,2,],[6,6,]),'function_body':([6,9,],[11,13,]),'function_body_aux':([12,17,],[15,43,]),'statements':([12,15,18,161,],[16,41,44,174,]),'var':([12,17,],[17,17,]),'statement':([12,15,18,161,],[18,18,18,18,]),'type_aux':([12,17,],[19,19,]),'statement_aux':([12,15,18,161,],[21,21,21,21,]),'statement_aux_2':([12,15,18,161,],[22,22,22,22,]),'type':([12,14,17,23,75,112,117,144,],[24,40,24,52,114,114,40,40,]),'assignment':([12,15,18,161,],[25,25,25,25,]),'function_call':([12,15,18,34,47,49,50,59,61,62,64,72,73,79,86,87,88,96,97,99,100,129,151,161,179,],[26,26,26,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,26,69,]),'return':([12,15,18,161,],[27,27,27,27,]),'print':([12,15,18,161,],[28,28,28,28,]),'if':([12,15,18,161,],[29,29,29,29,]),'while':([12,15,18,161,],[30,30,30,30,]),'function_params':([14,117,144,],[38,145,163,]),'array_index':([20,65,76,],[46,105,116,]),'params_pass':([20,65,],[48,48,]),'expression':([34,47,49,50,61,72,73,79,86,129,151,179,],[53,80,83,84,102,110,111,123,130,153,168,183,]),'exp':([34,47,49,50,61,72,73,79,86,87,129,151,179,],[54,54,54,54,54,54,54,54,54,131,54,54,54,]),'xp':([34,47,49,50,61,72,73,79,86,87,129,151,179,],[55,55,55,55,55,55,55,55,55,55,55,55,55,]),'x':([34,47,49,50,61,72,73,79,86,87,88,129,151,179,],[56,56,56,56,56,56,56,56,56,56,132,56,56,56,]),'term':([34,47,49,50,61,72,73,79,86,87,88,96,97,129,151,179,],[57,57,57,57,57,57,57,57,57,57,57,133,134,57,57,57,]),'factor':([34,47,49,50,61,72,73,79,86,87,88,96,97,99,100,129,151,179,],[58,58,58,58,58,58,58,58,58,58,58,58,58,135,136,58,58,58,]),'factor_aux':([34,47,49,50,59,61,72,73,79,86,87,88,96,97,99,100,129,151,179,],[60,60,60,60,101,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'const':([34,47,49,50,59,61,62,64,72,73,79,86,87,88,96,97,99,100,129,151,179,],[63,63,63,63,63,63,103,104,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'array_access':([34,47,49,50,59,61,62,64,72,73,79,86,87,88,96,97,99,100,129,151,179,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'get_var_name':([45,],[78,]),'read':([47,79,],[81,124,]),'log_op':([56,],[88,]),'x_aux':([57,133,134,],[95,154,155,]),'term_aux':([58,135,136,],[98,156,157,]),'print_aux':([71,139,140,],[106,158,159,]),'function_type':([75,112,],[113,143,]),'array_dim':([78,150,],[118,166,]),'var_aux':([78,118,150,166,],[119,146,167,176,]),'params_pass_aux':([84,153,],[127,169,]),'block':([141,142,173,185,],[160,162,180,186,]),'elif':([160,186,],[170,187,]),'else':([160,170,],[171,178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_aux main','program',2,'p_program','parser.py',11),
  ('program -> main','program',1,'p_program','parser.py',12),
  ('program_aux -> program_aux function','program_aux',2,'p_program_aux','parser.py',15),
  ('program_aux -> function','program_aux',1,'p_program_aux','parser.py',16),
  ('function -> function_header function_body','function',2,'p_function','parser.py',19),
  ('main -> FUNCTION MAIN function_body','main',3,'p_main','parser.py',22),
  ('function_header -> FUNCTION ID L_PARENS function_params R_PARENS COLON function_type','function_header',7,'p_function_header','parser.py',25),
  ('function_header -> FUNCTION ID L_PARENS R_PARENS COLON function_type','function_header',6,'p_function_header','parser.py',26),
  ('function_body -> L_KEY_BRACKET function_body_aux statements R_KEY_BRACKET','function_body',4,'p_function_body','parser.py',29),
  ('function_body -> L_KEY_BRACKET statements R_KEY_BRACKET','function_body',3,'p_function_body','parser.py',30),
  ('function_body_aux -> var function_body_aux','function_body_aux',2,'p_function_body_aux','parser.py',33),
  ('function_body_aux -> var','function_body_aux',1,'p_function_body_aux','parser.py',34),
  ('statements -> statement statements','statements',2,'p_statements','parser.py',37),
  ('statements -> statement','statements',1,'p_statements','parser.py',38),
  ('function_params -> type ID array_index COMMA function_params','function_params',5,'p_function_params','parser.py',41),
  ('function_params -> type ID array_index','function_params',3,'p_function_params','parser.py',42),
  ('function_params -> type ID COMMA function_params','function_params',4,'p_function_params','parser.py',43),
  ('function_params -> type ID','function_params',2,'p_function_params','parser.py',44),
  ('function_type -> type','function_type',1,'p_function_type','parser.py',47),
  ('function_type -> VOID','function_type',1,'p_function_type','parser.py',48),
  ('var -> type_aux ID get_var_name array_dim var_aux SEMICOLON','var',6,'p_var','parser.py',51),
  ('var -> type_aux ID get_var_name array_dim SEMICOLON','var',5,'p_var','parser.py',52),
  ('var -> type_aux ID get_var_name var_aux SEMICOLON','var',5,'p_var','parser.py',53),
  ('var -> type_aux ID get_var_name SEMICOLON','var',4,'p_var','parser.py',54),
  ('type_aux -> GLOBAL type','type_aux',2,'p_type_aux','parser.py',57),
  ('type_aux -> type','type_aux',1,'p_type_aux','parser.py',58),
  ('var_aux -> COMMA ID array_dim var_aux','var_aux',4,'p_var_aux','parser.py',61),
  ('var_aux -> COMMA ID array_dim','var_aux',3,'p_var_aux','parser.py',62),
  ('var_aux -> COMMA ID var_aux','var_aux',3,'p_var_aux','parser.py',63),
  ('var_aux -> COMMA ID','var_aux',2,'p_var_aux','parser.py',64),
  ('statement -> statement_aux SEMICOLON','statement',2,'p_statement','parser.py',67),
  ('statement -> statement_aux_2','statement',1,'p_statement','parser.py',68),
  ('statement_aux -> assignment','statement_aux',1,'p_statement_aux','parser.py',71),
  ('statement_aux -> function_call','statement_aux',1,'p_statement_aux','parser.py',72),
  ('statement_aux -> return','statement_aux',1,'p_statement_aux','parser.py',73),
  ('statement_aux -> print','statement_aux',1,'p_statement_aux','parser.py',74),
  ('statement_aux_2 -> if','statement_aux_2',1,'p_statement_aux_2','parser.py',77),
  ('statement_aux_2 -> while','statement_aux_2',1,'p_statement_aux_2','parser.py',78),
  ('type -> INT','type',1,'p_type','parser.py',81),
  ('type -> FLOAT','type',1,'p_type','parser.py',82),
  ('type -> STRING','type',1,'p_type','parser.py',83),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',6,'p_array_index','parser.py',86),
  ('array_index -> L_SQUARE_BRACKET expression R_SQUARE_BRACKET','array_index',3,'p_array_index','parser.py',87),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',6,'p_array_dim','parser.py',90),
  ('array_dim -> L_SQUARE_BRACKET CONST_I R_SQUARE_BRACKET','array_dim',3,'p_array_dim','parser.py',91),
  ('assignment -> ID array_index ASSIGN expression','assignment',4,'p_assignment','parser.py',94),
  ('assignment -> ID array_index ASSIGN read','assignment',4,'p_assignment','parser.py',95),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',96),
  ('assignment -> ID ASSIGN read','assignment',3,'p_assignment','parser.py',97),
  ('function_call -> ID params_pass','function_call',2,'p_function_call','parser.py',100),
  ('return -> RETURN expression','return',2,'p_return','parser.py',103),
  ('if -> IF L_PARENS expression R_PARENS block elif else','if',7,'p_if','parser.py',106),
  ('if -> IF L_PARENS expression R_PARENS block elif','if',6,'p_if','parser.py',107),
  ('if -> IF L_PARENS expression R_PARENS block else','if',6,'p_if','parser.py',108),
  ('if -> IF L_PARENS expression R_PARENS block','if',5,'p_if','parser.py',109),
  ('elif -> ELIF L_PARENS expression R_PARENS block elif','elif',6,'p_elif','parser.py',112),
  ('elif -> ELIF L_PARENS expression R_PARENS block','elif',5,'p_elif','parser.py',113),
  ('else -> ELSE block','else',2,'p_else','parser.py',116),
  ('while -> WHILE L_PARENS expression R_PARENS block','while',5,'p_while','parser.py',119),
  ('print -> PRINT L_PARENS print_aux R_PARENS','print',4,'p_print','parser.py',122),
  ('print -> PRINT L_PARENS R_PARENS','print',3,'p_print','parser.py',123),
  ('print_aux -> CONST_STRING COMMA print_aux','print_aux',3,'p_print_aux','parser.py',126),
  ('print_aux -> CONST_STRING','print_aux',1,'p_print_aux','parser.py',127),
  ('print_aux -> ID COMMA print_aux','print_aux',3,'p_print_aux','parser.py',128),
  ('print_aux -> ID','print_aux',1,'p_print_aux','parser.py',129),
  ('expression -> exp AND expression','expression',3,'p_expression','parser.py',132),
  ('expression -> exp','expression',1,'p_expression','parser.py',133),
  ('read -> READ ID','read',2,'p_read','parser.py',136),
  ('params_pass -> L_PARENS expression params_pass_aux R_PARENS','params_pass',4,'p_params_pass','parser.py',139),
  ('params_pass -> L_PARENS expression R_PARENS','params_pass',3,'p_params_pass','parser.py',140),
  ('params_pass -> L_PARENS R_PARENS','params_pass',2,'p_params_pass','parser.py',141),
  ('params_pass_aux -> COMMA expression params_pass_aux','params_pass_aux',3,'p_params_pass_aux','parser.py',144),
  ('params_pass_aux -> COMMA expression','params_pass_aux',2,'p_params_pass_aux','parser.py',145),
  ('block -> L_KEY_BRACKET statements R_KEY_BRACKET','block',3,'p_block','parser.py',148),
  ('exp -> xp OR exp','exp',3,'p_exp','parser.py',151),
  ('exp -> xp','exp',1,'p_exp','parser.py',152),
  ('xp -> x log_op x','xp',3,'p_xp','parser.py',155),
  ('xp -> x','xp',1,'p_xp','parser.py',156),
  ('x -> term x_aux','x',2,'p_x','parser.py',159),
  ('x -> term','x',1,'p_x','parser.py',160),
  ('x_aux -> PLUS term x_aux','x_aux',3,'p_x_aux','parser.py',163),
  ('x_aux -> PLUS term','x_aux',2,'p_x_aux','parser.py',164),
  ('x_aux -> MINUS term x_aux','x_aux',3,'p_x_aux','parser.py',165),
  ('x_aux -> MINUS term','x_aux',2,'p_x_aux','parser.py',166),
  ('log_op -> NOT_EQUAL','log_op',1,'p_log_op','parser.py',169),
  ('log_op -> EQUALS','log_op',1,'p_log_op','parser.py',170),
  ('log_op -> GREATER','log_op',1,'p_log_op','parser.py',171),
  ('log_op -> GREATER_EQ','log_op',1,'p_log_op','parser.py',172),
  ('log_op -> LESS','log_op',1,'p_log_op','parser.py',173),
  ('log_op -> LESS_EQ','log_op',1,'p_log_op','parser.py',174),
  ('term -> factor term_aux','term',2,'p_term','parser.py',177),
  ('term -> factor','term',1,'p_term','parser.py',178),
  ('term_aux -> TIMES factor term_aux','term_aux',3,'p_term_aux','parser.py',181),
  ('term_aux -> TIMES factor','term_aux',2,'p_term_aux','parser.py',182),
  ('term_aux -> DIVIDE factor term_aux','term_aux',3,'p_term_aux','parser.py',183),
  ('term_aux -> DIVIDE factor','term_aux',2,'p_term_aux','parser.py',184),
  ('factor -> NOT factor_aux','factor',2,'p_factor','parser.py',187),
  ('factor -> factor_aux','factor',1,'p_factor','parser.py',188),
  ('factor_aux -> L_PARENS expression R_PARENS','factor_aux',3,'p_factor_aux','parser.py',191),
  ('factor_aux -> PLUS const','factor_aux',2,'p_factor_aux','parser.py',192),
  ('factor_aux -> MINUS const','factor_aux',2,'p_factor_aux','parser.py',193),
  ('factor_aux -> const','factor_aux',1,'p_factor_aux','parser.py',194),
  ('const -> ID','const',1,'p_const','parser.py',197),
  ('const -> CONST_I','const',1,'p_const','parser.py',198),
  ('const -> CONST_F','const',1,'p_const','parser.py',199),
  ('const -> CONST_STRING','const',1,'p_const','parser.py',200),
  ('const -> function_call','const',1,'p_const','parser.py',201),
  ('const -> array_access','const',1,'p_const','parser.py',202),
  ('array_access -> ID array_index','array_access',2,'p_array_access','parser.py',205),
  ('get_var_name -> <empty>','get_var_name',0,'p_n_var_name','parser.py',210),
]
